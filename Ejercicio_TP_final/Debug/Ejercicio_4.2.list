
Ejercicio_4.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004478  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004648  08004648  00014648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800477c  0800477c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004784  08004784  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800478c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000078  08004804  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  08004804  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d69b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002148  00000000  00000000  0002d743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002f890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  00030390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022956  00000000  00000000  00030da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5b3  00000000  00000000  000536fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbf56  00000000  00000000  00061cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012dc07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035ac  00000000  00000000  0012dc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004630 	.word	0x08004630

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08004630 	.word	0x08004630

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fca2 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f80e 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f8d0 	bl	8000764 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 f876 	bl	80006b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c8:	f000 f89e 	bl	8000708 <MX_USB_OTG_FS_PCD_Init>

  debounceFSM_init();
 80005cc:	f000 fb8a 	bl	8000ce4 <debounceFSM_init>

  while (1)
  {
	  debounceFSM_update();
 80005d0:	f000 fb98 	bl	8000d04 <debounceFSM_update>
	  readKey();
 80005d4:	f000 fc30 	bl	8000e38 <readKey>
	  debounceFSM_update();
 80005d8:	e7fa      	b.n	80005d0 <main+0x1c>
	...

080005dc <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2234      	movs	r2, #52	; 0x34
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f856 	bl	800369c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b29      	ldr	r3, [pc, #164]	; (80006ac <SystemClock_Config+0xd0>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a28      	ldr	r2, [pc, #160]	; (80006ac <SystemClock_Config+0xd0>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b26      	ldr	r3, [pc, #152]	; (80006ac <SystemClock_Config+0xd0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <SystemClock_Config+0xd4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <SystemClock_Config+0xd4>)
 8000626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800063c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000640:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000650:	23a8      	movs	r3, #168	; 0xa8
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000658:	2307      	movs	r3, #7
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800065c:	2302      	movs	r3, #2
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4618      	mov	r0, r3
 8000666:	f001 ff63 	bl	8002530 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000670:	f000 f926 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2302      	movs	r3, #2
 800067a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000680:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2105      	movs	r1, #5
 8000692:	4618      	mov	r0, r3
 8000694:	f001 f8d8 	bl	8001848 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800069e:	f000 f90f 	bl	80008c0 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_USART3_UART_Init+0x50>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006ec:	f002 f9be 	bl	8002a6c <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006f6:	f000 f8e3 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000094 	.word	0x20000094
 8000704:	40004800 	.word	0x40004800

08000708 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000712:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000716:	2206      	movs	r2, #6
 8000718:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071c:	2202      	movs	r2, #2
 800071e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000728:	2202      	movs	r2, #2
 800072a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072e:	2201      	movs	r2, #1
 8000730:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000740:	2201      	movs	r2, #1
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074c:	f000 ff33 	bl	80015b6 <HAL_PCD_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000756:	f000 f8b3 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000d8 	.word	0x200000d8

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	4b4c      	ldr	r3, [pc, #304]	; (80008b0 <MX_GPIO_Init+0x14c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a4b      	ldr	r2, [pc, #300]	; (80008b0 <MX_GPIO_Init+0x14c>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b49      	ldr	r3, [pc, #292]	; (80008b0 <MX_GPIO_Init+0x14c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	4b45      	ldr	r3, [pc, #276]	; (80008b0 <MX_GPIO_Init+0x14c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a44      	ldr	r2, [pc, #272]	; (80008b0 <MX_GPIO_Init+0x14c>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b42      	ldr	r3, [pc, #264]	; (80008b0 <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <MX_GPIO_Init+0x14c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a3d      	ldr	r2, [pc, #244]	; (80008b0 <MX_GPIO_Init+0x14c>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <MX_GPIO_Init+0x14c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b37      	ldr	r3, [pc, #220]	; (80008b0 <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a36      	ldr	r2, [pc, #216]	; (80008b0 <MX_GPIO_Init+0x14c>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b34      	ldr	r3, [pc, #208]	; (80008b0 <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <MX_GPIO_Init+0x14c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a2f      	ldr	r2, [pc, #188]	; (80008b0 <MX_GPIO_Init+0x14c>)
 80007f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <MX_GPIO_Init+0x14c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <MX_GPIO_Init+0x14c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a28      	ldr	r2, [pc, #160]	; (80008b0 <MX_GPIO_Init+0x14c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <MX_GPIO_Init+0x14c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f244 0181 	movw	r1, #16513	; 0x4081
 8000828:	4822      	ldr	r0, [pc, #136]	; (80008b4 <MX_GPIO_Init+0x150>)
 800082a:	f000 fe91 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	4821      	ldr	r0, [pc, #132]	; (80008b8 <MX_GPIO_Init+0x154>)
 8000834:	f000 fe8c 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	481b      	ldr	r0, [pc, #108]	; (80008bc <MX_GPIO_Init+0x158>)
 8000850:	f000 fcd2 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000854:	f244 0381 	movw	r3, #16513	; 0x4081
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4811      	ldr	r0, [pc, #68]	; (80008b4 <MX_GPIO_Init+0x150>)
 800086e:	f000 fcc3 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000872:	2340      	movs	r3, #64	; 0x40
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	480b      	ldr	r0, [pc, #44]	; (80008b8 <MX_GPIO_Init+0x154>)
 800088a:	f000 fcb5 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800088e:	2380      	movs	r3, #128	; 0x80
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_GPIO_Init+0x154>)
 80008a2:	f000 fca9 	bl	80011f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a6:	bf00      	nop
 80008a8:	3730      	adds	r7, #48	; 0x30
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020400 	.word	0x40020400
 80008b8:	40021800 	.word	0x40021800
 80008bc:	40020800 	.word	0x40020800

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <HAL_MspInit+0x4c>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x4c>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <HAL_UART_MspInit+0x84>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12c      	bne.n	8000998 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000976:	f44f 7340 	mov.w	r3, #768	; 0x300
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000988:	2307      	movs	r3, #7
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <HAL_UART_MspInit+0x8c>)
 8000994:	f000 fc30 	bl	80011f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40004800 	.word	0x40004800
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020c00 	.word	0x40020c00

080009ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0a0      	sub	sp, #128	; 0x80
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	225c      	movs	r2, #92	; 0x5c
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fe65 	bl	800369c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009da:	d14e      	bne.n	8000a7a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80009dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80009e2:	2300      	movs	r3, #0
 80009e4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 f846 	bl	8001a7c <HAL_RCCEx_PeriphCLKConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80009f6:	f7ff ff63 	bl	80008c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <HAL_PCD_MspInit+0xd8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a20      	ldr	r2, [pc, #128]	; (8000a84 <HAL_PCD_MspInit+0xd8>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <HAL_PCD_MspInit+0xd8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a16:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a28:	230a      	movs	r3, #10
 8000a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a30:	4619      	mov	r1, r3
 8000a32:	4815      	ldr	r0, [pc, #84]	; (8000a88 <HAL_PCD_MspInit+0xdc>)
 8000a34:	f000 fbe0 	bl	80011f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480e      	ldr	r0, [pc, #56]	; (8000a88 <HAL_PCD_MspInit+0xdc>)
 8000a4e:	f000 fbd3 	bl	80011f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_PCD_MspInit+0xd8>)
 8000a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <HAL_PCD_MspInit+0xd8>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	6353      	str	r3, [r2, #52]	; 0x34
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_PCD_MspInit+0xd8>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_PCD_MspInit+0xd8>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_PCD_MspInit+0xd8>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3780      	adds	r7, #128	; 0x80
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 fa64 	bl	8000fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return 1;
 8000ae4:	2301      	movs	r3, #1
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <_kill>:

int _kill(int pid, int sig)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000afa:	f002 fd93 	bl	8003624 <__errno>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2216      	movs	r2, #22
 8000b02:	601a      	str	r2, [r3, #0]
  return -1;
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <_exit>:

void _exit (int status)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ffe7 	bl	8000af0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b22:	e7fe      	b.n	8000b22 <_exit+0x12>

08000b24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	e00a      	b.n	8000b4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b36:	f3af 8000 	nop.w
 8000b3a:	4601      	mov	r1, r0
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	60ba      	str	r2, [r7, #8]
 8000b42:	b2ca      	uxtb	r2, r1
 8000b44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf0      	blt.n	8000b36 <_read+0x12>
  }

  return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	e009      	b.n	8000b84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	60ba      	str	r2, [r7, #8]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf1      	blt.n	8000b70 <_write+0x12>
  }
  return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_close>:

int _close(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bbe:	605a      	str	r2, [r3, #4]
  return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_isatty>:

int _isatty(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f002 fcf8 	bl	8003624 <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20020000 	.word	0x20020000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	200005e4 	.word	0x200005e4
 8000c68:	20000610 	.word	0x20000610

08000c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c96:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cac:	4c0b      	ldr	r4, [pc, #44]	; (8000cdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cba:	f7ff ffd7 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f002 fcc9 	bl	8003654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fc77 	bl	80005b4 <main>
  bx  lr    
 8000cc6:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000cc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000cd4:	0800478c 	.word	0x0800478c
  ldr r2, =_sbss
 8000cd8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000cdc:	2000060c 	.word	0x2000060c

08000ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_IRQHandler>
	...

08000ce4 <debounceFSM_init>:
static debounceState_t estadoActual;						//Tipo de variable para máquina de estado
bool var_readKey = false;
//DEFINICIÓN DE FUNCIONES
// Inicia nuestra MEF asignando el valor de BUTTON UP
void debounceFSM_init()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	assert(&estadoActual!=NULL);
	delayInit(&ret_rebote, time_rebote); 				//Inicialización del delay para antirebote
 8000ce8:	2128      	movs	r1, #40	; 0x28
 8000cea:	4804      	ldr	r0, [pc, #16]	; (8000cfc <debounceFSM_init+0x18>)
 8000cec:	f000 f8b0 	bl	8000e50 <delayInit>
	estadoActual=BUTTON_UP;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <debounceFSM_init+0x1c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200005e8 	.word	0x200005e8
 8000d00:	200005f4 	.word	0x200005f4

08000d04 <debounceFSM_update>:

//Evalúa el boton de usuario y cambia de estado si acaba el tiempo antirebote
void debounceFSM_update()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	assert(&estadoActual!=NULL);
	switch(estadoActual)
 8000d08:	4b34      	ldr	r3, [pc, #208]	; (8000ddc <debounceFSM_update+0xd8>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d859      	bhi.n	8000dc4 <debounceFSM_update+0xc0>
 8000d10:	a201      	add	r2, pc, #4	; (adr r2, 8000d18 <debounceFSM_update+0x14>)
 8000d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d16:	bf00      	nop
 8000d18:	08000d29 	.word	0x08000d29
 8000d1c:	08000d41 	.word	0x08000d41
 8000d20:	08000d77 	.word	0x08000d77
 8000d24:	08000d8f 	.word	0x08000d8f
	{
	case BUTTON_UP:
		if((HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)))
 8000d28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2c:	482c      	ldr	r0, [pc, #176]	; (8000de0 <debounceFSM_update+0xdc>)
 8000d2e:	f000 fbf7 	bl	8001520 <HAL_GPIO_ReadPin>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d048      	beq.n	8000dca <debounceFSM_update+0xc6>
			estadoActual=BUTTON_FALLING;
 8000d38:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <debounceFSM_update+0xd8>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]

		break;
 8000d3e:	e044      	b.n	8000dca <debounceFSM_update+0xc6>
	case BUTTON_FALLING:
		if(!(delayRead(&ret_rebote)))
 8000d40:	4828      	ldr	r0, [pc, #160]	; (8000de4 <debounceFSM_update+0xe0>)
 8000d42:	f000 f8a3 	bl	8000e8c <delayRead>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f083 0301 	eor.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d03d      	beq.n	8000dce <debounceFSM_update+0xca>
		{
			if((HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)))
 8000d52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d56:	4822      	ldr	r0, [pc, #136]	; (8000de0 <debounceFSM_update+0xdc>)
 8000d58:	f000 fbe2 	bl	8001520 <HAL_GPIO_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d005      	beq.n	8000d6e <debounceFSM_update+0x6a>
			{
				estadoActual=BUTTON_DOWN;
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <debounceFSM_update+0xd8>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 8000d68:	f000 f83e 	bl	8000de8 <buttonPressed>
			}
			else{
				estadoActual=BUTTON_UP;
			}
		}
		break;
 8000d6c:	e02f      	b.n	8000dce <debounceFSM_update+0xca>
				estadoActual=BUTTON_UP;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <debounceFSM_update+0xd8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
		break;
 8000d74:	e02b      	b.n	8000dce <debounceFSM_update+0xca>
	case BUTTON_DOWN:
		if(!(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)))
 8000d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7a:	4819      	ldr	r0, [pc, #100]	; (8000de0 <debounceFSM_update+0xdc>)
 8000d7c:	f000 fbd0 	bl	8001520 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d125      	bne.n	8000dd2 <debounceFSM_update+0xce>
			estadoActual=BUTTON_RAISING;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <debounceFSM_update+0xd8>)
 8000d88:	2203      	movs	r2, #3
 8000d8a:	701a      	strb	r2, [r3, #0]
		break;
 8000d8c:	e021      	b.n	8000dd2 <debounceFSM_update+0xce>
	case BUTTON_RAISING:
		if(!(delayRead(&ret_rebote)))
 8000d8e:	4815      	ldr	r0, [pc, #84]	; (8000de4 <debounceFSM_update+0xe0>)
 8000d90:	f000 f87c 	bl	8000e8c <delayRead>
 8000d94:	4603      	mov	r3, r0
 8000d96:	f083 0301 	eor.w	r3, r3, #1
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d01a      	beq.n	8000dd6 <debounceFSM_update+0xd2>
				{
					if(!(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)))
 8000da0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da4:	480e      	ldr	r0, [pc, #56]	; (8000de0 <debounceFSM_update+0xdc>)
 8000da6:	f000 fbbb 	bl	8001520 <HAL_GPIO_ReadPin>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d105      	bne.n	8000dbc <debounceFSM_update+0xb8>
					{
						estadoActual=BUTTON_UP;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <debounceFSM_update+0xd8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
						buttonReleased();
 8000db6:	f000 f82b 	bl	8000e10 <buttonReleased>
					}
					else{
						estadoActual=BUTTON_DOWN;
					}
				}
		break;
 8000dba:	e00c      	b.n	8000dd6 <debounceFSM_update+0xd2>
						estadoActual=BUTTON_DOWN;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <debounceFSM_update+0xd8>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	701a      	strb	r2, [r3, #0]
		break;
 8000dc2:	e008      	b.n	8000dd6 <debounceFSM_update+0xd2>
	default:
		debounceFSM_init();
 8000dc4:	f7ff ff8e 	bl	8000ce4 <debounceFSM_init>
		break;
 8000dc8:	e006      	b.n	8000dd8 <debounceFSM_update+0xd4>
		break;
 8000dca:	bf00      	nop
 8000dcc:	e004      	b.n	8000dd8 <debounceFSM_update+0xd4>
		break;
 8000dce:	bf00      	nop
 8000dd0:	e002      	b.n	8000dd8 <debounceFSM_update+0xd4>
		break;
 8000dd2:	bf00      	nop
 8000dd4:	e000      	b.n	8000dd8 <debounceFSM_update+0xd4>
		break;
 8000dd6:	bf00      	nop

	}
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200005f4 	.word	0x200005f4
 8000de0:	40020800 	.word	0x40020800
 8000de4:	200005e8 	.word	0x200005e8

08000de8 <buttonPressed>:
//Acción que se realiza cuando el botón se presionó
//pasado el tiempo de antirebote
void buttonPressed()
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, led[0]);
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <buttonPressed+0x1c>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <buttonPressed+0x20>)
 8000df4:	f000 fbc5 	bl	8001582 <HAL_GPIO_TogglePin>
	var_readKey = true;
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <buttonPressed+0x24>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000004 	.word	0x20000004
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	200005f5 	.word	0x200005f5

08000e10 <buttonReleased>:
//Acción que se realiza cuando el botón se soltó
//pasado el tiempo de antirebote
void buttonReleased()
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, led[2]);
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <buttonReleased+0x1c>)
 8000e16:	889b      	ldrh	r3, [r3, #4]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <buttonReleased+0x20>)
 8000e1c:	f000 fbb1 	bl	8001582 <HAL_GPIO_TogglePin>
	var_readKey = false;
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <buttonReleased+0x24>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000004 	.word	0x20000004
 8000e30:	40020400 	.word	0x40020400
 8000e34:	200005f5 	.word	0x200005f5

08000e38 <readKey>:
bool readKey()
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
return var_readKey;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <readKey+0x14>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	200005f5 	.word	0x200005f5

08000e50 <delayInit>:

#include "Api_delay.h"
void delayInit( delay_t * delay, tick_t duration ){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	assert(delay!= NULL);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d105      	bne.n	8000e6c <delayInit+0x1c>
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <delayInit+0x30>)
 8000e62:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <delayInit+0x34>)
 8000e64:	2104      	movs	r1, #4
 8000e66:	4808      	ldr	r0, [pc, #32]	; (8000e88 <delayInit+0x38>)
 8000e68:	f002 fbbe 	bl	80035e8 <__assert_func>
 delay->duration= duration;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 delay->running=false;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	721a      	strb	r2, [r3, #8]
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	08004648 	.word	0x08004648
 8000e84:	08004690 	.word	0x08004690
 8000e88:	08004658 	.word	0x08004658

08000e8c <delayRead>:

bool_t delayRead( delay_t * delay ){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	assert(delay!= NULL);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d105      	bne.n	8000ea6 <delayRead+0x1a>
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <delayRead+0x68>)
 8000e9c:	4a16      	ldr	r2, [pc, #88]	; (8000ef8 <delayRead+0x6c>)
 8000e9e:	210a      	movs	r1, #10
 8000ea0:	4816      	ldr	r0, [pc, #88]	; (8000efc <delayRead+0x70>)
 8000ea2:	f002 fba1 	bl	80035e8 <__assert_func>
	if((delay->running)==false ){
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7a1b      	ldrb	r3, [r3, #8]
 8000eaa:	f083 0301 	eor.w	r3, r3, #1
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d007      	beq.n	8000ec4 <delayRead+0x38>
		delay->startTime = HAL_GetTick();
 8000eb4:	f000 f88a 	bl	8000fcc <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	721a      	strb	r2, [r3, #8]
	}

	if(delay->running){
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7a1b      	ldrb	r3, [r3, #8]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00c      	beq.n	8000ee6 <delayRead+0x5a>
		if((HAL_GetTick()-(delay->startTime))>=delay->duration){
 8000ecc:	f000 f87e 	bl	8000fcc <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	1ad2      	subs	r2, r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d302      	bcc.n	8000ee6 <delayRead+0x5a>
			delay->running = false;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	721a      	strb	r2, [r3, #8]
		}
	}
return delay->running;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7a1b      	ldrb	r3, [r3, #8]

}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08004648 	.word	0x08004648
 8000ef8:	0800469c 	.word	0x0800469c
 8000efc:	08004658 	.word	0x08004658

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <HAL_Init+0x40>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_Init+0x40>)
 8000f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_Init+0x40>)
 8000f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f931 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f808 	bl	8000f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fcca 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023c00 	.word	0x40023c00

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x54>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x58>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f93b 	bl	80011de <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00e      	b.n	8000f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d80a      	bhi.n	8000f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f000 f911 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_InitTick+0x5c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e000      	b.n	8000f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000010 	.word	0x20000010
 8000fa0:	2000000c 	.word	0x2000000c

08000fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000010 	.word	0x20000010
 8000fc8:	200005f8 	.word	0x200005f8

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	200005f8 	.word	0x200005f8

08000fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff ffee 	bl	8000fcc <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffc:	d005      	beq.n	800100a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_Delay+0x44>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800100a:	bf00      	nop
 800100c:	f7ff ffde 	bl	8000fcc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	d8f7      	bhi.n	800100c <HAL_Delay+0x28>
  {
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000010 	.word	0x20000010

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff47 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff5c 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff8e 	bl	80010e4 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5d 	bl	8001090 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffb0 	bl	800114c <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	e165      	b.n	80014e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	f040 8154 	bne.w	80014da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d005      	beq.n	800124a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	2b02      	cmp	r3, #2
 8001248:	d130      	bne.n	80012ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 0201 	and.w	r2, r3, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d017      	beq.n	80012e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d123      	bne.n	800133c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	69b9      	ldr	r1, [r7, #24]
 8001338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80ae 	beq.w	80014da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a5c      	ldr	r2, [pc, #368]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b5a      	ldr	r3, [pc, #360]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139a:	4a58      	ldr	r2, [pc, #352]	; (80014fc <HAL_GPIO_Init+0x304>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4f      	ldr	r2, [pc, #316]	; (8001500 <HAL_GPIO_Init+0x308>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d025      	beq.n	8001412 <HAL_GPIO_Init+0x21a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4e      	ldr	r2, [pc, #312]	; (8001504 <HAL_GPIO_Init+0x30c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d01f      	beq.n	800140e <HAL_GPIO_Init+0x216>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4d      	ldr	r2, [pc, #308]	; (8001508 <HAL_GPIO_Init+0x310>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d019      	beq.n	800140a <HAL_GPIO_Init+0x212>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4c      	ldr	r2, [pc, #304]	; (800150c <HAL_GPIO_Init+0x314>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d013      	beq.n	8001406 <HAL_GPIO_Init+0x20e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4b      	ldr	r2, [pc, #300]	; (8001510 <HAL_GPIO_Init+0x318>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00d      	beq.n	8001402 <HAL_GPIO_Init+0x20a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4a      	ldr	r2, [pc, #296]	; (8001514 <HAL_GPIO_Init+0x31c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d007      	beq.n	80013fe <HAL_GPIO_Init+0x206>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a49      	ldr	r2, [pc, #292]	; (8001518 <HAL_GPIO_Init+0x320>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_GPIO_Init+0x202>
 80013f6:	2306      	movs	r3, #6
 80013f8:	e00c      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 80013fa:	2307      	movs	r3, #7
 80013fc:	e00a      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 80013fe:	2305      	movs	r3, #5
 8001400:	e008      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 8001402:	2304      	movs	r3, #4
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 8001406:	2303      	movs	r3, #3
 8001408:	e004      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 800140a:	2302      	movs	r3, #2
 800140c:	e002      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 8001412:	2300      	movs	r3, #0
 8001414:	69fa      	ldr	r2, [r7, #28]
 8001416:	f002 0203 	and.w	r2, r2, #3
 800141a:	0092      	lsls	r2, r2, #2
 800141c:	4093      	lsls	r3, r2
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001424:	4935      	ldr	r1, [pc, #212]	; (80014fc <HAL_GPIO_Init+0x304>)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001432:	4b3a      	ldr	r3, [pc, #232]	; (800151c <HAL_GPIO_Init+0x324>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001456:	4a31      	ldr	r2, [pc, #196]	; (800151c <HAL_GPIO_Init+0x324>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800145c:	4b2f      	ldr	r3, [pc, #188]	; (800151c <HAL_GPIO_Init+0x324>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001480:	4a26      	ldr	r2, [pc, #152]	; (800151c <HAL_GPIO_Init+0x324>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001486:	4b25      	ldr	r3, [pc, #148]	; (800151c <HAL_GPIO_Init+0x324>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014aa:	4a1c      	ldr	r2, [pc, #112]	; (800151c <HAL_GPIO_Init+0x324>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <HAL_GPIO_Init+0x324>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d4:	4a11      	ldr	r2, [pc, #68]	; (800151c <HAL_GPIO_Init+0x324>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	f67f ae96 	bls.w	8001214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40013800 	.word	0x40013800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020400 	.word	0x40020400
 8001508:	40020800 	.word	0x40020800
 800150c:	40020c00 	.word	0x40020c00
 8001510:	40021000 	.word	0x40021000
 8001514:	40021400 	.word	0x40021400
 8001518:	40021800 	.word	0x40021800
 800151c:	40013c00 	.word	0x40013c00

08001520 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e001      	b.n	8001542 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001582:	b480      	push	{r7}
 8001584:	b085      	sub	sp, #20
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001594:	887a      	ldrh	r2, [r7, #2]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4013      	ands	r3, r2
 800159a:	041a      	lsls	r2, r3, #16
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43d9      	mvns	r1, r3
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	400b      	ands	r3, r1
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	619a      	str	r2, [r3, #24]
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b8:	b08f      	sub	sp, #60	; 0x3c
 80015ba:	af0a      	add	r7, sp, #40	; 0x28
 80015bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e116      	b.n	80017f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d106      	bne.n	80015e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff f9e2 	bl	80009ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2203      	movs	r2, #3
 80015ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f001 fd53 	bl	80030b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	687e      	ldr	r6, [r7, #4]
 8001614:	466d      	mov	r5, sp
 8001616:	f106 0410 	add.w	r4, r6, #16
 800161a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001626:	e885 0003 	stmia.w	r5, {r0, r1}
 800162a:	1d33      	adds	r3, r6, #4
 800162c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f001 fcde 	bl	8002ff0 <USB_CoreInit>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2202      	movs	r2, #2
 800163e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e0d7      	b.n	80017f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f001 fd41 	bl	80030d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	e04a      	b.n	80016ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	333d      	adds	r3, #61	; 0x3d
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	333c      	adds	r3, #60	; 0x3c
 800167c:	7bfa      	ldrb	r2, [r7, #15]
 800167e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001680:	7bfa      	ldrb	r2, [r7, #15]
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	b298      	uxth	r0, r3
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	3344      	adds	r3, #68	; 0x44
 8001694:	4602      	mov	r2, r0
 8001696:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	3340      	adds	r3, #64	; 0x40
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016ac:	7bfa      	ldrb	r2, [r7, #15]
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	3348      	adds	r3, #72	; 0x48
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4413      	add	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	334c      	adds	r3, #76	; 0x4c
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	3354      	adds	r3, #84	; 0x54
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	3301      	adds	r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d3af      	bcc.n	8001658 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e044      	b.n	8001788 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016fe:	7bfa      	ldrb	r2, [r7, #15]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001726:	7bfa      	ldrb	r2, [r7, #15]
 8001728:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001740:	7bfa      	ldrb	r2, [r7, #15]
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	3301      	adds	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	7bfa      	ldrb	r2, [r7, #15]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	d3b5      	bcc.n	80016fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	687e      	ldr	r6, [r7, #4]
 800179a:	466d      	mov	r5, sp
 800179c:	f106 0410 	add.w	r4, r6, #16
 80017a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80017b0:	1d33      	adds	r3, r6, #4
 80017b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b4:	6838      	ldr	r0, [r7, #0]
 80017b6:	f001 fcd9 	bl	800316c <USB_DevInit>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2202      	movs	r2, #2
 80017c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e014      	b.n	80017f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d102      	bne.n	80017ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f80a 	bl	80017fe <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f001 fe97 	bl	8003522 <USB_DevDisconnect>

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017fe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	f043 0303 	orr.w	r3, r3, #3
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0cc      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 030f 	and.w	r3, r3, #15
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d90c      	bls.n	8001884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b65      	ldr	r3, [pc, #404]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b63      	ldr	r3, [pc, #396]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0b8      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800189c:	4b59      	ldr	r3, [pc, #356]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a58      	ldr	r2, [pc, #352]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b4:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4a52      	ldr	r2, [pc, #328]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c0:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	494d      	ldr	r1, [pc, #308]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d044      	beq.n	8001968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d119      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e07f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001902:	2b03      	cmp	r3, #3
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e06f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e067      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001926:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f023 0203 	bic.w	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4934      	ldr	r1, [pc, #208]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	4313      	orrs	r3, r2
 8001936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001938:	f7ff fb48 	bl	8000fcc <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	e00a      	b.n	8001956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001940:	f7ff fb44 	bl	8000fcc <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e04f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 020c 	and.w	r2, r3, #12
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	429a      	cmp	r2, r3
 8001966:	d1eb      	bne.n	8001940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 030f 	and.w	r3, r3, #15
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d20c      	bcs.n	8001990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e032      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4916      	ldr	r1, [pc, #88]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	490e      	ldr	r1, [pc, #56]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ce:	f000 fb7f 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	490a      	ldr	r1, [pc, #40]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	5ccb      	ldrb	r3, [r1, r3]
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff faa8 	bl	8000f44 <HAL_InitTick>

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023c00 	.word	0x40023c00
 8001a04:	40023800 	.word	0x40023800
 8001a08:	08004678 	.word	0x08004678
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	2000000c 	.word	0x2000000c

08001a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000000 	.word	0x20000000

08001a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a30:	f7ff fff0 	bl	8001a14 <HAL_RCC_GetHCLKFreq>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	0a9b      	lsrs	r3, r3, #10
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4903      	ldr	r1, [pc, #12]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a42:	5ccb      	ldrb	r3, [r1, r3]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	08004688 	.word	0x08004688

08001a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a58:	f7ff ffdc 	bl	8001a14 <HAL_RCC_GetHCLKFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	0b5b      	lsrs	r3, r3, #13
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	4903      	ldr	r1, [pc, #12]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40023800 	.word	0x40023800
 8001a78:	08004688 	.word	0x08004688

08001a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d010      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001ab4:	4b6f      	ldr	r3, [pc, #444]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aba:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac2:	496c      	ldr	r1, [pc, #432]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d010      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001ae2:	4b64      	ldr	r3, [pc, #400]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ae8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af0:	4960      	ldr	r1, [pc, #384]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001b00:	2301      	movs	r3, #1
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d017      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b10:	4b58      	ldr	r3, [pc, #352]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4955      	ldr	r1, [pc, #340]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001b30:	2301      	movs	r3, #1
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d017      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b4c:	4b49      	ldr	r3, [pc, #292]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5a:	4946      	ldr	r1, [pc, #280]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0320 	and.w	r3, r3, #32
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 808a 	beq.w	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a38      	ldr	r2, [pc, #224]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001ba6:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a33      	ldr	r2, [pc, #204]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bb2:	f7ff fa0b 	bl	8000fcc <HAL_GetTick>
 8001bb6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001bba:	f7ff fa07 	bl	8000fcc <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e278      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bd8:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001be0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d02f      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf0:	6a3a      	ldr	r2, [r7, #32]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d028      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bfe:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d114      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7ff f9d5 	bl	8000fcc <HAL_GetTick>
 8001c22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff f9d1 	bl	8000fcc <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e240      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0ee      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c54:	d114      	bne.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c6a:	4902      	ldr	r1, [pc, #8]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]
 8001c70:	e00c      	b.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	42470e40 	.word	0x42470e40
 8001c80:	4b4a      	ldr	r3, [pc, #296]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a49      	ldr	r2, [pc, #292]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c8a:	6093      	str	r3, [r2, #8]
 8001c8c:	4b47      	ldr	r3, [pc, #284]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c98:	4944      	ldr	r1, [pc, #272]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d004      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001cb0:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001cb2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00a      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001cc0:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cce:	4937      	ldr	r1, [pc, #220]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00a      	beq.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ce2:	4b32      	ldr	r3, [pc, #200]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf0:	492e      	ldr	r1, [pc, #184]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d011      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d04:	4b29      	ldr	r3, [pc, #164]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	4926      	ldr	r1, [pc, #152]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d22:	d101      	bne.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001d24:	2301      	movs	r3, #1
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00a      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	491a      	ldr	r1, [pc, #104]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d011      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d64:	4911      	ldr	r1, [pc, #68]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d74:	d101      	bne.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001d76:	2301      	movs	r3, #1
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d88:	f040 80ff 	bne.w	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d92:	f7ff f91b 	bl	8000fcc <HAL_GetTick>
 8001d96:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d98:	e00e      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d9a:	f7ff f917 	bl	8000fcc <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d907      	bls.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e188      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001dac:	40023800 	.word	0x40023800
 8001db0:	424711e0 	.word	0x424711e0
 8001db4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001db8:	4b7e      	ldr	r3, [pc, #504]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1ea      	bne.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d009      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d028      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d124      	bne.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001dec:	4b71      	ldr	r3, [pc, #452]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001df2:	0c1b      	lsrs	r3, r3, #16
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001dfe:	4b6d      	ldr	r3, [pc, #436]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e04:	0e1b      	lsrs	r3, r3, #24
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	019b      	lsls	r3, r3, #6
 8001e16:	431a      	orrs	r2, r3
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	085b      	lsrs	r3, r3, #1
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	041b      	lsls	r3, r3, #16
 8001e20:	431a      	orrs	r2, r3
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	061b      	lsls	r3, r3, #24
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	071b      	lsls	r3, r3, #28
 8001e2e:	4961      	ldr	r1, [pc, #388]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e4a:	d00a      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d035      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e60:	d130      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e62:	4b54      	ldr	r3, [pc, #336]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e74:	4b4f      	ldr	r3, [pc, #316]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e7a:	0f1b      	lsrs	r3, r3, #28
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	019b      	lsls	r3, r3, #6
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	085b      	lsrs	r3, r3, #1
 8001e92:	3b01      	subs	r3, #1
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	061b      	lsls	r3, r3, #24
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	071b      	lsls	r3, r3, #28
 8001ea4:	4943      	ldr	r1, [pc, #268]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001eac:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eb2:	f023 021f 	bic.w	r2, r3, #31
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	493d      	ldr	r1, [pc, #244]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d029      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ed8:	d124      	bne.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001eda:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ee0:	0c1b      	lsrs	r3, r3, #16
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001eec:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ef2:	0f1b      	lsrs	r3, r3, #28
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	019b      	lsls	r3, r3, #6
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	041b      	lsls	r3, r3, #16
 8001f10:	431a      	orrs	r2, r3
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	061b      	lsls	r3, r3, #24
 8001f16:	431a      	orrs	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	071b      	lsls	r3, r3, #28
 8001f1c:	4925      	ldr	r1, [pc, #148]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d016      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	019b      	lsls	r3, r3, #6
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	085b      	lsrs	r3, r3, #1
 8001f42:	3b01      	subs	r3, #1
 8001f44:	041b      	lsls	r3, r3, #16
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	061b      	lsls	r3, r3, #24
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	071b      	lsls	r3, r3, #28
 8001f56:	4917      	ldr	r1, [pc, #92]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f64:	f7ff f832 	bl	8000fcc <HAL_GetTick>
 8001f68:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f6c:	f7ff f82e 	bl	8000fcc <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e09f      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	f040 8095 	bne.w	80020bc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f98:	f7ff f818 	bl	8000fcc <HAL_GetTick>
 8001f9c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f9e:	e00f      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fa0:	f7ff f814 	bl	8000fcc <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d908      	bls.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e085      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	42470068 	.word	0x42470068
 8001fbc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fc0:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fcc:	d0e8      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d02b      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d127      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001ff6:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffc:	0c1b      	lsrs	r3, r3, #16
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	3301      	adds	r3, #1
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699a      	ldr	r2, [r3, #24]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	019b      	lsls	r3, r3, #6
 8002012:	431a      	orrs	r2, r3
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	085b      	lsrs	r3, r3, #1
 8002018:	3b01      	subs	r3, #1
 800201a:	041b      	lsls	r3, r3, #16
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	061b      	lsls	r3, r3, #24
 8002024:	4928      	ldr	r1, [pc, #160]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800202c:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800202e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002032:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	3b01      	subs	r3, #1
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	4922      	ldr	r1, [pc, #136]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d01d      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002056:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800205a:	d118      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002062:	0e1b      	lsrs	r3, r3, #24
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	019b      	lsls	r3, r3, #6
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	085b      	lsrs	r3, r3, #1
 800207c:	3b01      	subs	r3, #1
 800207e:	041b      	lsls	r3, r3, #16
 8002080:	431a      	orrs	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	061b      	lsls	r3, r3, #24
 8002086:	4910      	ldr	r1, [pc, #64]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002094:	f7fe ff9a 	bl	8000fcc <HAL_GetTick>
 8002098:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800209c:	f7fe ff96 	bl	8000fcc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e007      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020ba:	d1ef      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3730      	adds	r7, #48	; 0x30
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	42470070 	.word	0x42470070

080020d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020d4:	b0ae      	sub	sp, #184	; 0xb8
 80020d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020f6:	4bcb      	ldr	r3, [pc, #812]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	f200 8206 	bhi.w	8002510 <HAL_RCC_GetSysClockFreq+0x440>
 8002104:	a201      	add	r2, pc, #4	; (adr r2, 800210c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210a:	bf00      	nop
 800210c:	08002141 	.word	0x08002141
 8002110:	08002511 	.word	0x08002511
 8002114:	08002511 	.word	0x08002511
 8002118:	08002511 	.word	0x08002511
 800211c:	08002149 	.word	0x08002149
 8002120:	08002511 	.word	0x08002511
 8002124:	08002511 	.word	0x08002511
 8002128:	08002511 	.word	0x08002511
 800212c:	08002151 	.word	0x08002151
 8002130:	08002511 	.word	0x08002511
 8002134:	08002511 	.word	0x08002511
 8002138:	08002511 	.word	0x08002511
 800213c:	08002341 	.word	0x08002341
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002140:	4bb9      	ldr	r3, [pc, #740]	; (8002428 <HAL_RCC_GetSysClockFreq+0x358>)
 8002142:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002146:	e1e7      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002148:	4bb8      	ldr	r3, [pc, #736]	; (800242c <HAL_RCC_GetSysClockFreq+0x35c>)
 800214a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800214e:	e1e3      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002150:	4bb4      	ldr	r3, [pc, #720]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800215c:	4bb1      	ldr	r3, [pc, #708]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d071      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002168:	4bae      	ldr	r3, [pc, #696]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	099b      	lsrs	r3, r3, #6
 800216e:	2200      	movs	r2, #0
 8002170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002174:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800217c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002180:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002184:	2300      	movs	r3, #0
 8002186:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800218a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800218e:	4622      	mov	r2, r4
 8002190:	462b      	mov	r3, r5
 8002192:	f04f 0000 	mov.w	r0, #0
 8002196:	f04f 0100 	mov.w	r1, #0
 800219a:	0159      	lsls	r1, r3, #5
 800219c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021a0:	0150      	lsls	r0, r2, #5
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4621      	mov	r1, r4
 80021a8:	1a51      	subs	r1, r2, r1
 80021aa:	6439      	str	r1, [r7, #64]	; 0x40
 80021ac:	4629      	mov	r1, r5
 80021ae:	eb63 0301 	sbc.w	r3, r3, r1
 80021b2:	647b      	str	r3, [r7, #68]	; 0x44
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80021c0:	4649      	mov	r1, r9
 80021c2:	018b      	lsls	r3, r1, #6
 80021c4:	4641      	mov	r1, r8
 80021c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ca:	4641      	mov	r1, r8
 80021cc:	018a      	lsls	r2, r1, #6
 80021ce:	4641      	mov	r1, r8
 80021d0:	1a51      	subs	r1, r2, r1
 80021d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80021d4:	4649      	mov	r1, r9
 80021d6:	eb63 0301 	sbc.w	r3, r3, r1
 80021da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80021e8:	4649      	mov	r1, r9
 80021ea:	00cb      	lsls	r3, r1, #3
 80021ec:	4641      	mov	r1, r8
 80021ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021f2:	4641      	mov	r1, r8
 80021f4:	00ca      	lsls	r2, r1, #3
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	4603      	mov	r3, r0
 80021fc:	4622      	mov	r2, r4
 80021fe:	189b      	adds	r3, r3, r2
 8002200:	633b      	str	r3, [r7, #48]	; 0x30
 8002202:	462b      	mov	r3, r5
 8002204:	460a      	mov	r2, r1
 8002206:	eb42 0303 	adc.w	r3, r2, r3
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002218:	4629      	mov	r1, r5
 800221a:	024b      	lsls	r3, r1, #9
 800221c:	4621      	mov	r1, r4
 800221e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002222:	4621      	mov	r1, r4
 8002224:	024a      	lsls	r2, r1, #9
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800222e:	2200      	movs	r2, #0
 8002230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002234:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002238:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800223c:	f7fe f838 	bl	80002b0 <__aeabi_uldivmod>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4613      	mov	r3, r2
 8002246:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800224a:	e067      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800224c:	4b75      	ldr	r3, [pc, #468]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	099b      	lsrs	r3, r3, #6
 8002252:	2200      	movs	r2, #0
 8002254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002258:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800225c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002264:	67bb      	str	r3, [r7, #120]	; 0x78
 8002266:	2300      	movs	r3, #0
 8002268:	67fb      	str	r3, [r7, #124]	; 0x7c
 800226a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800226e:	4622      	mov	r2, r4
 8002270:	462b      	mov	r3, r5
 8002272:	f04f 0000 	mov.w	r0, #0
 8002276:	f04f 0100 	mov.w	r1, #0
 800227a:	0159      	lsls	r1, r3, #5
 800227c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002280:	0150      	lsls	r0, r2, #5
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4621      	mov	r1, r4
 8002288:	1a51      	subs	r1, r2, r1
 800228a:	62b9      	str	r1, [r7, #40]	; 0x28
 800228c:	4629      	mov	r1, r5
 800228e:	eb63 0301 	sbc.w	r3, r3, r1
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80022a0:	4649      	mov	r1, r9
 80022a2:	018b      	lsls	r3, r1, #6
 80022a4:	4641      	mov	r1, r8
 80022a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022aa:	4641      	mov	r1, r8
 80022ac:	018a      	lsls	r2, r1, #6
 80022ae:	4641      	mov	r1, r8
 80022b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80022b4:	4649      	mov	r1, r9
 80022b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022ce:	4692      	mov	sl, r2
 80022d0:	469b      	mov	fp, r3
 80022d2:	4623      	mov	r3, r4
 80022d4:	eb1a 0303 	adds.w	r3, sl, r3
 80022d8:	623b      	str	r3, [r7, #32]
 80022da:	462b      	mov	r3, r5
 80022dc:	eb4b 0303 	adc.w	r3, fp, r3
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80022ee:	4629      	mov	r1, r5
 80022f0:	028b      	lsls	r3, r1, #10
 80022f2:	4621      	mov	r1, r4
 80022f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022f8:	4621      	mov	r1, r4
 80022fa:	028a      	lsls	r2, r1, #10
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002304:	2200      	movs	r2, #0
 8002306:	673b      	str	r3, [r7, #112]	; 0x70
 8002308:	677a      	str	r2, [r7, #116]	; 0x74
 800230a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800230e:	f7fd ffcf 	bl	80002b0 <__aeabi_uldivmod>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4613      	mov	r3, r2
 8002318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800231c:	4b41      	ldr	r3, [pc, #260]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	0c1b      	lsrs	r3, r3, #16
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	3301      	adds	r3, #1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800232e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002332:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002336:	fbb2 f3f3 	udiv	r3, r2, r3
 800233a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800233e:	e0eb      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002340:	4b38      	ldr	r3, [pc, #224]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002348:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234c:	4b35      	ldr	r3, [pc, #212]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d06b      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002358:	4b32      	ldr	r3, [pc, #200]	; (8002424 <HAL_RCC_GetSysClockFreq+0x354>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	099b      	lsrs	r3, r3, #6
 800235e:	2200      	movs	r2, #0
 8002360:	66bb      	str	r3, [r7, #104]	; 0x68
 8002362:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236a:	663b      	str	r3, [r7, #96]	; 0x60
 800236c:	2300      	movs	r3, #0
 800236e:	667b      	str	r3, [r7, #100]	; 0x64
 8002370:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002374:	4622      	mov	r2, r4
 8002376:	462b      	mov	r3, r5
 8002378:	f04f 0000 	mov.w	r0, #0
 800237c:	f04f 0100 	mov.w	r1, #0
 8002380:	0159      	lsls	r1, r3, #5
 8002382:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002386:	0150      	lsls	r0, r2, #5
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4621      	mov	r1, r4
 800238e:	1a51      	subs	r1, r2, r1
 8002390:	61b9      	str	r1, [r7, #24]
 8002392:	4629      	mov	r1, r5
 8002394:	eb63 0301 	sbc.w	r3, r3, r1
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80023a6:	4659      	mov	r1, fp
 80023a8:	018b      	lsls	r3, r1, #6
 80023aa:	4651      	mov	r1, sl
 80023ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023b0:	4651      	mov	r1, sl
 80023b2:	018a      	lsls	r2, r1, #6
 80023b4:	4651      	mov	r1, sl
 80023b6:	ebb2 0801 	subs.w	r8, r2, r1
 80023ba:	4659      	mov	r1, fp
 80023bc:	eb63 0901 	sbc.w	r9, r3, r1
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023d4:	4690      	mov	r8, r2
 80023d6:	4699      	mov	r9, r3
 80023d8:	4623      	mov	r3, r4
 80023da:	eb18 0303 	adds.w	r3, r8, r3
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	462b      	mov	r3, r5
 80023e2:	eb49 0303 	adc.w	r3, r9, r3
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80023f4:	4629      	mov	r1, r5
 80023f6:	024b      	lsls	r3, r1, #9
 80023f8:	4621      	mov	r1, r4
 80023fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023fe:	4621      	mov	r1, r4
 8002400:	024a      	lsls	r2, r1, #9
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800240a:	2200      	movs	r2, #0
 800240c:	65bb      	str	r3, [r7, #88]	; 0x58
 800240e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002410:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002414:	f7fd ff4c 	bl	80002b0 <__aeabi_uldivmod>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4613      	mov	r3, r2
 800241e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002422:	e065      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x420>
 8002424:	40023800 	.word	0x40023800
 8002428:	00f42400 	.word	0x00f42400
 800242c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002430:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <HAL_RCC_GetSysClockFreq+0x458>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	099b      	lsrs	r3, r3, #6
 8002436:	2200      	movs	r2, #0
 8002438:	4618      	mov	r0, r3
 800243a:	4611      	mov	r1, r2
 800243c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002440:	653b      	str	r3, [r7, #80]	; 0x50
 8002442:	2300      	movs	r3, #0
 8002444:	657b      	str	r3, [r7, #84]	; 0x54
 8002446:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800244a:	4642      	mov	r2, r8
 800244c:	464b      	mov	r3, r9
 800244e:	f04f 0000 	mov.w	r0, #0
 8002452:	f04f 0100 	mov.w	r1, #0
 8002456:	0159      	lsls	r1, r3, #5
 8002458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800245c:	0150      	lsls	r0, r2, #5
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4641      	mov	r1, r8
 8002464:	1a51      	subs	r1, r2, r1
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	4649      	mov	r1, r9
 800246a:	eb63 0301 	sbc.w	r3, r3, r1
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800247c:	4659      	mov	r1, fp
 800247e:	018b      	lsls	r3, r1, #6
 8002480:	4651      	mov	r1, sl
 8002482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002486:	4651      	mov	r1, sl
 8002488:	018a      	lsls	r2, r1, #6
 800248a:	4651      	mov	r1, sl
 800248c:	1a54      	subs	r4, r2, r1
 800248e:	4659      	mov	r1, fp
 8002490:	eb63 0501 	sbc.w	r5, r3, r1
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	00eb      	lsls	r3, r5, #3
 800249e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024a2:	00e2      	lsls	r2, r4, #3
 80024a4:	4614      	mov	r4, r2
 80024a6:	461d      	mov	r5, r3
 80024a8:	4643      	mov	r3, r8
 80024aa:	18e3      	adds	r3, r4, r3
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	464b      	mov	r3, r9
 80024b0:	eb45 0303 	adc.w	r3, r5, r3
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024c2:	4629      	mov	r1, r5
 80024c4:	028b      	lsls	r3, r1, #10
 80024c6:	4621      	mov	r1, r4
 80024c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024cc:	4621      	mov	r1, r4
 80024ce:	028a      	lsls	r2, r1, #10
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024d8:	2200      	movs	r2, #0
 80024da:	64bb      	str	r3, [r7, #72]	; 0x48
 80024dc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80024de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024e2:	f7fd fee5 	bl	80002b0 <__aeabi_uldivmod>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4613      	mov	r3, r2
 80024ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_RCC_GetSysClockFreq+0x458>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	0f1b      	lsrs	r3, r3, #28
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80024fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002502:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800250e:	e003      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002516:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002518:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800251c:	4618      	mov	r0, r3
 800251e:	37b8      	adds	r7, #184	; 0xb8
 8002520:	46bd      	mov	sp, r7
 8002522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800
 800252c:	00f42400 	.word	0x00f42400

08002530 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e28d      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8083 	beq.w	8002656 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002550:	4b94      	ldr	r3, [pc, #592]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	2b04      	cmp	r3, #4
 800255a:	d019      	beq.n	8002590 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800255c:	4b91      	ldr	r3, [pc, #580]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002564:	2b08      	cmp	r3, #8
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002568:	4b8e      	ldr	r3, [pc, #568]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002574:	d00c      	beq.n	8002590 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002576:	4b8b      	ldr	r3, [pc, #556]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800257e:	2b0c      	cmp	r3, #12
 8002580:	d112      	bne.n	80025a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002582:	4b88      	ldr	r3, [pc, #544]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800258e:	d10b      	bne.n	80025a8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	4b84      	ldr	r3, [pc, #528]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d05b      	beq.n	8002654 <HAL_RCC_OscConfig+0x124>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d157      	bne.n	8002654 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e25a      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x90>
 80025b2:	4b7c      	ldr	r3, [pc, #496]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a7b      	ldr	r2, [pc, #492]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e01d      	b.n	80025fc <HAL_RCC_OscConfig+0xcc>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0xb4>
 80025ca:	4b76      	ldr	r3, [pc, #472]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a75      	ldr	r2, [pc, #468]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b73      	ldr	r3, [pc, #460]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a72      	ldr	r2, [pc, #456]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0xcc>
 80025e4:	4b6f      	ldr	r3, [pc, #444]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a6e      	ldr	r2, [pc, #440]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b6c      	ldr	r3, [pc, #432]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a6b      	ldr	r2, [pc, #428]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80025f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe fce2 	bl	8000fcc <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260c:	f7fe fcde 	bl	8000fcc <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e21f      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	4b61      	ldr	r3, [pc, #388]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0xdc>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe fcce 	bl	8000fcc <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002634:	f7fe fcca 	bl	8000fcc <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	; 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e20b      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002646:	4b57      	ldr	r3, [pc, #348]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x104>
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d06f      	beq.n	8002742 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002662:	4b50      	ldr	r3, [pc, #320]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b00      	cmp	r3, #0
 800266c:	d017      	beq.n	800269e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800266e:	4b4d      	ldr	r3, [pc, #308]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002676:	2b08      	cmp	r3, #8
 8002678:	d105      	bne.n	8002686 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800267a:	4b4a      	ldr	r3, [pc, #296]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002686:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d11c      	bne.n	80026cc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002692:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d116      	bne.n	80026cc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <HAL_RCC_OscConfig+0x186>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e1d3      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4937      	ldr	r1, [pc, #220]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	e03a      	b.n	8002742 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d4:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7fe fc77 	bl	8000fcc <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e2:	f7fe fc73 	bl	8000fcc <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e1b4      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4925      	ldr	r1, [pc, #148]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]
 8002714:	e015      	b.n	8002742 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fc56 	bl	8000fcc <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002724:	f7fe fc52 	bl	8000fcc <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e193      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d036      	beq.n	80027bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_RCC_OscConfig+0x27c>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe fc36 	bl	8000fcc <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002764:	f7fe fc32 	bl	8000fcc <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e173      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x234>
 8002782:	e01b      	b.n	80027bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_RCC_OscConfig+0x27c>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278a:	f7fe fc1f 	bl	8000fcc <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002790:	e00e      	b.n	80027b0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002792:	f7fe fc1b 	bl	8000fcc <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d907      	bls.n	80027b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e15c      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
 80027a4:	40023800 	.word	0x40023800
 80027a8:	42470000 	.word	0x42470000
 80027ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b0:	4b8a      	ldr	r3, [pc, #552]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80027b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ea      	bne.n	8002792 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 8097 	beq.w	80028f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ce:	4b83      	ldr	r3, [pc, #524]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10f      	bne.n	80027fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	4b7f      	ldr	r3, [pc, #508]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a7e      	ldr	r2, [pc, #504]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ea:	4b7c      	ldr	r3, [pc, #496]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f6:	2301      	movs	r3, #1
 80027f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fa:	4b79      	ldr	r3, [pc, #484]	; (80029e0 <HAL_RCC_OscConfig+0x4b0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d118      	bne.n	8002838 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002806:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x4b0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a75      	ldr	r2, [pc, #468]	; (80029e0 <HAL_RCC_OscConfig+0x4b0>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002812:	f7fe fbdb 	bl	8000fcc <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281a:	f7fe fbd7 	bl	8000fcc <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e118      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282c:	4b6c      	ldr	r3, [pc, #432]	; (80029e0 <HAL_RCC_OscConfig+0x4b0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x31e>
 8002840:	4b66      	ldr	r3, [pc, #408]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	4a65      	ldr	r2, [pc, #404]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6713      	str	r3, [r2, #112]	; 0x70
 800284c:	e01c      	b.n	8002888 <HAL_RCC_OscConfig+0x358>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b05      	cmp	r3, #5
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x340>
 8002856:	4b61      	ldr	r3, [pc, #388]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	4a60      	ldr	r2, [pc, #384]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	6713      	str	r3, [r2, #112]	; 0x70
 8002862:	4b5e      	ldr	r3, [pc, #376]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002866:	4a5d      	ldr	r2, [pc, #372]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6713      	str	r3, [r2, #112]	; 0x70
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0x358>
 8002870:	4b5a      	ldr	r3, [pc, #360]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	4a59      	ldr	r2, [pc, #356]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002876:	f023 0301 	bic.w	r3, r3, #1
 800287a:	6713      	str	r3, [r2, #112]	; 0x70
 800287c:	4b57      	ldr	r3, [pc, #348]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	4a56      	ldr	r2, [pc, #344]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002882:	f023 0304 	bic.w	r3, r3, #4
 8002886:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d015      	beq.n	80028bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002890:	f7fe fb9c 	bl	8000fcc <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	e00a      	b.n	80028ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002898:	f7fe fb98 	bl	8000fcc <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0d7      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ae:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0ee      	beq.n	8002898 <HAL_RCC_OscConfig+0x368>
 80028ba:	e014      	b.n	80028e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe fb86 	bl	8000fcc <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe fb82 	bl	8000fcc <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0c1      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028da:	4b40      	ldr	r3, [pc, #256]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1ee      	bne.n	80028c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ec:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	4a3a      	ldr	r2, [pc, #232]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80028f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80ad 	beq.w	8002a5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002902:	4b36      	ldr	r3, [pc, #216]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b08      	cmp	r3, #8
 800290c:	d060      	beq.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d145      	bne.n	80029a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002916:	4b33      	ldr	r3, [pc, #204]	; (80029e4 <HAL_RCC_OscConfig+0x4b4>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe fb56 	bl	8000fcc <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002924:	f7fe fb52 	bl	8000fcc <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e093      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002936:	4b29      	ldr	r3, [pc, #164]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	019b      	lsls	r3, r3, #6
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	085b      	lsrs	r3, r3, #1
 800295a:	3b01      	subs	r3, #1
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	061b      	lsls	r3, r3, #24
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	071b      	lsls	r3, r3, #28
 800296e:	491b      	ldr	r1, [pc, #108]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002974:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_RCC_OscConfig+0x4b4>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7fe fb27 	bl	8000fcc <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002982:	f7fe fb23 	bl	8000fcc <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e064      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002994:	4b11      	ldr	r3, [pc, #68]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x452>
 80029a0:	e05c      	b.n	8002a5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <HAL_RCC_OscConfig+0x4b4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fb10 	bl	8000fcc <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe fb0c 	bl	8000fcc <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e04d      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x480>
 80029ce:	e045      	b.n	8002a5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d107      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e040      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40007000 	.word	0x40007000
 80029e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029e8:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <HAL_RCC_OscConfig+0x538>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d030      	beq.n	8002a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d129      	bne.n	8002a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d122      	bne.n	8002a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a18:	4013      	ands	r3, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d119      	bne.n	8002a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2e:	085b      	lsrs	r3, r3, #1
 8002a30:	3b01      	subs	r3, #1
 8002a32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d10f      	bne.n	8002a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800

08002a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e03f      	b.n	8002afe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fd ff42 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2224      	movs	r2, #36	; 0x24
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f829 	bl	8002b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b0c:	b0c0      	sub	sp, #256	; 0x100
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b24:	68d9      	ldr	r1, [r3, #12]
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	ea40 0301 	orr.w	r3, r0, r1
 8002b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b60:	f021 010c 	bic.w	r1, r1, #12
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b82:	6999      	ldr	r1, [r3, #24]
 8002b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	ea40 0301 	orr.w	r3, r0, r1
 8002b8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b8f      	ldr	r3, [pc, #572]	; (8002dd4 <UART_SetConfig+0x2cc>)
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d005      	beq.n	8002ba8 <UART_SetConfig+0xa0>
 8002b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4b8d      	ldr	r3, [pc, #564]	; (8002dd8 <UART_SetConfig+0x2d0>)
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d104      	bne.n	8002bb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ba8:	f7fe ff54 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 8002bac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bb0:	e003      	b.n	8002bba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bb2:	f7fe ff3b 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8002bb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc4:	f040 810c 	bne.w	8002de0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bda:	4622      	mov	r2, r4
 8002bdc:	462b      	mov	r3, r5
 8002bde:	1891      	adds	r1, r2, r2
 8002be0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002be2:	415b      	adcs	r3, r3
 8002be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002be6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bea:	4621      	mov	r1, r4
 8002bec:	eb12 0801 	adds.w	r8, r2, r1
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	eb43 0901 	adc.w	r9, r3, r1
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c0a:	4690      	mov	r8, r2
 8002c0c:	4699      	mov	r9, r3
 8002c0e:	4623      	mov	r3, r4
 8002c10:	eb18 0303 	adds.w	r3, r8, r3
 8002c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c18:	462b      	mov	r3, r5
 8002c1a:	eb49 0303 	adc.w	r3, r9, r3
 8002c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c36:	460b      	mov	r3, r1
 8002c38:	18db      	adds	r3, r3, r3
 8002c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	eb42 0303 	adc.w	r3, r2, r3
 8002c42:	657b      	str	r3, [r7, #84]	; 0x54
 8002c44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c4c:	f7fd fb30 	bl	80002b0 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002c56:	fba3 2302 	umull	r2, r3, r3, r2
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	011c      	lsls	r4, r3, #4
 8002c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c62:	2200      	movs	r2, #0
 8002c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c70:	4642      	mov	r2, r8
 8002c72:	464b      	mov	r3, r9
 8002c74:	1891      	adds	r1, r2, r2
 8002c76:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c78:	415b      	adcs	r3, r3
 8002c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c80:	4641      	mov	r1, r8
 8002c82:	eb12 0a01 	adds.w	sl, r2, r1
 8002c86:	4649      	mov	r1, r9
 8002c88:	eb43 0b01 	adc.w	fp, r3, r1
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ca0:	4692      	mov	sl, r2
 8002ca2:	469b      	mov	fp, r3
 8002ca4:	4643      	mov	r3, r8
 8002ca6:	eb1a 0303 	adds.w	r3, sl, r3
 8002caa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cae:	464b      	mov	r3, r9
 8002cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8002cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	18db      	adds	r3, r3, r3
 8002cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	eb42 0303 	adc.w	r3, r2, r3
 8002cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ce2:	f7fd fae5 	bl	80002b0 <__aeabi_uldivmod>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4611      	mov	r1, r2
 8002cec:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002cee:	fba3 2301 	umull	r2, r3, r3, r1
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2264      	movs	r2, #100	; 0x64
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	1acb      	subs	r3, r1, r3
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d02:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002d04:	fba3 2302 	umull	r2, r3, r3, r2
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d10:	441c      	add	r4, r3
 8002d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d16:	2200      	movs	r2, #0
 8002d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d24:	4642      	mov	r2, r8
 8002d26:	464b      	mov	r3, r9
 8002d28:	1891      	adds	r1, r2, r2
 8002d2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d2c:	415b      	adcs	r3, r3
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d34:	4641      	mov	r1, r8
 8002d36:	1851      	adds	r1, r2, r1
 8002d38:	6339      	str	r1, [r7, #48]	; 0x30
 8002d3a:	4649      	mov	r1, r9
 8002d3c:	414b      	adcs	r3, r1
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d4c:	4659      	mov	r1, fp
 8002d4e:	00cb      	lsls	r3, r1, #3
 8002d50:	4651      	mov	r1, sl
 8002d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d56:	4651      	mov	r1, sl
 8002d58:	00ca      	lsls	r2, r1, #3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4642      	mov	r2, r8
 8002d62:	189b      	adds	r3, r3, r2
 8002d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d68:	464b      	mov	r3, r9
 8002d6a:	460a      	mov	r2, r1
 8002d6c:	eb42 0303 	adc.w	r3, r2, r3
 8002d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d88:	460b      	mov	r3, r1
 8002d8a:	18db      	adds	r3, r3, r3
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8e:	4613      	mov	r3, r2
 8002d90:	eb42 0303 	adc.w	r3, r2, r3
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d9e:	f7fd fa87 	bl	80002b0 <__aeabi_uldivmod>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002da8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	2164      	movs	r1, #100	; 0x64
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	3332      	adds	r3, #50	; 0x32
 8002dba:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	f003 0207 	and.w	r2, r3, #7
 8002dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4422      	add	r2, r4
 8002dce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dd0:	e105      	b.n	8002fde <UART_SetConfig+0x4d6>
 8002dd2:	bf00      	nop
 8002dd4:	40011000 	.word	0x40011000
 8002dd8:	40011400 	.word	0x40011400
 8002ddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002df2:	4642      	mov	r2, r8
 8002df4:	464b      	mov	r3, r9
 8002df6:	1891      	adds	r1, r2, r2
 8002df8:	6239      	str	r1, [r7, #32]
 8002dfa:	415b      	adcs	r3, r3
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e02:	4641      	mov	r1, r8
 8002e04:	1854      	adds	r4, r2, r1
 8002e06:	4649      	mov	r1, r9
 8002e08:	eb43 0501 	adc.w	r5, r3, r1
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	00eb      	lsls	r3, r5, #3
 8002e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1a:	00e2      	lsls	r2, r4, #3
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	461d      	mov	r5, r3
 8002e20:	4643      	mov	r3, r8
 8002e22:	18e3      	adds	r3, r4, r3
 8002e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e28:	464b      	mov	r3, r9
 8002e2a:	eb45 0303 	adc.w	r3, r5, r3
 8002e2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e4e:	4629      	mov	r1, r5
 8002e50:	008b      	lsls	r3, r1, #2
 8002e52:	4621      	mov	r1, r4
 8002e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e58:	4621      	mov	r1, r4
 8002e5a:	008a      	lsls	r2, r1, #2
 8002e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e60:	f7fd fa26 	bl	80002b0 <__aeabi_uldivmod>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4b60      	ldr	r3, [pc, #384]	; (8002fec <UART_SetConfig+0x4e4>)
 8002e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	011c      	lsls	r4, r3, #4
 8002e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e84:	4642      	mov	r2, r8
 8002e86:	464b      	mov	r3, r9
 8002e88:	1891      	adds	r1, r2, r2
 8002e8a:	61b9      	str	r1, [r7, #24]
 8002e8c:	415b      	adcs	r3, r3
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e94:	4641      	mov	r1, r8
 8002e96:	1851      	adds	r1, r2, r1
 8002e98:	6139      	str	r1, [r7, #16]
 8002e9a:	4649      	mov	r1, r9
 8002e9c:	414b      	adcs	r3, r1
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eac:	4659      	mov	r1, fp
 8002eae:	00cb      	lsls	r3, r1, #3
 8002eb0:	4651      	mov	r1, sl
 8002eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eb6:	4651      	mov	r1, sl
 8002eb8:	00ca      	lsls	r2, r1, #3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ec8:	464b      	mov	r3, r9
 8002eca:	460a      	mov	r2, r1
 8002ecc:	eb42 0303 	adc.w	r3, r2, r3
 8002ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ede:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002eec:	4649      	mov	r1, r9
 8002eee:	008b      	lsls	r3, r1, #2
 8002ef0:	4641      	mov	r1, r8
 8002ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ef6:	4641      	mov	r1, r8
 8002ef8:	008a      	lsls	r2, r1, #2
 8002efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002efe:	f7fd f9d7 	bl	80002b0 <__aeabi_uldivmod>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4b39      	ldr	r3, [pc, #228]	; (8002fec <UART_SetConfig+0x4e4>)
 8002f08:	fba3 1302 	umull	r1, r3, r3, r2
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	2164      	movs	r1, #100	; 0x64
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	3332      	adds	r3, #50	; 0x32
 8002f1a:	4a34      	ldr	r2, [pc, #208]	; (8002fec <UART_SetConfig+0x4e4>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f26:	441c      	add	r4, r3
 8002f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	673b      	str	r3, [r7, #112]	; 0x70
 8002f30:	677a      	str	r2, [r7, #116]	; 0x74
 8002f32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f36:	4642      	mov	r2, r8
 8002f38:	464b      	mov	r3, r9
 8002f3a:	1891      	adds	r1, r2, r2
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	415b      	adcs	r3, r3
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f46:	4641      	mov	r1, r8
 8002f48:	1851      	adds	r1, r2, r1
 8002f4a:	6039      	str	r1, [r7, #0]
 8002f4c:	4649      	mov	r1, r9
 8002f4e:	414b      	adcs	r3, r1
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f5e:	4659      	mov	r1, fp
 8002f60:	00cb      	lsls	r3, r1, #3
 8002f62:	4651      	mov	r1, sl
 8002f64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f68:	4651      	mov	r1, sl
 8002f6a:	00ca      	lsls	r2, r1, #3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4603      	mov	r3, r0
 8002f72:	4642      	mov	r2, r8
 8002f74:	189b      	adds	r3, r3, r2
 8002f76:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f78:	464b      	mov	r3, r9
 8002f7a:	460a      	mov	r2, r1
 8002f7c:	eb42 0303 	adc.w	r3, r2, r3
 8002f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f8c:	667a      	str	r2, [r7, #100]	; 0x64
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	008b      	lsls	r3, r1, #2
 8002f9e:	4641      	mov	r1, r8
 8002fa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fa4:	4641      	mov	r1, r8
 8002fa6:	008a      	lsls	r2, r1, #2
 8002fa8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fac:	f7fd f980 	bl	80002b0 <__aeabi_uldivmod>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <UART_SetConfig+0x4e4>)
 8002fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	2164      	movs	r1, #100	; 0x64
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	3332      	adds	r3, #50	; 0x32
 8002fc8:	4a08      	ldr	r2, [pc, #32]	; (8002fec <UART_SetConfig+0x4e4>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	f003 020f 	and.w	r2, r3, #15
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4422      	add	r2, r4
 8002fdc:	609a      	str	r2, [r3, #8]
}
 8002fde:	bf00      	nop
 8002fe0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fea:	bf00      	nop
 8002fec:	51eb851f 	.word	0x51eb851f

08002ff0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	f107 001c 	add.w	r0, r7, #28
 8002ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	2b01      	cmp	r3, #1
 8003006:	d122      	bne.n	800304e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800301c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003032:	2b01      	cmp	r3, #1
 8003034:	d105      	bne.n	8003042 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fa9c 	bl	8003580 <USB_CoreReset>
 8003048:	4603      	mov	r3, r0
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	e01a      	b.n	8003084 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fa90 	bl	8003580 <USB_CoreReset>
 8003060:	4603      	mov	r3, r0
 8003062:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	639a      	str	r2, [r3, #56]	; 0x38
 8003076:	e005      	b.n	8003084 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	2b01      	cmp	r3, #1
 8003088:	d10b      	bne.n	80030a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f043 0206 	orr.w	r2, r3, #6
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f043 0220 	orr.w	r2, r3, #32
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030ae:	b004      	add	sp, #16
 80030b0:	4770      	bx	lr

080030b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f023 0201 	bic.w	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d115      	bne.n	8003122 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003102:	2001      	movs	r0, #1
 8003104:	f7fd ff6e 	bl	8000fe4 <HAL_Delay>
      ms++;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3301      	adds	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fa28 	bl	8003564 <USB_GetMode>
 8003114:	4603      	mov	r3, r0
 8003116:	2b01      	cmp	r3, #1
 8003118:	d01e      	beq.n	8003158 <USB_SetCurrentMode+0x84>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b31      	cmp	r3, #49	; 0x31
 800311e:	d9f0      	bls.n	8003102 <USB_SetCurrentMode+0x2e>
 8003120:	e01a      	b.n	8003158 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d115      	bne.n	8003154 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003134:	2001      	movs	r0, #1
 8003136:	f7fd ff55 	bl	8000fe4 <HAL_Delay>
      ms++;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3301      	adds	r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fa0f 	bl	8003564 <USB_GetMode>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <USB_SetCurrentMode+0x84>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b31      	cmp	r3, #49	; 0x31
 8003150:	d9f0      	bls.n	8003134 <USB_SetCurrentMode+0x60>
 8003152:	e001      	b.n	8003158 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e005      	b.n	8003164 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b32      	cmp	r3, #50	; 0x32
 800315c:	d101      	bne.n	8003162 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800316c:	b084      	sub	sp, #16
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800317a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	e009      	b.n	80031a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	3340      	adds	r3, #64	; 0x40
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	2200      	movs	r2, #0
 8003198:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	3301      	adds	r3, #1
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	2b0e      	cmp	r3, #14
 80031a4:	d9f2      	bls.n	800318c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80031a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d11c      	bne.n	80031e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031ba:	f043 0302 	orr.w	r3, r3, #2
 80031be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e005      	b.n	80031f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80031f8:	461a      	mov	r2, r3
 80031fa:	2300      	movs	r3, #0
 80031fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003204:	4619      	mov	r1, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320c:	461a      	mov	r2, r3
 800320e:	680b      	ldr	r3, [r1, #0]
 8003210:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003214:	2b01      	cmp	r3, #1
 8003216:	d10c      	bne.n	8003232 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d104      	bne.n	8003228 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800321e:	2100      	movs	r1, #0
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f965 	bl	80034f0 <USB_SetDevSpeed>
 8003226:	e008      	b.n	800323a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003228:	2101      	movs	r1, #1
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f960 	bl	80034f0 <USB_SetDevSpeed>
 8003230:	e003      	b.n	800323a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003232:	2103      	movs	r1, #3
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f95b 	bl	80034f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800323a:	2110      	movs	r1, #16
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f8f3 	bl	8003428 <USB_FlushTxFifo>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f91f 	bl	8003490 <USB_FlushRxFifo>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003262:	461a      	mov	r2, r3
 8003264:	2300      	movs	r3, #0
 8003266:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800326e:	461a      	mov	r2, r3
 8003270:	2300      	movs	r3, #0
 8003272:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327a:	461a      	mov	r2, r3
 800327c:	2300      	movs	r3, #0
 800327e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	e043      	b.n	800330e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4413      	add	r3, r2
 800328e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800329c:	d118      	bne.n	80032d0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b0:	461a      	mov	r2, r3
 80032b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	e013      	b.n	80032e2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c6:	461a      	mov	r2, r3
 80032c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e008      	b.n	80032e2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032dc:	461a      	mov	r2, r3
 80032de:	2300      	movs	r3, #0
 80032e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ee:	461a      	mov	r2, r3
 80032f0:	2300      	movs	r3, #0
 80032f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003300:	461a      	mov	r2, r3
 8003302:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003306:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	3301      	adds	r3, #1
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	429a      	cmp	r2, r3
 8003314:	d3b7      	bcc.n	8003286 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	e043      	b.n	80033a4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800332e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003332:	d118      	bne.n	8003366 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003346:	461a      	mov	r2, r3
 8003348:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e013      	b.n	8003378 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335c:	461a      	mov	r2, r3
 800335e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	e008      	b.n	8003378 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4413      	add	r3, r2
 800336e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003372:	461a      	mov	r2, r3
 8003374:	2300      	movs	r3, #0
 8003376:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003384:	461a      	mov	r2, r3
 8003386:	2300      	movs	r3, #0
 8003388:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003396:	461a      	mov	r2, r3
 8003398:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800339c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	3301      	adds	r3, #1
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d3b7      	bcc.n	800331c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80033cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f043 0210 	orr.w	r2, r3, #16
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699a      	ldr	r2, [r3, #24]
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <USB_DevInit+0x2b8>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f043 0208 	orr.w	r2, r3, #8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80033fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d107      	bne.n	8003414 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800340c:	f043 0304 	orr.w	r3, r3, #4
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003414:	7dfb      	ldrb	r3, [r7, #23]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003420:	b004      	add	sp, #16
 8003422:	4770      	bx	lr
 8003424:	803c3800 	.word	0x803c3800

08003428 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3301      	adds	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4a13      	ldr	r2, [pc, #76]	; (800348c <USB_FlushTxFifo+0x64>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e01b      	b.n	8003480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	daf2      	bge.n	8003436 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	019b      	lsls	r3, r3, #6
 8003458:	f043 0220 	orr.w	r2, r3, #32
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3301      	adds	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4a08      	ldr	r2, [pc, #32]	; (800348c <USB_FlushTxFifo+0x64>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e006      	b.n	8003480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b20      	cmp	r3, #32
 800347c:	d0f0      	beq.n	8003460 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	00030d40 	.word	0x00030d40

08003490 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3301      	adds	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4a11      	ldr	r2, [pc, #68]	; (80034ec <USB_FlushRxFifo+0x5c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e018      	b.n	80034e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	daf2      	bge.n	800349c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2210      	movs	r2, #16
 80034be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3301      	adds	r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4a08      	ldr	r2, [pc, #32]	; (80034ec <USB_FlushRxFifo+0x5c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e006      	b.n	80034e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b10      	cmp	r3, #16
 80034dc:	d0f0      	beq.n	80034c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	00030d40 	.word	0x00030d40

080034f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800353c:	f023 0303 	bic.w	r3, r3, #3
 8003540:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003550:	f043 0302 	orr.w	r3, r3, #2
 8003554:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f003 0301 	and.w	r3, r3, #1
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3301      	adds	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4a13      	ldr	r2, [pc, #76]	; (80035e4 <USB_CoreReset+0x64>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d901      	bls.n	800359e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e01b      	b.n	80035d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	daf2      	bge.n	800358c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3301      	adds	r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <USB_CoreReset+0x64>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e006      	b.n	80035d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d0f0      	beq.n	80035b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	00030d40 	.word	0x00030d40

080035e8 <__assert_func>:
 80035e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80035ea:	4614      	mov	r4, r2
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b09      	ldr	r3, [pc, #36]	; (8003614 <__assert_func+0x2c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4605      	mov	r5, r0
 80035f4:	68d8      	ldr	r0, [r3, #12]
 80035f6:	b14c      	cbz	r4, 800360c <__assert_func+0x24>
 80035f8:	4b07      	ldr	r3, [pc, #28]	; (8003618 <__assert_func+0x30>)
 80035fa:	9100      	str	r1, [sp, #0]
 80035fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003600:	4906      	ldr	r1, [pc, #24]	; (800361c <__assert_func+0x34>)
 8003602:	462b      	mov	r3, r5
 8003604:	f000 f814 	bl	8003630 <fiprintf>
 8003608:	f000 fbfe 	bl	8003e08 <abort>
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <__assert_func+0x38>)
 800360e:	461c      	mov	r4, r3
 8003610:	e7f3      	b.n	80035fa <__assert_func+0x12>
 8003612:	bf00      	nop
 8003614:	20000014 	.word	0x20000014
 8003618:	080046a6 	.word	0x080046a6
 800361c:	080046b3 	.word	0x080046b3
 8003620:	080046e1 	.word	0x080046e1

08003624 <__errno>:
 8003624:	4b01      	ldr	r3, [pc, #4]	; (800362c <__errno+0x8>)
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000014 	.word	0x20000014

08003630 <fiprintf>:
 8003630:	b40e      	push	{r1, r2, r3}
 8003632:	b503      	push	{r0, r1, lr}
 8003634:	4601      	mov	r1, r0
 8003636:	ab03      	add	r3, sp, #12
 8003638:	4805      	ldr	r0, [pc, #20]	; (8003650 <fiprintf+0x20>)
 800363a:	f853 2b04 	ldr.w	r2, [r3], #4
 800363e:	6800      	ldr	r0, [r0, #0]
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	f000 f85d 	bl	8003700 <_vfiprintf_r>
 8003646:	b002      	add	sp, #8
 8003648:	f85d eb04 	ldr.w	lr, [sp], #4
 800364c:	b003      	add	sp, #12
 800364e:	4770      	bx	lr
 8003650:	20000014 	.word	0x20000014

08003654 <__libc_init_array>:
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	4d0d      	ldr	r5, [pc, #52]	; (800368c <__libc_init_array+0x38>)
 8003658:	4c0d      	ldr	r4, [pc, #52]	; (8003690 <__libc_init_array+0x3c>)
 800365a:	1b64      	subs	r4, r4, r5
 800365c:	10a4      	asrs	r4, r4, #2
 800365e:	2600      	movs	r6, #0
 8003660:	42a6      	cmp	r6, r4
 8003662:	d109      	bne.n	8003678 <__libc_init_array+0x24>
 8003664:	4d0b      	ldr	r5, [pc, #44]	; (8003694 <__libc_init_array+0x40>)
 8003666:	4c0c      	ldr	r4, [pc, #48]	; (8003698 <__libc_init_array+0x44>)
 8003668:	f000 ffe2 	bl	8004630 <_init>
 800366c:	1b64      	subs	r4, r4, r5
 800366e:	10a4      	asrs	r4, r4, #2
 8003670:	2600      	movs	r6, #0
 8003672:	42a6      	cmp	r6, r4
 8003674:	d105      	bne.n	8003682 <__libc_init_array+0x2e>
 8003676:	bd70      	pop	{r4, r5, r6, pc}
 8003678:	f855 3b04 	ldr.w	r3, [r5], #4
 800367c:	4798      	blx	r3
 800367e:	3601      	adds	r6, #1
 8003680:	e7ee      	b.n	8003660 <__libc_init_array+0xc>
 8003682:	f855 3b04 	ldr.w	r3, [r5], #4
 8003686:	4798      	blx	r3
 8003688:	3601      	adds	r6, #1
 800368a:	e7f2      	b.n	8003672 <__libc_init_array+0x1e>
 800368c:	08004784 	.word	0x08004784
 8003690:	08004784 	.word	0x08004784
 8003694:	08004784 	.word	0x08004784
 8003698:	08004788 	.word	0x08004788

0800369c <memset>:
 800369c:	4402      	add	r2, r0
 800369e:	4603      	mov	r3, r0
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d100      	bne.n	80036a6 <memset+0xa>
 80036a4:	4770      	bx	lr
 80036a6:	f803 1b01 	strb.w	r1, [r3], #1
 80036aa:	e7f9      	b.n	80036a0 <memset+0x4>

080036ac <__sfputc_r>:
 80036ac:	6893      	ldr	r3, [r2, #8]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	b410      	push	{r4}
 80036b4:	6093      	str	r3, [r2, #8]
 80036b6:	da08      	bge.n	80036ca <__sfputc_r+0x1e>
 80036b8:	6994      	ldr	r4, [r2, #24]
 80036ba:	42a3      	cmp	r3, r4
 80036bc:	db01      	blt.n	80036c2 <__sfputc_r+0x16>
 80036be:	290a      	cmp	r1, #10
 80036c0:	d103      	bne.n	80036ca <__sfputc_r+0x1e>
 80036c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036c6:	f000 badf 	b.w	8003c88 <__swbuf_r>
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	1c58      	adds	r0, r3, #1
 80036ce:	6010      	str	r0, [r2, #0]
 80036d0:	7019      	strb	r1, [r3, #0]
 80036d2:	4608      	mov	r0, r1
 80036d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036d8:	4770      	bx	lr

080036da <__sfputs_r>:
 80036da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036dc:	4606      	mov	r6, r0
 80036de:	460f      	mov	r7, r1
 80036e0:	4614      	mov	r4, r2
 80036e2:	18d5      	adds	r5, r2, r3
 80036e4:	42ac      	cmp	r4, r5
 80036e6:	d101      	bne.n	80036ec <__sfputs_r+0x12>
 80036e8:	2000      	movs	r0, #0
 80036ea:	e007      	b.n	80036fc <__sfputs_r+0x22>
 80036ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f0:	463a      	mov	r2, r7
 80036f2:	4630      	mov	r0, r6
 80036f4:	f7ff ffda 	bl	80036ac <__sfputc_r>
 80036f8:	1c43      	adds	r3, r0, #1
 80036fa:	d1f3      	bne.n	80036e4 <__sfputs_r+0xa>
 80036fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003700 <_vfiprintf_r>:
 8003700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003704:	460d      	mov	r5, r1
 8003706:	b09d      	sub	sp, #116	; 0x74
 8003708:	4614      	mov	r4, r2
 800370a:	4698      	mov	r8, r3
 800370c:	4606      	mov	r6, r0
 800370e:	b118      	cbz	r0, 8003718 <_vfiprintf_r+0x18>
 8003710:	6983      	ldr	r3, [r0, #24]
 8003712:	b90b      	cbnz	r3, 8003718 <_vfiprintf_r+0x18>
 8003714:	f000 fc9a 	bl	800404c <__sinit>
 8003718:	4b89      	ldr	r3, [pc, #548]	; (8003940 <_vfiprintf_r+0x240>)
 800371a:	429d      	cmp	r5, r3
 800371c:	d11b      	bne.n	8003756 <_vfiprintf_r+0x56>
 800371e:	6875      	ldr	r5, [r6, #4]
 8003720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003722:	07d9      	lsls	r1, r3, #31
 8003724:	d405      	bmi.n	8003732 <_vfiprintf_r+0x32>
 8003726:	89ab      	ldrh	r3, [r5, #12]
 8003728:	059a      	lsls	r2, r3, #22
 800372a:	d402      	bmi.n	8003732 <_vfiprintf_r+0x32>
 800372c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800372e:	f000 fd2b 	bl	8004188 <__retarget_lock_acquire_recursive>
 8003732:	89ab      	ldrh	r3, [r5, #12]
 8003734:	071b      	lsls	r3, r3, #28
 8003736:	d501      	bpl.n	800373c <_vfiprintf_r+0x3c>
 8003738:	692b      	ldr	r3, [r5, #16]
 800373a:	b9eb      	cbnz	r3, 8003778 <_vfiprintf_r+0x78>
 800373c:	4629      	mov	r1, r5
 800373e:	4630      	mov	r0, r6
 8003740:	f000 faf4 	bl	8003d2c <__swsetup_r>
 8003744:	b1c0      	cbz	r0, 8003778 <_vfiprintf_r+0x78>
 8003746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003748:	07dc      	lsls	r4, r3, #31
 800374a:	d50e      	bpl.n	800376a <_vfiprintf_r+0x6a>
 800374c:	f04f 30ff 	mov.w	r0, #4294967295
 8003750:	b01d      	add	sp, #116	; 0x74
 8003752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003756:	4b7b      	ldr	r3, [pc, #492]	; (8003944 <_vfiprintf_r+0x244>)
 8003758:	429d      	cmp	r5, r3
 800375a:	d101      	bne.n	8003760 <_vfiprintf_r+0x60>
 800375c:	68b5      	ldr	r5, [r6, #8]
 800375e:	e7df      	b.n	8003720 <_vfiprintf_r+0x20>
 8003760:	4b79      	ldr	r3, [pc, #484]	; (8003948 <_vfiprintf_r+0x248>)
 8003762:	429d      	cmp	r5, r3
 8003764:	bf08      	it	eq
 8003766:	68f5      	ldreq	r5, [r6, #12]
 8003768:	e7da      	b.n	8003720 <_vfiprintf_r+0x20>
 800376a:	89ab      	ldrh	r3, [r5, #12]
 800376c:	0598      	lsls	r0, r3, #22
 800376e:	d4ed      	bmi.n	800374c <_vfiprintf_r+0x4c>
 8003770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003772:	f000 fd0a 	bl	800418a <__retarget_lock_release_recursive>
 8003776:	e7e9      	b.n	800374c <_vfiprintf_r+0x4c>
 8003778:	2300      	movs	r3, #0
 800377a:	9309      	str	r3, [sp, #36]	; 0x24
 800377c:	2320      	movs	r3, #32
 800377e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003782:	f8cd 800c 	str.w	r8, [sp, #12]
 8003786:	2330      	movs	r3, #48	; 0x30
 8003788:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800394c <_vfiprintf_r+0x24c>
 800378c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003790:	f04f 0901 	mov.w	r9, #1
 8003794:	4623      	mov	r3, r4
 8003796:	469a      	mov	sl, r3
 8003798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800379c:	b10a      	cbz	r2, 80037a2 <_vfiprintf_r+0xa2>
 800379e:	2a25      	cmp	r2, #37	; 0x25
 80037a0:	d1f9      	bne.n	8003796 <_vfiprintf_r+0x96>
 80037a2:	ebba 0b04 	subs.w	fp, sl, r4
 80037a6:	d00b      	beq.n	80037c0 <_vfiprintf_r+0xc0>
 80037a8:	465b      	mov	r3, fp
 80037aa:	4622      	mov	r2, r4
 80037ac:	4629      	mov	r1, r5
 80037ae:	4630      	mov	r0, r6
 80037b0:	f7ff ff93 	bl	80036da <__sfputs_r>
 80037b4:	3001      	adds	r0, #1
 80037b6:	f000 80aa 	beq.w	800390e <_vfiprintf_r+0x20e>
 80037ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037bc:	445a      	add	r2, fp
 80037be:	9209      	str	r2, [sp, #36]	; 0x24
 80037c0:	f89a 3000 	ldrb.w	r3, [sl]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80a2 	beq.w	800390e <_vfiprintf_r+0x20e>
 80037ca:	2300      	movs	r3, #0
 80037cc:	f04f 32ff 	mov.w	r2, #4294967295
 80037d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037d4:	f10a 0a01 	add.w	sl, sl, #1
 80037d8:	9304      	str	r3, [sp, #16]
 80037da:	9307      	str	r3, [sp, #28]
 80037dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037e0:	931a      	str	r3, [sp, #104]	; 0x68
 80037e2:	4654      	mov	r4, sl
 80037e4:	2205      	movs	r2, #5
 80037e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ea:	4858      	ldr	r0, [pc, #352]	; (800394c <_vfiprintf_r+0x24c>)
 80037ec:	f7fc fd10 	bl	8000210 <memchr>
 80037f0:	9a04      	ldr	r2, [sp, #16]
 80037f2:	b9d8      	cbnz	r0, 800382c <_vfiprintf_r+0x12c>
 80037f4:	06d1      	lsls	r1, r2, #27
 80037f6:	bf44      	itt	mi
 80037f8:	2320      	movmi	r3, #32
 80037fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037fe:	0713      	lsls	r3, r2, #28
 8003800:	bf44      	itt	mi
 8003802:	232b      	movmi	r3, #43	; 0x2b
 8003804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003808:	f89a 3000 	ldrb.w	r3, [sl]
 800380c:	2b2a      	cmp	r3, #42	; 0x2a
 800380e:	d015      	beq.n	800383c <_vfiprintf_r+0x13c>
 8003810:	9a07      	ldr	r2, [sp, #28]
 8003812:	4654      	mov	r4, sl
 8003814:	2000      	movs	r0, #0
 8003816:	f04f 0c0a 	mov.w	ip, #10
 800381a:	4621      	mov	r1, r4
 800381c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003820:	3b30      	subs	r3, #48	; 0x30
 8003822:	2b09      	cmp	r3, #9
 8003824:	d94e      	bls.n	80038c4 <_vfiprintf_r+0x1c4>
 8003826:	b1b0      	cbz	r0, 8003856 <_vfiprintf_r+0x156>
 8003828:	9207      	str	r2, [sp, #28]
 800382a:	e014      	b.n	8003856 <_vfiprintf_r+0x156>
 800382c:	eba0 0308 	sub.w	r3, r0, r8
 8003830:	fa09 f303 	lsl.w	r3, r9, r3
 8003834:	4313      	orrs	r3, r2
 8003836:	9304      	str	r3, [sp, #16]
 8003838:	46a2      	mov	sl, r4
 800383a:	e7d2      	b.n	80037e2 <_vfiprintf_r+0xe2>
 800383c:	9b03      	ldr	r3, [sp, #12]
 800383e:	1d19      	adds	r1, r3, #4
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	9103      	str	r1, [sp, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	bfbb      	ittet	lt
 8003848:	425b      	neglt	r3, r3
 800384a:	f042 0202 	orrlt.w	r2, r2, #2
 800384e:	9307      	strge	r3, [sp, #28]
 8003850:	9307      	strlt	r3, [sp, #28]
 8003852:	bfb8      	it	lt
 8003854:	9204      	strlt	r2, [sp, #16]
 8003856:	7823      	ldrb	r3, [r4, #0]
 8003858:	2b2e      	cmp	r3, #46	; 0x2e
 800385a:	d10c      	bne.n	8003876 <_vfiprintf_r+0x176>
 800385c:	7863      	ldrb	r3, [r4, #1]
 800385e:	2b2a      	cmp	r3, #42	; 0x2a
 8003860:	d135      	bne.n	80038ce <_vfiprintf_r+0x1ce>
 8003862:	9b03      	ldr	r3, [sp, #12]
 8003864:	1d1a      	adds	r2, r3, #4
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	9203      	str	r2, [sp, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	bfb8      	it	lt
 800386e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003872:	3402      	adds	r4, #2
 8003874:	9305      	str	r3, [sp, #20]
 8003876:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800395c <_vfiprintf_r+0x25c>
 800387a:	7821      	ldrb	r1, [r4, #0]
 800387c:	2203      	movs	r2, #3
 800387e:	4650      	mov	r0, sl
 8003880:	f7fc fcc6 	bl	8000210 <memchr>
 8003884:	b140      	cbz	r0, 8003898 <_vfiprintf_r+0x198>
 8003886:	2340      	movs	r3, #64	; 0x40
 8003888:	eba0 000a 	sub.w	r0, r0, sl
 800388c:	fa03 f000 	lsl.w	r0, r3, r0
 8003890:	9b04      	ldr	r3, [sp, #16]
 8003892:	4303      	orrs	r3, r0
 8003894:	3401      	adds	r4, #1
 8003896:	9304      	str	r3, [sp, #16]
 8003898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800389c:	482c      	ldr	r0, [pc, #176]	; (8003950 <_vfiprintf_r+0x250>)
 800389e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038a2:	2206      	movs	r2, #6
 80038a4:	f7fc fcb4 	bl	8000210 <memchr>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d03f      	beq.n	800392c <_vfiprintf_r+0x22c>
 80038ac:	4b29      	ldr	r3, [pc, #164]	; (8003954 <_vfiprintf_r+0x254>)
 80038ae:	bb1b      	cbnz	r3, 80038f8 <_vfiprintf_r+0x1f8>
 80038b0:	9b03      	ldr	r3, [sp, #12]
 80038b2:	3307      	adds	r3, #7
 80038b4:	f023 0307 	bic.w	r3, r3, #7
 80038b8:	3308      	adds	r3, #8
 80038ba:	9303      	str	r3, [sp, #12]
 80038bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038be:	443b      	add	r3, r7
 80038c0:	9309      	str	r3, [sp, #36]	; 0x24
 80038c2:	e767      	b.n	8003794 <_vfiprintf_r+0x94>
 80038c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80038c8:	460c      	mov	r4, r1
 80038ca:	2001      	movs	r0, #1
 80038cc:	e7a5      	b.n	800381a <_vfiprintf_r+0x11a>
 80038ce:	2300      	movs	r3, #0
 80038d0:	3401      	adds	r4, #1
 80038d2:	9305      	str	r3, [sp, #20]
 80038d4:	4619      	mov	r1, r3
 80038d6:	f04f 0c0a 	mov.w	ip, #10
 80038da:	4620      	mov	r0, r4
 80038dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038e0:	3a30      	subs	r2, #48	; 0x30
 80038e2:	2a09      	cmp	r2, #9
 80038e4:	d903      	bls.n	80038ee <_vfiprintf_r+0x1ee>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0c5      	beq.n	8003876 <_vfiprintf_r+0x176>
 80038ea:	9105      	str	r1, [sp, #20]
 80038ec:	e7c3      	b.n	8003876 <_vfiprintf_r+0x176>
 80038ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80038f2:	4604      	mov	r4, r0
 80038f4:	2301      	movs	r3, #1
 80038f6:	e7f0      	b.n	80038da <_vfiprintf_r+0x1da>
 80038f8:	ab03      	add	r3, sp, #12
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	462a      	mov	r2, r5
 80038fe:	4b16      	ldr	r3, [pc, #88]	; (8003958 <_vfiprintf_r+0x258>)
 8003900:	a904      	add	r1, sp, #16
 8003902:	4630      	mov	r0, r6
 8003904:	f3af 8000 	nop.w
 8003908:	4607      	mov	r7, r0
 800390a:	1c78      	adds	r0, r7, #1
 800390c:	d1d6      	bne.n	80038bc <_vfiprintf_r+0x1bc>
 800390e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003910:	07d9      	lsls	r1, r3, #31
 8003912:	d405      	bmi.n	8003920 <_vfiprintf_r+0x220>
 8003914:	89ab      	ldrh	r3, [r5, #12]
 8003916:	059a      	lsls	r2, r3, #22
 8003918:	d402      	bmi.n	8003920 <_vfiprintf_r+0x220>
 800391a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800391c:	f000 fc35 	bl	800418a <__retarget_lock_release_recursive>
 8003920:	89ab      	ldrh	r3, [r5, #12]
 8003922:	065b      	lsls	r3, r3, #25
 8003924:	f53f af12 	bmi.w	800374c <_vfiprintf_r+0x4c>
 8003928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800392a:	e711      	b.n	8003750 <_vfiprintf_r+0x50>
 800392c:	ab03      	add	r3, sp, #12
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	462a      	mov	r2, r5
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <_vfiprintf_r+0x258>)
 8003934:	a904      	add	r1, sp, #16
 8003936:	4630      	mov	r0, r6
 8003938:	f000 f880 	bl	8003a3c <_printf_i>
 800393c:	e7e4      	b.n	8003908 <_vfiprintf_r+0x208>
 800393e:	bf00      	nop
 8003940:	0800473c 	.word	0x0800473c
 8003944:	0800475c 	.word	0x0800475c
 8003948:	0800471c 	.word	0x0800471c
 800394c:	080046e8 	.word	0x080046e8
 8003950:	080046f2 	.word	0x080046f2
 8003954:	00000000 	.word	0x00000000
 8003958:	080036db 	.word	0x080036db
 800395c:	080046ee 	.word	0x080046ee

08003960 <_printf_common>:
 8003960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003964:	4616      	mov	r6, r2
 8003966:	4699      	mov	r9, r3
 8003968:	688a      	ldr	r2, [r1, #8]
 800396a:	690b      	ldr	r3, [r1, #16]
 800396c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003970:	4293      	cmp	r3, r2
 8003972:	bfb8      	it	lt
 8003974:	4613      	movlt	r3, r2
 8003976:	6033      	str	r3, [r6, #0]
 8003978:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800397c:	4607      	mov	r7, r0
 800397e:	460c      	mov	r4, r1
 8003980:	b10a      	cbz	r2, 8003986 <_printf_common+0x26>
 8003982:	3301      	adds	r3, #1
 8003984:	6033      	str	r3, [r6, #0]
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	0699      	lsls	r1, r3, #26
 800398a:	bf42      	ittt	mi
 800398c:	6833      	ldrmi	r3, [r6, #0]
 800398e:	3302      	addmi	r3, #2
 8003990:	6033      	strmi	r3, [r6, #0]
 8003992:	6825      	ldr	r5, [r4, #0]
 8003994:	f015 0506 	ands.w	r5, r5, #6
 8003998:	d106      	bne.n	80039a8 <_printf_common+0x48>
 800399a:	f104 0a19 	add.w	sl, r4, #25
 800399e:	68e3      	ldr	r3, [r4, #12]
 80039a0:	6832      	ldr	r2, [r6, #0]
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	42ab      	cmp	r3, r5
 80039a6:	dc26      	bgt.n	80039f6 <_printf_common+0x96>
 80039a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039ac:	1e13      	subs	r3, r2, #0
 80039ae:	6822      	ldr	r2, [r4, #0]
 80039b0:	bf18      	it	ne
 80039b2:	2301      	movne	r3, #1
 80039b4:	0692      	lsls	r2, r2, #26
 80039b6:	d42b      	bmi.n	8003a10 <_printf_common+0xb0>
 80039b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039bc:	4649      	mov	r1, r9
 80039be:	4638      	mov	r0, r7
 80039c0:	47c0      	blx	r8
 80039c2:	3001      	adds	r0, #1
 80039c4:	d01e      	beq.n	8003a04 <_printf_common+0xa4>
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	68e5      	ldr	r5, [r4, #12]
 80039ca:	6832      	ldr	r2, [r6, #0]
 80039cc:	f003 0306 	and.w	r3, r3, #6
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	bf08      	it	eq
 80039d4:	1aad      	subeq	r5, r5, r2
 80039d6:	68a3      	ldr	r3, [r4, #8]
 80039d8:	6922      	ldr	r2, [r4, #16]
 80039da:	bf0c      	ite	eq
 80039dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039e0:	2500      	movne	r5, #0
 80039e2:	4293      	cmp	r3, r2
 80039e4:	bfc4      	itt	gt
 80039e6:	1a9b      	subgt	r3, r3, r2
 80039e8:	18ed      	addgt	r5, r5, r3
 80039ea:	2600      	movs	r6, #0
 80039ec:	341a      	adds	r4, #26
 80039ee:	42b5      	cmp	r5, r6
 80039f0:	d11a      	bne.n	8003a28 <_printf_common+0xc8>
 80039f2:	2000      	movs	r0, #0
 80039f4:	e008      	b.n	8003a08 <_printf_common+0xa8>
 80039f6:	2301      	movs	r3, #1
 80039f8:	4652      	mov	r2, sl
 80039fa:	4649      	mov	r1, r9
 80039fc:	4638      	mov	r0, r7
 80039fe:	47c0      	blx	r8
 8003a00:	3001      	adds	r0, #1
 8003a02:	d103      	bne.n	8003a0c <_printf_common+0xac>
 8003a04:	f04f 30ff 	mov.w	r0, #4294967295
 8003a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a0c:	3501      	adds	r5, #1
 8003a0e:	e7c6      	b.n	800399e <_printf_common+0x3e>
 8003a10:	18e1      	adds	r1, r4, r3
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	2030      	movs	r0, #48	; 0x30
 8003a16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a1a:	4422      	add	r2, r4
 8003a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a24:	3302      	adds	r3, #2
 8003a26:	e7c7      	b.n	80039b8 <_printf_common+0x58>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	4622      	mov	r2, r4
 8003a2c:	4649      	mov	r1, r9
 8003a2e:	4638      	mov	r0, r7
 8003a30:	47c0      	blx	r8
 8003a32:	3001      	adds	r0, #1
 8003a34:	d0e6      	beq.n	8003a04 <_printf_common+0xa4>
 8003a36:	3601      	adds	r6, #1
 8003a38:	e7d9      	b.n	80039ee <_printf_common+0x8e>
	...

08003a3c <_printf_i>:
 8003a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a40:	7e0f      	ldrb	r7, [r1, #24]
 8003a42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a44:	2f78      	cmp	r7, #120	; 0x78
 8003a46:	4691      	mov	r9, r2
 8003a48:	4680      	mov	r8, r0
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	469a      	mov	sl, r3
 8003a4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a52:	d807      	bhi.n	8003a64 <_printf_i+0x28>
 8003a54:	2f62      	cmp	r7, #98	; 0x62
 8003a56:	d80a      	bhi.n	8003a6e <_printf_i+0x32>
 8003a58:	2f00      	cmp	r7, #0
 8003a5a:	f000 80d8 	beq.w	8003c0e <_printf_i+0x1d2>
 8003a5e:	2f58      	cmp	r7, #88	; 0x58
 8003a60:	f000 80a3 	beq.w	8003baa <_printf_i+0x16e>
 8003a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a6c:	e03a      	b.n	8003ae4 <_printf_i+0xa8>
 8003a6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a72:	2b15      	cmp	r3, #21
 8003a74:	d8f6      	bhi.n	8003a64 <_printf_i+0x28>
 8003a76:	a101      	add	r1, pc, #4	; (adr r1, 8003a7c <_printf_i+0x40>)
 8003a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a7c:	08003ad5 	.word	0x08003ad5
 8003a80:	08003ae9 	.word	0x08003ae9
 8003a84:	08003a65 	.word	0x08003a65
 8003a88:	08003a65 	.word	0x08003a65
 8003a8c:	08003a65 	.word	0x08003a65
 8003a90:	08003a65 	.word	0x08003a65
 8003a94:	08003ae9 	.word	0x08003ae9
 8003a98:	08003a65 	.word	0x08003a65
 8003a9c:	08003a65 	.word	0x08003a65
 8003aa0:	08003a65 	.word	0x08003a65
 8003aa4:	08003a65 	.word	0x08003a65
 8003aa8:	08003bf5 	.word	0x08003bf5
 8003aac:	08003b19 	.word	0x08003b19
 8003ab0:	08003bd7 	.word	0x08003bd7
 8003ab4:	08003a65 	.word	0x08003a65
 8003ab8:	08003a65 	.word	0x08003a65
 8003abc:	08003c17 	.word	0x08003c17
 8003ac0:	08003a65 	.word	0x08003a65
 8003ac4:	08003b19 	.word	0x08003b19
 8003ac8:	08003a65 	.word	0x08003a65
 8003acc:	08003a65 	.word	0x08003a65
 8003ad0:	08003bdf 	.word	0x08003bdf
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	1d1a      	adds	r2, r3, #4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	602a      	str	r2, [r5, #0]
 8003adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0a3      	b.n	8003c30 <_printf_i+0x1f4>
 8003ae8:	6820      	ldr	r0, [r4, #0]
 8003aea:	6829      	ldr	r1, [r5, #0]
 8003aec:	0606      	lsls	r6, r0, #24
 8003aee:	f101 0304 	add.w	r3, r1, #4
 8003af2:	d50a      	bpl.n	8003b0a <_printf_i+0xce>
 8003af4:	680e      	ldr	r6, [r1, #0]
 8003af6:	602b      	str	r3, [r5, #0]
 8003af8:	2e00      	cmp	r6, #0
 8003afa:	da03      	bge.n	8003b04 <_printf_i+0xc8>
 8003afc:	232d      	movs	r3, #45	; 0x2d
 8003afe:	4276      	negs	r6, r6
 8003b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b04:	485e      	ldr	r0, [pc, #376]	; (8003c80 <_printf_i+0x244>)
 8003b06:	230a      	movs	r3, #10
 8003b08:	e019      	b.n	8003b3e <_printf_i+0x102>
 8003b0a:	680e      	ldr	r6, [r1, #0]
 8003b0c:	602b      	str	r3, [r5, #0]
 8003b0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b12:	bf18      	it	ne
 8003b14:	b236      	sxthne	r6, r6
 8003b16:	e7ef      	b.n	8003af8 <_printf_i+0xbc>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	6820      	ldr	r0, [r4, #0]
 8003b1c:	1d19      	adds	r1, r3, #4
 8003b1e:	6029      	str	r1, [r5, #0]
 8003b20:	0601      	lsls	r1, r0, #24
 8003b22:	d501      	bpl.n	8003b28 <_printf_i+0xec>
 8003b24:	681e      	ldr	r6, [r3, #0]
 8003b26:	e002      	b.n	8003b2e <_printf_i+0xf2>
 8003b28:	0646      	lsls	r6, r0, #25
 8003b2a:	d5fb      	bpl.n	8003b24 <_printf_i+0xe8>
 8003b2c:	881e      	ldrh	r6, [r3, #0]
 8003b2e:	4854      	ldr	r0, [pc, #336]	; (8003c80 <_printf_i+0x244>)
 8003b30:	2f6f      	cmp	r7, #111	; 0x6f
 8003b32:	bf0c      	ite	eq
 8003b34:	2308      	moveq	r3, #8
 8003b36:	230a      	movne	r3, #10
 8003b38:	2100      	movs	r1, #0
 8003b3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b3e:	6865      	ldr	r5, [r4, #4]
 8003b40:	60a5      	str	r5, [r4, #8]
 8003b42:	2d00      	cmp	r5, #0
 8003b44:	bfa2      	ittt	ge
 8003b46:	6821      	ldrge	r1, [r4, #0]
 8003b48:	f021 0104 	bicge.w	r1, r1, #4
 8003b4c:	6021      	strge	r1, [r4, #0]
 8003b4e:	b90e      	cbnz	r6, 8003b54 <_printf_i+0x118>
 8003b50:	2d00      	cmp	r5, #0
 8003b52:	d04d      	beq.n	8003bf0 <_printf_i+0x1b4>
 8003b54:	4615      	mov	r5, r2
 8003b56:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b5a:	fb03 6711 	mls	r7, r3, r1, r6
 8003b5e:	5dc7      	ldrb	r7, [r0, r7]
 8003b60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b64:	4637      	mov	r7, r6
 8003b66:	42bb      	cmp	r3, r7
 8003b68:	460e      	mov	r6, r1
 8003b6a:	d9f4      	bls.n	8003b56 <_printf_i+0x11a>
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d10b      	bne.n	8003b88 <_printf_i+0x14c>
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	07de      	lsls	r6, r3, #31
 8003b74:	d508      	bpl.n	8003b88 <_printf_i+0x14c>
 8003b76:	6923      	ldr	r3, [r4, #16]
 8003b78:	6861      	ldr	r1, [r4, #4]
 8003b7a:	4299      	cmp	r1, r3
 8003b7c:	bfde      	ittt	le
 8003b7e:	2330      	movle	r3, #48	; 0x30
 8003b80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b88:	1b52      	subs	r2, r2, r5
 8003b8a:	6122      	str	r2, [r4, #16]
 8003b8c:	f8cd a000 	str.w	sl, [sp]
 8003b90:	464b      	mov	r3, r9
 8003b92:	aa03      	add	r2, sp, #12
 8003b94:	4621      	mov	r1, r4
 8003b96:	4640      	mov	r0, r8
 8003b98:	f7ff fee2 	bl	8003960 <_printf_common>
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d14c      	bne.n	8003c3a <_printf_i+0x1fe>
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba4:	b004      	add	sp, #16
 8003ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003baa:	4835      	ldr	r0, [pc, #212]	; (8003c80 <_printf_i+0x244>)
 8003bac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bb0:	6829      	ldr	r1, [r5, #0]
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bb8:	6029      	str	r1, [r5, #0]
 8003bba:	061d      	lsls	r5, r3, #24
 8003bbc:	d514      	bpl.n	8003be8 <_printf_i+0x1ac>
 8003bbe:	07df      	lsls	r7, r3, #31
 8003bc0:	bf44      	itt	mi
 8003bc2:	f043 0320 	orrmi.w	r3, r3, #32
 8003bc6:	6023      	strmi	r3, [r4, #0]
 8003bc8:	b91e      	cbnz	r6, 8003bd2 <_printf_i+0x196>
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	f023 0320 	bic.w	r3, r3, #32
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	2310      	movs	r3, #16
 8003bd4:	e7b0      	b.n	8003b38 <_printf_i+0xfc>
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	f043 0320 	orr.w	r3, r3, #32
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	2378      	movs	r3, #120	; 0x78
 8003be0:	4828      	ldr	r0, [pc, #160]	; (8003c84 <_printf_i+0x248>)
 8003be2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003be6:	e7e3      	b.n	8003bb0 <_printf_i+0x174>
 8003be8:	0659      	lsls	r1, r3, #25
 8003bea:	bf48      	it	mi
 8003bec:	b2b6      	uxthmi	r6, r6
 8003bee:	e7e6      	b.n	8003bbe <_printf_i+0x182>
 8003bf0:	4615      	mov	r5, r2
 8003bf2:	e7bb      	b.n	8003b6c <_printf_i+0x130>
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	6826      	ldr	r6, [r4, #0]
 8003bf8:	6961      	ldr	r1, [r4, #20]
 8003bfa:	1d18      	adds	r0, r3, #4
 8003bfc:	6028      	str	r0, [r5, #0]
 8003bfe:	0635      	lsls	r5, r6, #24
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	d501      	bpl.n	8003c08 <_printf_i+0x1cc>
 8003c04:	6019      	str	r1, [r3, #0]
 8003c06:	e002      	b.n	8003c0e <_printf_i+0x1d2>
 8003c08:	0670      	lsls	r0, r6, #25
 8003c0a:	d5fb      	bpl.n	8003c04 <_printf_i+0x1c8>
 8003c0c:	8019      	strh	r1, [r3, #0]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	6123      	str	r3, [r4, #16]
 8003c12:	4615      	mov	r5, r2
 8003c14:	e7ba      	b.n	8003b8c <_printf_i+0x150>
 8003c16:	682b      	ldr	r3, [r5, #0]
 8003c18:	1d1a      	adds	r2, r3, #4
 8003c1a:	602a      	str	r2, [r5, #0]
 8003c1c:	681d      	ldr	r5, [r3, #0]
 8003c1e:	6862      	ldr	r2, [r4, #4]
 8003c20:	2100      	movs	r1, #0
 8003c22:	4628      	mov	r0, r5
 8003c24:	f7fc faf4 	bl	8000210 <memchr>
 8003c28:	b108      	cbz	r0, 8003c2e <_printf_i+0x1f2>
 8003c2a:	1b40      	subs	r0, r0, r5
 8003c2c:	6060      	str	r0, [r4, #4]
 8003c2e:	6863      	ldr	r3, [r4, #4]
 8003c30:	6123      	str	r3, [r4, #16]
 8003c32:	2300      	movs	r3, #0
 8003c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c38:	e7a8      	b.n	8003b8c <_printf_i+0x150>
 8003c3a:	6923      	ldr	r3, [r4, #16]
 8003c3c:	462a      	mov	r2, r5
 8003c3e:	4649      	mov	r1, r9
 8003c40:	4640      	mov	r0, r8
 8003c42:	47d0      	blx	sl
 8003c44:	3001      	adds	r0, #1
 8003c46:	d0ab      	beq.n	8003ba0 <_printf_i+0x164>
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	079b      	lsls	r3, r3, #30
 8003c4c:	d413      	bmi.n	8003c76 <_printf_i+0x23a>
 8003c4e:	68e0      	ldr	r0, [r4, #12]
 8003c50:	9b03      	ldr	r3, [sp, #12]
 8003c52:	4298      	cmp	r0, r3
 8003c54:	bfb8      	it	lt
 8003c56:	4618      	movlt	r0, r3
 8003c58:	e7a4      	b.n	8003ba4 <_printf_i+0x168>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	4632      	mov	r2, r6
 8003c5e:	4649      	mov	r1, r9
 8003c60:	4640      	mov	r0, r8
 8003c62:	47d0      	blx	sl
 8003c64:	3001      	adds	r0, #1
 8003c66:	d09b      	beq.n	8003ba0 <_printf_i+0x164>
 8003c68:	3501      	adds	r5, #1
 8003c6a:	68e3      	ldr	r3, [r4, #12]
 8003c6c:	9903      	ldr	r1, [sp, #12]
 8003c6e:	1a5b      	subs	r3, r3, r1
 8003c70:	42ab      	cmp	r3, r5
 8003c72:	dcf2      	bgt.n	8003c5a <_printf_i+0x21e>
 8003c74:	e7eb      	b.n	8003c4e <_printf_i+0x212>
 8003c76:	2500      	movs	r5, #0
 8003c78:	f104 0619 	add.w	r6, r4, #25
 8003c7c:	e7f5      	b.n	8003c6a <_printf_i+0x22e>
 8003c7e:	bf00      	nop
 8003c80:	080046f9 	.word	0x080046f9
 8003c84:	0800470a 	.word	0x0800470a

08003c88 <__swbuf_r>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	460e      	mov	r6, r1
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	4605      	mov	r5, r0
 8003c90:	b118      	cbz	r0, 8003c9a <__swbuf_r+0x12>
 8003c92:	6983      	ldr	r3, [r0, #24]
 8003c94:	b90b      	cbnz	r3, 8003c9a <__swbuf_r+0x12>
 8003c96:	f000 f9d9 	bl	800404c <__sinit>
 8003c9a:	4b21      	ldr	r3, [pc, #132]	; (8003d20 <__swbuf_r+0x98>)
 8003c9c:	429c      	cmp	r4, r3
 8003c9e:	d12b      	bne.n	8003cf8 <__swbuf_r+0x70>
 8003ca0:	686c      	ldr	r4, [r5, #4]
 8003ca2:	69a3      	ldr	r3, [r4, #24]
 8003ca4:	60a3      	str	r3, [r4, #8]
 8003ca6:	89a3      	ldrh	r3, [r4, #12]
 8003ca8:	071a      	lsls	r2, r3, #28
 8003caa:	d52f      	bpl.n	8003d0c <__swbuf_r+0x84>
 8003cac:	6923      	ldr	r3, [r4, #16]
 8003cae:	b36b      	cbz	r3, 8003d0c <__swbuf_r+0x84>
 8003cb0:	6923      	ldr	r3, [r4, #16]
 8003cb2:	6820      	ldr	r0, [r4, #0]
 8003cb4:	1ac0      	subs	r0, r0, r3
 8003cb6:	6963      	ldr	r3, [r4, #20]
 8003cb8:	b2f6      	uxtb	r6, r6
 8003cba:	4283      	cmp	r3, r0
 8003cbc:	4637      	mov	r7, r6
 8003cbe:	dc04      	bgt.n	8003cca <__swbuf_r+0x42>
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	f000 f92e 	bl	8003f24 <_fflush_r>
 8003cc8:	bb30      	cbnz	r0, 8003d18 <__swbuf_r+0x90>
 8003cca:	68a3      	ldr	r3, [r4, #8]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	60a3      	str	r3, [r4, #8]
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	6022      	str	r2, [r4, #0]
 8003cd6:	701e      	strb	r6, [r3, #0]
 8003cd8:	6963      	ldr	r3, [r4, #20]
 8003cda:	3001      	adds	r0, #1
 8003cdc:	4283      	cmp	r3, r0
 8003cde:	d004      	beq.n	8003cea <__swbuf_r+0x62>
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	07db      	lsls	r3, r3, #31
 8003ce4:	d506      	bpl.n	8003cf4 <__swbuf_r+0x6c>
 8003ce6:	2e0a      	cmp	r6, #10
 8003ce8:	d104      	bne.n	8003cf4 <__swbuf_r+0x6c>
 8003cea:	4621      	mov	r1, r4
 8003cec:	4628      	mov	r0, r5
 8003cee:	f000 f919 	bl	8003f24 <_fflush_r>
 8003cf2:	b988      	cbnz	r0, 8003d18 <__swbuf_r+0x90>
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <__swbuf_r+0x9c>)
 8003cfa:	429c      	cmp	r4, r3
 8003cfc:	d101      	bne.n	8003d02 <__swbuf_r+0x7a>
 8003cfe:	68ac      	ldr	r4, [r5, #8]
 8003d00:	e7cf      	b.n	8003ca2 <__swbuf_r+0x1a>
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <__swbuf_r+0xa0>)
 8003d04:	429c      	cmp	r4, r3
 8003d06:	bf08      	it	eq
 8003d08:	68ec      	ldreq	r4, [r5, #12]
 8003d0a:	e7ca      	b.n	8003ca2 <__swbuf_r+0x1a>
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	4628      	mov	r0, r5
 8003d10:	f000 f80c 	bl	8003d2c <__swsetup_r>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d0cb      	beq.n	8003cb0 <__swbuf_r+0x28>
 8003d18:	f04f 37ff 	mov.w	r7, #4294967295
 8003d1c:	e7ea      	b.n	8003cf4 <__swbuf_r+0x6c>
 8003d1e:	bf00      	nop
 8003d20:	0800473c 	.word	0x0800473c
 8003d24:	0800475c 	.word	0x0800475c
 8003d28:	0800471c 	.word	0x0800471c

08003d2c <__swsetup_r>:
 8003d2c:	4b32      	ldr	r3, [pc, #200]	; (8003df8 <__swsetup_r+0xcc>)
 8003d2e:	b570      	push	{r4, r5, r6, lr}
 8003d30:	681d      	ldr	r5, [r3, #0]
 8003d32:	4606      	mov	r6, r0
 8003d34:	460c      	mov	r4, r1
 8003d36:	b125      	cbz	r5, 8003d42 <__swsetup_r+0x16>
 8003d38:	69ab      	ldr	r3, [r5, #24]
 8003d3a:	b913      	cbnz	r3, 8003d42 <__swsetup_r+0x16>
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	f000 f985 	bl	800404c <__sinit>
 8003d42:	4b2e      	ldr	r3, [pc, #184]	; (8003dfc <__swsetup_r+0xd0>)
 8003d44:	429c      	cmp	r4, r3
 8003d46:	d10f      	bne.n	8003d68 <__swsetup_r+0x3c>
 8003d48:	686c      	ldr	r4, [r5, #4]
 8003d4a:	89a3      	ldrh	r3, [r4, #12]
 8003d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d50:	0719      	lsls	r1, r3, #28
 8003d52:	d42c      	bmi.n	8003dae <__swsetup_r+0x82>
 8003d54:	06dd      	lsls	r5, r3, #27
 8003d56:	d411      	bmi.n	8003d7c <__swsetup_r+0x50>
 8003d58:	2309      	movs	r3, #9
 8003d5a:	6033      	str	r3, [r6, #0]
 8003d5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d60:	81a3      	strh	r3, [r4, #12]
 8003d62:	f04f 30ff 	mov.w	r0, #4294967295
 8003d66:	e03e      	b.n	8003de6 <__swsetup_r+0xba>
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <__swsetup_r+0xd4>)
 8003d6a:	429c      	cmp	r4, r3
 8003d6c:	d101      	bne.n	8003d72 <__swsetup_r+0x46>
 8003d6e:	68ac      	ldr	r4, [r5, #8]
 8003d70:	e7eb      	b.n	8003d4a <__swsetup_r+0x1e>
 8003d72:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <__swsetup_r+0xd8>)
 8003d74:	429c      	cmp	r4, r3
 8003d76:	bf08      	it	eq
 8003d78:	68ec      	ldreq	r4, [r5, #12]
 8003d7a:	e7e6      	b.n	8003d4a <__swsetup_r+0x1e>
 8003d7c:	0758      	lsls	r0, r3, #29
 8003d7e:	d512      	bpl.n	8003da6 <__swsetup_r+0x7a>
 8003d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d82:	b141      	cbz	r1, 8003d96 <__swsetup_r+0x6a>
 8003d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d88:	4299      	cmp	r1, r3
 8003d8a:	d002      	beq.n	8003d92 <__swsetup_r+0x66>
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f000 fa63 	bl	8004258 <_free_r>
 8003d92:	2300      	movs	r3, #0
 8003d94:	6363      	str	r3, [r4, #52]	; 0x34
 8003d96:	89a3      	ldrh	r3, [r4, #12]
 8003d98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d9c:	81a3      	strh	r3, [r4, #12]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	6063      	str	r3, [r4, #4]
 8003da2:	6923      	ldr	r3, [r4, #16]
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	89a3      	ldrh	r3, [r4, #12]
 8003da8:	f043 0308 	orr.w	r3, r3, #8
 8003dac:	81a3      	strh	r3, [r4, #12]
 8003dae:	6923      	ldr	r3, [r4, #16]
 8003db0:	b94b      	cbnz	r3, 8003dc6 <__swsetup_r+0x9a>
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dbc:	d003      	beq.n	8003dc6 <__swsetup_r+0x9a>
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	f000 fa09 	bl	80041d8 <__smakebuf_r>
 8003dc6:	89a0      	ldrh	r0, [r4, #12]
 8003dc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dcc:	f010 0301 	ands.w	r3, r0, #1
 8003dd0:	d00a      	beq.n	8003de8 <__swsetup_r+0xbc>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60a3      	str	r3, [r4, #8]
 8003dd6:	6963      	ldr	r3, [r4, #20]
 8003dd8:	425b      	negs	r3, r3
 8003dda:	61a3      	str	r3, [r4, #24]
 8003ddc:	6923      	ldr	r3, [r4, #16]
 8003dde:	b943      	cbnz	r3, 8003df2 <__swsetup_r+0xc6>
 8003de0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003de4:	d1ba      	bne.n	8003d5c <__swsetup_r+0x30>
 8003de6:	bd70      	pop	{r4, r5, r6, pc}
 8003de8:	0781      	lsls	r1, r0, #30
 8003dea:	bf58      	it	pl
 8003dec:	6963      	ldrpl	r3, [r4, #20]
 8003dee:	60a3      	str	r3, [r4, #8]
 8003df0:	e7f4      	b.n	8003ddc <__swsetup_r+0xb0>
 8003df2:	2000      	movs	r0, #0
 8003df4:	e7f7      	b.n	8003de6 <__swsetup_r+0xba>
 8003df6:	bf00      	nop
 8003df8:	20000014 	.word	0x20000014
 8003dfc:	0800473c 	.word	0x0800473c
 8003e00:	0800475c 	.word	0x0800475c
 8003e04:	0800471c 	.word	0x0800471c

08003e08 <abort>:
 8003e08:	b508      	push	{r3, lr}
 8003e0a:	2006      	movs	r0, #6
 8003e0c:	f000 fb3c 	bl	8004488 <raise>
 8003e10:	2001      	movs	r0, #1
 8003e12:	f7fc fe7d 	bl	8000b10 <_exit>
	...

08003e18 <__sflush_r>:
 8003e18:	898a      	ldrh	r2, [r1, #12]
 8003e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e1e:	4605      	mov	r5, r0
 8003e20:	0710      	lsls	r0, r2, #28
 8003e22:	460c      	mov	r4, r1
 8003e24:	d458      	bmi.n	8003ed8 <__sflush_r+0xc0>
 8003e26:	684b      	ldr	r3, [r1, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	dc05      	bgt.n	8003e38 <__sflush_r+0x20>
 8003e2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	dc02      	bgt.n	8003e38 <__sflush_r+0x20>
 8003e32:	2000      	movs	r0, #0
 8003e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e3a:	2e00      	cmp	r6, #0
 8003e3c:	d0f9      	beq.n	8003e32 <__sflush_r+0x1a>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e44:	682f      	ldr	r7, [r5, #0]
 8003e46:	602b      	str	r3, [r5, #0]
 8003e48:	d032      	beq.n	8003eb0 <__sflush_r+0x98>
 8003e4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e4c:	89a3      	ldrh	r3, [r4, #12]
 8003e4e:	075a      	lsls	r2, r3, #29
 8003e50:	d505      	bpl.n	8003e5e <__sflush_r+0x46>
 8003e52:	6863      	ldr	r3, [r4, #4]
 8003e54:	1ac0      	subs	r0, r0, r3
 8003e56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e58:	b10b      	cbz	r3, 8003e5e <__sflush_r+0x46>
 8003e5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e5c:	1ac0      	subs	r0, r0, r3
 8003e5e:	2300      	movs	r3, #0
 8003e60:	4602      	mov	r2, r0
 8003e62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e64:	6a21      	ldr	r1, [r4, #32]
 8003e66:	4628      	mov	r0, r5
 8003e68:	47b0      	blx	r6
 8003e6a:	1c43      	adds	r3, r0, #1
 8003e6c:	89a3      	ldrh	r3, [r4, #12]
 8003e6e:	d106      	bne.n	8003e7e <__sflush_r+0x66>
 8003e70:	6829      	ldr	r1, [r5, #0]
 8003e72:	291d      	cmp	r1, #29
 8003e74:	d82c      	bhi.n	8003ed0 <__sflush_r+0xb8>
 8003e76:	4a2a      	ldr	r2, [pc, #168]	; (8003f20 <__sflush_r+0x108>)
 8003e78:	40ca      	lsrs	r2, r1
 8003e7a:	07d6      	lsls	r6, r2, #31
 8003e7c:	d528      	bpl.n	8003ed0 <__sflush_r+0xb8>
 8003e7e:	2200      	movs	r2, #0
 8003e80:	6062      	str	r2, [r4, #4]
 8003e82:	04d9      	lsls	r1, r3, #19
 8003e84:	6922      	ldr	r2, [r4, #16]
 8003e86:	6022      	str	r2, [r4, #0]
 8003e88:	d504      	bpl.n	8003e94 <__sflush_r+0x7c>
 8003e8a:	1c42      	adds	r2, r0, #1
 8003e8c:	d101      	bne.n	8003e92 <__sflush_r+0x7a>
 8003e8e:	682b      	ldr	r3, [r5, #0]
 8003e90:	b903      	cbnz	r3, 8003e94 <__sflush_r+0x7c>
 8003e92:	6560      	str	r0, [r4, #84]	; 0x54
 8003e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e96:	602f      	str	r7, [r5, #0]
 8003e98:	2900      	cmp	r1, #0
 8003e9a:	d0ca      	beq.n	8003e32 <__sflush_r+0x1a>
 8003e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ea0:	4299      	cmp	r1, r3
 8003ea2:	d002      	beq.n	8003eaa <__sflush_r+0x92>
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	f000 f9d7 	bl	8004258 <_free_r>
 8003eaa:	2000      	movs	r0, #0
 8003eac:	6360      	str	r0, [r4, #52]	; 0x34
 8003eae:	e7c1      	b.n	8003e34 <__sflush_r+0x1c>
 8003eb0:	6a21      	ldr	r1, [r4, #32]
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	47b0      	blx	r6
 8003eb8:	1c41      	adds	r1, r0, #1
 8003eba:	d1c7      	bne.n	8003e4c <__sflush_r+0x34>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0c4      	beq.n	8003e4c <__sflush_r+0x34>
 8003ec2:	2b1d      	cmp	r3, #29
 8003ec4:	d001      	beq.n	8003eca <__sflush_r+0xb2>
 8003ec6:	2b16      	cmp	r3, #22
 8003ec8:	d101      	bne.n	8003ece <__sflush_r+0xb6>
 8003eca:	602f      	str	r7, [r5, #0]
 8003ecc:	e7b1      	b.n	8003e32 <__sflush_r+0x1a>
 8003ece:	89a3      	ldrh	r3, [r4, #12]
 8003ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ed4:	81a3      	strh	r3, [r4, #12]
 8003ed6:	e7ad      	b.n	8003e34 <__sflush_r+0x1c>
 8003ed8:	690f      	ldr	r7, [r1, #16]
 8003eda:	2f00      	cmp	r7, #0
 8003edc:	d0a9      	beq.n	8003e32 <__sflush_r+0x1a>
 8003ede:	0793      	lsls	r3, r2, #30
 8003ee0:	680e      	ldr	r6, [r1, #0]
 8003ee2:	bf08      	it	eq
 8003ee4:	694b      	ldreq	r3, [r1, #20]
 8003ee6:	600f      	str	r7, [r1, #0]
 8003ee8:	bf18      	it	ne
 8003eea:	2300      	movne	r3, #0
 8003eec:	eba6 0807 	sub.w	r8, r6, r7
 8003ef0:	608b      	str	r3, [r1, #8]
 8003ef2:	f1b8 0f00 	cmp.w	r8, #0
 8003ef6:	dd9c      	ble.n	8003e32 <__sflush_r+0x1a>
 8003ef8:	6a21      	ldr	r1, [r4, #32]
 8003efa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003efc:	4643      	mov	r3, r8
 8003efe:	463a      	mov	r2, r7
 8003f00:	4628      	mov	r0, r5
 8003f02:	47b0      	blx	r6
 8003f04:	2800      	cmp	r0, #0
 8003f06:	dc06      	bgt.n	8003f16 <__sflush_r+0xfe>
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f0e:	81a3      	strh	r3, [r4, #12]
 8003f10:	f04f 30ff 	mov.w	r0, #4294967295
 8003f14:	e78e      	b.n	8003e34 <__sflush_r+0x1c>
 8003f16:	4407      	add	r7, r0
 8003f18:	eba8 0800 	sub.w	r8, r8, r0
 8003f1c:	e7e9      	b.n	8003ef2 <__sflush_r+0xda>
 8003f1e:	bf00      	nop
 8003f20:	20400001 	.word	0x20400001

08003f24 <_fflush_r>:
 8003f24:	b538      	push	{r3, r4, r5, lr}
 8003f26:	690b      	ldr	r3, [r1, #16]
 8003f28:	4605      	mov	r5, r0
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	b913      	cbnz	r3, 8003f34 <_fflush_r+0x10>
 8003f2e:	2500      	movs	r5, #0
 8003f30:	4628      	mov	r0, r5
 8003f32:	bd38      	pop	{r3, r4, r5, pc}
 8003f34:	b118      	cbz	r0, 8003f3e <_fflush_r+0x1a>
 8003f36:	6983      	ldr	r3, [r0, #24]
 8003f38:	b90b      	cbnz	r3, 8003f3e <_fflush_r+0x1a>
 8003f3a:	f000 f887 	bl	800404c <__sinit>
 8003f3e:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <_fflush_r+0x6c>)
 8003f40:	429c      	cmp	r4, r3
 8003f42:	d11b      	bne.n	8003f7c <_fflush_r+0x58>
 8003f44:	686c      	ldr	r4, [r5, #4]
 8003f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0ef      	beq.n	8003f2e <_fflush_r+0xa>
 8003f4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f50:	07d0      	lsls	r0, r2, #31
 8003f52:	d404      	bmi.n	8003f5e <_fflush_r+0x3a>
 8003f54:	0599      	lsls	r1, r3, #22
 8003f56:	d402      	bmi.n	8003f5e <_fflush_r+0x3a>
 8003f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f5a:	f000 f915 	bl	8004188 <__retarget_lock_acquire_recursive>
 8003f5e:	4628      	mov	r0, r5
 8003f60:	4621      	mov	r1, r4
 8003f62:	f7ff ff59 	bl	8003e18 <__sflush_r>
 8003f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f68:	07da      	lsls	r2, r3, #31
 8003f6a:	4605      	mov	r5, r0
 8003f6c:	d4e0      	bmi.n	8003f30 <_fflush_r+0xc>
 8003f6e:	89a3      	ldrh	r3, [r4, #12]
 8003f70:	059b      	lsls	r3, r3, #22
 8003f72:	d4dd      	bmi.n	8003f30 <_fflush_r+0xc>
 8003f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f76:	f000 f908 	bl	800418a <__retarget_lock_release_recursive>
 8003f7a:	e7d9      	b.n	8003f30 <_fflush_r+0xc>
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <_fflush_r+0x70>)
 8003f7e:	429c      	cmp	r4, r3
 8003f80:	d101      	bne.n	8003f86 <_fflush_r+0x62>
 8003f82:	68ac      	ldr	r4, [r5, #8]
 8003f84:	e7df      	b.n	8003f46 <_fflush_r+0x22>
 8003f86:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <_fflush_r+0x74>)
 8003f88:	429c      	cmp	r4, r3
 8003f8a:	bf08      	it	eq
 8003f8c:	68ec      	ldreq	r4, [r5, #12]
 8003f8e:	e7da      	b.n	8003f46 <_fflush_r+0x22>
 8003f90:	0800473c 	.word	0x0800473c
 8003f94:	0800475c 	.word	0x0800475c
 8003f98:	0800471c 	.word	0x0800471c

08003f9c <std>:
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	b510      	push	{r4, lr}
 8003fa0:	4604      	mov	r4, r0
 8003fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8003fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003faa:	6083      	str	r3, [r0, #8]
 8003fac:	8181      	strh	r1, [r0, #12]
 8003fae:	6643      	str	r3, [r0, #100]	; 0x64
 8003fb0:	81c2      	strh	r2, [r0, #14]
 8003fb2:	6183      	str	r3, [r0, #24]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	2208      	movs	r2, #8
 8003fb8:	305c      	adds	r0, #92	; 0x5c
 8003fba:	f7ff fb6f 	bl	800369c <memset>
 8003fbe:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <std+0x38>)
 8003fc0:	6263      	str	r3, [r4, #36]	; 0x24
 8003fc2:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <std+0x3c>)
 8003fc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <std+0x40>)
 8003fc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fca:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <std+0x44>)
 8003fcc:	6224      	str	r4, [r4, #32]
 8003fce:	6323      	str	r3, [r4, #48]	; 0x30
 8003fd0:	bd10      	pop	{r4, pc}
 8003fd2:	bf00      	nop
 8003fd4:	080044c1 	.word	0x080044c1
 8003fd8:	080044e3 	.word	0x080044e3
 8003fdc:	0800451b 	.word	0x0800451b
 8003fe0:	0800453f 	.word	0x0800453f

08003fe4 <_cleanup_r>:
 8003fe4:	4901      	ldr	r1, [pc, #4]	; (8003fec <_cleanup_r+0x8>)
 8003fe6:	f000 b8af 	b.w	8004148 <_fwalk_reent>
 8003fea:	bf00      	nop
 8003fec:	08003f25 	.word	0x08003f25

08003ff0 <__sfmoreglue>:
 8003ff0:	b570      	push	{r4, r5, r6, lr}
 8003ff2:	2268      	movs	r2, #104	; 0x68
 8003ff4:	1e4d      	subs	r5, r1, #1
 8003ff6:	4355      	muls	r5, r2
 8003ff8:	460e      	mov	r6, r1
 8003ffa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ffe:	f000 f997 	bl	8004330 <_malloc_r>
 8004002:	4604      	mov	r4, r0
 8004004:	b140      	cbz	r0, 8004018 <__sfmoreglue+0x28>
 8004006:	2100      	movs	r1, #0
 8004008:	e9c0 1600 	strd	r1, r6, [r0]
 800400c:	300c      	adds	r0, #12
 800400e:	60a0      	str	r0, [r4, #8]
 8004010:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004014:	f7ff fb42 	bl	800369c <memset>
 8004018:	4620      	mov	r0, r4
 800401a:	bd70      	pop	{r4, r5, r6, pc}

0800401c <__sfp_lock_acquire>:
 800401c:	4801      	ldr	r0, [pc, #4]	; (8004024 <__sfp_lock_acquire+0x8>)
 800401e:	f000 b8b3 	b.w	8004188 <__retarget_lock_acquire_recursive>
 8004022:	bf00      	nop
 8004024:	200005fd 	.word	0x200005fd

08004028 <__sfp_lock_release>:
 8004028:	4801      	ldr	r0, [pc, #4]	; (8004030 <__sfp_lock_release+0x8>)
 800402a:	f000 b8ae 	b.w	800418a <__retarget_lock_release_recursive>
 800402e:	bf00      	nop
 8004030:	200005fd 	.word	0x200005fd

08004034 <__sinit_lock_acquire>:
 8004034:	4801      	ldr	r0, [pc, #4]	; (800403c <__sinit_lock_acquire+0x8>)
 8004036:	f000 b8a7 	b.w	8004188 <__retarget_lock_acquire_recursive>
 800403a:	bf00      	nop
 800403c:	200005fe 	.word	0x200005fe

08004040 <__sinit_lock_release>:
 8004040:	4801      	ldr	r0, [pc, #4]	; (8004048 <__sinit_lock_release+0x8>)
 8004042:	f000 b8a2 	b.w	800418a <__retarget_lock_release_recursive>
 8004046:	bf00      	nop
 8004048:	200005fe 	.word	0x200005fe

0800404c <__sinit>:
 800404c:	b510      	push	{r4, lr}
 800404e:	4604      	mov	r4, r0
 8004050:	f7ff fff0 	bl	8004034 <__sinit_lock_acquire>
 8004054:	69a3      	ldr	r3, [r4, #24]
 8004056:	b11b      	cbz	r3, 8004060 <__sinit+0x14>
 8004058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800405c:	f7ff bff0 	b.w	8004040 <__sinit_lock_release>
 8004060:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004064:	6523      	str	r3, [r4, #80]	; 0x50
 8004066:	4b13      	ldr	r3, [pc, #76]	; (80040b4 <__sinit+0x68>)
 8004068:	4a13      	ldr	r2, [pc, #76]	; (80040b8 <__sinit+0x6c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	62a2      	str	r2, [r4, #40]	; 0x28
 800406e:	42a3      	cmp	r3, r4
 8004070:	bf04      	itt	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	61a3      	streq	r3, [r4, #24]
 8004076:	4620      	mov	r0, r4
 8004078:	f000 f820 	bl	80040bc <__sfp>
 800407c:	6060      	str	r0, [r4, #4]
 800407e:	4620      	mov	r0, r4
 8004080:	f000 f81c 	bl	80040bc <__sfp>
 8004084:	60a0      	str	r0, [r4, #8]
 8004086:	4620      	mov	r0, r4
 8004088:	f000 f818 	bl	80040bc <__sfp>
 800408c:	2200      	movs	r2, #0
 800408e:	60e0      	str	r0, [r4, #12]
 8004090:	2104      	movs	r1, #4
 8004092:	6860      	ldr	r0, [r4, #4]
 8004094:	f7ff ff82 	bl	8003f9c <std>
 8004098:	68a0      	ldr	r0, [r4, #8]
 800409a:	2201      	movs	r2, #1
 800409c:	2109      	movs	r1, #9
 800409e:	f7ff ff7d 	bl	8003f9c <std>
 80040a2:	68e0      	ldr	r0, [r4, #12]
 80040a4:	2202      	movs	r2, #2
 80040a6:	2112      	movs	r1, #18
 80040a8:	f7ff ff78 	bl	8003f9c <std>
 80040ac:	2301      	movs	r3, #1
 80040ae:	61a3      	str	r3, [r4, #24]
 80040b0:	e7d2      	b.n	8004058 <__sinit+0xc>
 80040b2:	bf00      	nop
 80040b4:	080046e4 	.word	0x080046e4
 80040b8:	08003fe5 	.word	0x08003fe5

080040bc <__sfp>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	4607      	mov	r7, r0
 80040c0:	f7ff ffac 	bl	800401c <__sfp_lock_acquire>
 80040c4:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <__sfp+0x84>)
 80040c6:	681e      	ldr	r6, [r3, #0]
 80040c8:	69b3      	ldr	r3, [r6, #24]
 80040ca:	b913      	cbnz	r3, 80040d2 <__sfp+0x16>
 80040cc:	4630      	mov	r0, r6
 80040ce:	f7ff ffbd 	bl	800404c <__sinit>
 80040d2:	3648      	adds	r6, #72	; 0x48
 80040d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80040d8:	3b01      	subs	r3, #1
 80040da:	d503      	bpl.n	80040e4 <__sfp+0x28>
 80040dc:	6833      	ldr	r3, [r6, #0]
 80040de:	b30b      	cbz	r3, 8004124 <__sfp+0x68>
 80040e0:	6836      	ldr	r6, [r6, #0]
 80040e2:	e7f7      	b.n	80040d4 <__sfp+0x18>
 80040e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80040e8:	b9d5      	cbnz	r5, 8004120 <__sfp+0x64>
 80040ea:	4b16      	ldr	r3, [pc, #88]	; (8004144 <__sfp+0x88>)
 80040ec:	60e3      	str	r3, [r4, #12]
 80040ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040f2:	6665      	str	r5, [r4, #100]	; 0x64
 80040f4:	f000 f847 	bl	8004186 <__retarget_lock_init_recursive>
 80040f8:	f7ff ff96 	bl	8004028 <__sfp_lock_release>
 80040fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004100:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004104:	6025      	str	r5, [r4, #0]
 8004106:	61a5      	str	r5, [r4, #24]
 8004108:	2208      	movs	r2, #8
 800410a:	4629      	mov	r1, r5
 800410c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004110:	f7ff fac4 	bl	800369c <memset>
 8004114:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004118:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800411c:	4620      	mov	r0, r4
 800411e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004120:	3468      	adds	r4, #104	; 0x68
 8004122:	e7d9      	b.n	80040d8 <__sfp+0x1c>
 8004124:	2104      	movs	r1, #4
 8004126:	4638      	mov	r0, r7
 8004128:	f7ff ff62 	bl	8003ff0 <__sfmoreglue>
 800412c:	4604      	mov	r4, r0
 800412e:	6030      	str	r0, [r6, #0]
 8004130:	2800      	cmp	r0, #0
 8004132:	d1d5      	bne.n	80040e0 <__sfp+0x24>
 8004134:	f7ff ff78 	bl	8004028 <__sfp_lock_release>
 8004138:	230c      	movs	r3, #12
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	e7ee      	b.n	800411c <__sfp+0x60>
 800413e:	bf00      	nop
 8004140:	080046e4 	.word	0x080046e4
 8004144:	ffff0001 	.word	0xffff0001

08004148 <_fwalk_reent>:
 8004148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800414c:	4606      	mov	r6, r0
 800414e:	4688      	mov	r8, r1
 8004150:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004154:	2700      	movs	r7, #0
 8004156:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800415a:	f1b9 0901 	subs.w	r9, r9, #1
 800415e:	d505      	bpl.n	800416c <_fwalk_reent+0x24>
 8004160:	6824      	ldr	r4, [r4, #0]
 8004162:	2c00      	cmp	r4, #0
 8004164:	d1f7      	bne.n	8004156 <_fwalk_reent+0xe>
 8004166:	4638      	mov	r0, r7
 8004168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800416c:	89ab      	ldrh	r3, [r5, #12]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d907      	bls.n	8004182 <_fwalk_reent+0x3a>
 8004172:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004176:	3301      	adds	r3, #1
 8004178:	d003      	beq.n	8004182 <_fwalk_reent+0x3a>
 800417a:	4629      	mov	r1, r5
 800417c:	4630      	mov	r0, r6
 800417e:	47c0      	blx	r8
 8004180:	4307      	orrs	r7, r0
 8004182:	3568      	adds	r5, #104	; 0x68
 8004184:	e7e9      	b.n	800415a <_fwalk_reent+0x12>

08004186 <__retarget_lock_init_recursive>:
 8004186:	4770      	bx	lr

08004188 <__retarget_lock_acquire_recursive>:
 8004188:	4770      	bx	lr

0800418a <__retarget_lock_release_recursive>:
 800418a:	4770      	bx	lr

0800418c <__swhatbuf_r>:
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	460e      	mov	r6, r1
 8004190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004194:	2900      	cmp	r1, #0
 8004196:	b096      	sub	sp, #88	; 0x58
 8004198:	4614      	mov	r4, r2
 800419a:	461d      	mov	r5, r3
 800419c:	da08      	bge.n	80041b0 <__swhatbuf_r+0x24>
 800419e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	602a      	str	r2, [r5, #0]
 80041a6:	061a      	lsls	r2, r3, #24
 80041a8:	d410      	bmi.n	80041cc <__swhatbuf_r+0x40>
 80041aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ae:	e00e      	b.n	80041ce <__swhatbuf_r+0x42>
 80041b0:	466a      	mov	r2, sp
 80041b2:	f000 f9eb 	bl	800458c <_fstat_r>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	dbf1      	blt.n	800419e <__swhatbuf_r+0x12>
 80041ba:	9a01      	ldr	r2, [sp, #4]
 80041bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80041c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80041c4:	425a      	negs	r2, r3
 80041c6:	415a      	adcs	r2, r3
 80041c8:	602a      	str	r2, [r5, #0]
 80041ca:	e7ee      	b.n	80041aa <__swhatbuf_r+0x1e>
 80041cc:	2340      	movs	r3, #64	; 0x40
 80041ce:	2000      	movs	r0, #0
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	b016      	add	sp, #88	; 0x58
 80041d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080041d8 <__smakebuf_r>:
 80041d8:	898b      	ldrh	r3, [r1, #12]
 80041da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041dc:	079d      	lsls	r5, r3, #30
 80041de:	4606      	mov	r6, r0
 80041e0:	460c      	mov	r4, r1
 80041e2:	d507      	bpl.n	80041f4 <__smakebuf_r+0x1c>
 80041e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	6123      	str	r3, [r4, #16]
 80041ec:	2301      	movs	r3, #1
 80041ee:	6163      	str	r3, [r4, #20]
 80041f0:	b002      	add	sp, #8
 80041f2:	bd70      	pop	{r4, r5, r6, pc}
 80041f4:	ab01      	add	r3, sp, #4
 80041f6:	466a      	mov	r2, sp
 80041f8:	f7ff ffc8 	bl	800418c <__swhatbuf_r>
 80041fc:	9900      	ldr	r1, [sp, #0]
 80041fe:	4605      	mov	r5, r0
 8004200:	4630      	mov	r0, r6
 8004202:	f000 f895 	bl	8004330 <_malloc_r>
 8004206:	b948      	cbnz	r0, 800421c <__smakebuf_r+0x44>
 8004208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800420c:	059a      	lsls	r2, r3, #22
 800420e:	d4ef      	bmi.n	80041f0 <__smakebuf_r+0x18>
 8004210:	f023 0303 	bic.w	r3, r3, #3
 8004214:	f043 0302 	orr.w	r3, r3, #2
 8004218:	81a3      	strh	r3, [r4, #12]
 800421a:	e7e3      	b.n	80041e4 <__smakebuf_r+0xc>
 800421c:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <__smakebuf_r+0x7c>)
 800421e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004220:	89a3      	ldrh	r3, [r4, #12]
 8004222:	6020      	str	r0, [r4, #0]
 8004224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004228:	81a3      	strh	r3, [r4, #12]
 800422a:	9b00      	ldr	r3, [sp, #0]
 800422c:	6163      	str	r3, [r4, #20]
 800422e:	9b01      	ldr	r3, [sp, #4]
 8004230:	6120      	str	r0, [r4, #16]
 8004232:	b15b      	cbz	r3, 800424c <__smakebuf_r+0x74>
 8004234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004238:	4630      	mov	r0, r6
 800423a:	f000 f9b9 	bl	80045b0 <_isatty_r>
 800423e:	b128      	cbz	r0, 800424c <__smakebuf_r+0x74>
 8004240:	89a3      	ldrh	r3, [r4, #12]
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	81a3      	strh	r3, [r4, #12]
 800424c:	89a0      	ldrh	r0, [r4, #12]
 800424e:	4305      	orrs	r5, r0
 8004250:	81a5      	strh	r5, [r4, #12]
 8004252:	e7cd      	b.n	80041f0 <__smakebuf_r+0x18>
 8004254:	08003fe5 	.word	0x08003fe5

08004258 <_free_r>:
 8004258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800425a:	2900      	cmp	r1, #0
 800425c:	d044      	beq.n	80042e8 <_free_r+0x90>
 800425e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004262:	9001      	str	r0, [sp, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f1a1 0404 	sub.w	r4, r1, #4
 800426a:	bfb8      	it	lt
 800426c:	18e4      	addlt	r4, r4, r3
 800426e:	f000 f9c1 	bl	80045f4 <__malloc_lock>
 8004272:	4a1e      	ldr	r2, [pc, #120]	; (80042ec <_free_r+0x94>)
 8004274:	9801      	ldr	r0, [sp, #4]
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	b933      	cbnz	r3, 8004288 <_free_r+0x30>
 800427a:	6063      	str	r3, [r4, #4]
 800427c:	6014      	str	r4, [r2, #0]
 800427e:	b003      	add	sp, #12
 8004280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004284:	f000 b9bc 	b.w	8004600 <__malloc_unlock>
 8004288:	42a3      	cmp	r3, r4
 800428a:	d908      	bls.n	800429e <_free_r+0x46>
 800428c:	6825      	ldr	r5, [r4, #0]
 800428e:	1961      	adds	r1, r4, r5
 8004290:	428b      	cmp	r3, r1
 8004292:	bf01      	itttt	eq
 8004294:	6819      	ldreq	r1, [r3, #0]
 8004296:	685b      	ldreq	r3, [r3, #4]
 8004298:	1949      	addeq	r1, r1, r5
 800429a:	6021      	streq	r1, [r4, #0]
 800429c:	e7ed      	b.n	800427a <_free_r+0x22>
 800429e:	461a      	mov	r2, r3
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	b10b      	cbz	r3, 80042a8 <_free_r+0x50>
 80042a4:	42a3      	cmp	r3, r4
 80042a6:	d9fa      	bls.n	800429e <_free_r+0x46>
 80042a8:	6811      	ldr	r1, [r2, #0]
 80042aa:	1855      	adds	r5, r2, r1
 80042ac:	42a5      	cmp	r5, r4
 80042ae:	d10b      	bne.n	80042c8 <_free_r+0x70>
 80042b0:	6824      	ldr	r4, [r4, #0]
 80042b2:	4421      	add	r1, r4
 80042b4:	1854      	adds	r4, r2, r1
 80042b6:	42a3      	cmp	r3, r4
 80042b8:	6011      	str	r1, [r2, #0]
 80042ba:	d1e0      	bne.n	800427e <_free_r+0x26>
 80042bc:	681c      	ldr	r4, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	6053      	str	r3, [r2, #4]
 80042c2:	4421      	add	r1, r4
 80042c4:	6011      	str	r1, [r2, #0]
 80042c6:	e7da      	b.n	800427e <_free_r+0x26>
 80042c8:	d902      	bls.n	80042d0 <_free_r+0x78>
 80042ca:	230c      	movs	r3, #12
 80042cc:	6003      	str	r3, [r0, #0]
 80042ce:	e7d6      	b.n	800427e <_free_r+0x26>
 80042d0:	6825      	ldr	r5, [r4, #0]
 80042d2:	1961      	adds	r1, r4, r5
 80042d4:	428b      	cmp	r3, r1
 80042d6:	bf04      	itt	eq
 80042d8:	6819      	ldreq	r1, [r3, #0]
 80042da:	685b      	ldreq	r3, [r3, #4]
 80042dc:	6063      	str	r3, [r4, #4]
 80042de:	bf04      	itt	eq
 80042e0:	1949      	addeq	r1, r1, r5
 80042e2:	6021      	streq	r1, [r4, #0]
 80042e4:	6054      	str	r4, [r2, #4]
 80042e6:	e7ca      	b.n	800427e <_free_r+0x26>
 80042e8:	b003      	add	sp, #12
 80042ea:	bd30      	pop	{r4, r5, pc}
 80042ec:	20000600 	.word	0x20000600

080042f0 <sbrk_aligned>:
 80042f0:	b570      	push	{r4, r5, r6, lr}
 80042f2:	4e0e      	ldr	r6, [pc, #56]	; (800432c <sbrk_aligned+0x3c>)
 80042f4:	460c      	mov	r4, r1
 80042f6:	6831      	ldr	r1, [r6, #0]
 80042f8:	4605      	mov	r5, r0
 80042fa:	b911      	cbnz	r1, 8004302 <sbrk_aligned+0x12>
 80042fc:	f000 f88c 	bl	8004418 <_sbrk_r>
 8004300:	6030      	str	r0, [r6, #0]
 8004302:	4621      	mov	r1, r4
 8004304:	4628      	mov	r0, r5
 8004306:	f000 f887 	bl	8004418 <_sbrk_r>
 800430a:	1c43      	adds	r3, r0, #1
 800430c:	d00a      	beq.n	8004324 <sbrk_aligned+0x34>
 800430e:	1cc4      	adds	r4, r0, #3
 8004310:	f024 0403 	bic.w	r4, r4, #3
 8004314:	42a0      	cmp	r0, r4
 8004316:	d007      	beq.n	8004328 <sbrk_aligned+0x38>
 8004318:	1a21      	subs	r1, r4, r0
 800431a:	4628      	mov	r0, r5
 800431c:	f000 f87c 	bl	8004418 <_sbrk_r>
 8004320:	3001      	adds	r0, #1
 8004322:	d101      	bne.n	8004328 <sbrk_aligned+0x38>
 8004324:	f04f 34ff 	mov.w	r4, #4294967295
 8004328:	4620      	mov	r0, r4
 800432a:	bd70      	pop	{r4, r5, r6, pc}
 800432c:	20000604 	.word	0x20000604

08004330 <_malloc_r>:
 8004330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004334:	1ccd      	adds	r5, r1, #3
 8004336:	f025 0503 	bic.w	r5, r5, #3
 800433a:	3508      	adds	r5, #8
 800433c:	2d0c      	cmp	r5, #12
 800433e:	bf38      	it	cc
 8004340:	250c      	movcc	r5, #12
 8004342:	2d00      	cmp	r5, #0
 8004344:	4607      	mov	r7, r0
 8004346:	db01      	blt.n	800434c <_malloc_r+0x1c>
 8004348:	42a9      	cmp	r1, r5
 800434a:	d905      	bls.n	8004358 <_malloc_r+0x28>
 800434c:	230c      	movs	r3, #12
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	2600      	movs	r6, #0
 8004352:	4630      	mov	r0, r6
 8004354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004358:	4e2e      	ldr	r6, [pc, #184]	; (8004414 <_malloc_r+0xe4>)
 800435a:	f000 f94b 	bl	80045f4 <__malloc_lock>
 800435e:	6833      	ldr	r3, [r6, #0]
 8004360:	461c      	mov	r4, r3
 8004362:	bb34      	cbnz	r4, 80043b2 <_malloc_r+0x82>
 8004364:	4629      	mov	r1, r5
 8004366:	4638      	mov	r0, r7
 8004368:	f7ff ffc2 	bl	80042f0 <sbrk_aligned>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	4604      	mov	r4, r0
 8004370:	d14d      	bne.n	800440e <_malloc_r+0xde>
 8004372:	6834      	ldr	r4, [r6, #0]
 8004374:	4626      	mov	r6, r4
 8004376:	2e00      	cmp	r6, #0
 8004378:	d140      	bne.n	80043fc <_malloc_r+0xcc>
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	4631      	mov	r1, r6
 800437e:	4638      	mov	r0, r7
 8004380:	eb04 0803 	add.w	r8, r4, r3
 8004384:	f000 f848 	bl	8004418 <_sbrk_r>
 8004388:	4580      	cmp	r8, r0
 800438a:	d13a      	bne.n	8004402 <_malloc_r+0xd2>
 800438c:	6821      	ldr	r1, [r4, #0]
 800438e:	3503      	adds	r5, #3
 8004390:	1a6d      	subs	r5, r5, r1
 8004392:	f025 0503 	bic.w	r5, r5, #3
 8004396:	3508      	adds	r5, #8
 8004398:	2d0c      	cmp	r5, #12
 800439a:	bf38      	it	cc
 800439c:	250c      	movcc	r5, #12
 800439e:	4629      	mov	r1, r5
 80043a0:	4638      	mov	r0, r7
 80043a2:	f7ff ffa5 	bl	80042f0 <sbrk_aligned>
 80043a6:	3001      	adds	r0, #1
 80043a8:	d02b      	beq.n	8004402 <_malloc_r+0xd2>
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	442b      	add	r3, r5
 80043ae:	6023      	str	r3, [r4, #0]
 80043b0:	e00e      	b.n	80043d0 <_malloc_r+0xa0>
 80043b2:	6822      	ldr	r2, [r4, #0]
 80043b4:	1b52      	subs	r2, r2, r5
 80043b6:	d41e      	bmi.n	80043f6 <_malloc_r+0xc6>
 80043b8:	2a0b      	cmp	r2, #11
 80043ba:	d916      	bls.n	80043ea <_malloc_r+0xba>
 80043bc:	1961      	adds	r1, r4, r5
 80043be:	42a3      	cmp	r3, r4
 80043c0:	6025      	str	r5, [r4, #0]
 80043c2:	bf18      	it	ne
 80043c4:	6059      	strne	r1, [r3, #4]
 80043c6:	6863      	ldr	r3, [r4, #4]
 80043c8:	bf08      	it	eq
 80043ca:	6031      	streq	r1, [r6, #0]
 80043cc:	5162      	str	r2, [r4, r5]
 80043ce:	604b      	str	r3, [r1, #4]
 80043d0:	4638      	mov	r0, r7
 80043d2:	f104 060b 	add.w	r6, r4, #11
 80043d6:	f000 f913 	bl	8004600 <__malloc_unlock>
 80043da:	f026 0607 	bic.w	r6, r6, #7
 80043de:	1d23      	adds	r3, r4, #4
 80043e0:	1af2      	subs	r2, r6, r3
 80043e2:	d0b6      	beq.n	8004352 <_malloc_r+0x22>
 80043e4:	1b9b      	subs	r3, r3, r6
 80043e6:	50a3      	str	r3, [r4, r2]
 80043e8:	e7b3      	b.n	8004352 <_malloc_r+0x22>
 80043ea:	6862      	ldr	r2, [r4, #4]
 80043ec:	42a3      	cmp	r3, r4
 80043ee:	bf0c      	ite	eq
 80043f0:	6032      	streq	r2, [r6, #0]
 80043f2:	605a      	strne	r2, [r3, #4]
 80043f4:	e7ec      	b.n	80043d0 <_malloc_r+0xa0>
 80043f6:	4623      	mov	r3, r4
 80043f8:	6864      	ldr	r4, [r4, #4]
 80043fa:	e7b2      	b.n	8004362 <_malloc_r+0x32>
 80043fc:	4634      	mov	r4, r6
 80043fe:	6876      	ldr	r6, [r6, #4]
 8004400:	e7b9      	b.n	8004376 <_malloc_r+0x46>
 8004402:	230c      	movs	r3, #12
 8004404:	603b      	str	r3, [r7, #0]
 8004406:	4638      	mov	r0, r7
 8004408:	f000 f8fa 	bl	8004600 <__malloc_unlock>
 800440c:	e7a1      	b.n	8004352 <_malloc_r+0x22>
 800440e:	6025      	str	r5, [r4, #0]
 8004410:	e7de      	b.n	80043d0 <_malloc_r+0xa0>
 8004412:	bf00      	nop
 8004414:	20000600 	.word	0x20000600

08004418 <_sbrk_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4d06      	ldr	r5, [pc, #24]	; (8004434 <_sbrk_r+0x1c>)
 800441c:	2300      	movs	r3, #0
 800441e:	4604      	mov	r4, r0
 8004420:	4608      	mov	r0, r1
 8004422:	602b      	str	r3, [r5, #0]
 8004424:	f7fc fbec 	bl	8000c00 <_sbrk>
 8004428:	1c43      	adds	r3, r0, #1
 800442a:	d102      	bne.n	8004432 <_sbrk_r+0x1a>
 800442c:	682b      	ldr	r3, [r5, #0]
 800442e:	b103      	cbz	r3, 8004432 <_sbrk_r+0x1a>
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	bd38      	pop	{r3, r4, r5, pc}
 8004434:	20000608 	.word	0x20000608

08004438 <_raise_r>:
 8004438:	291f      	cmp	r1, #31
 800443a:	b538      	push	{r3, r4, r5, lr}
 800443c:	4604      	mov	r4, r0
 800443e:	460d      	mov	r5, r1
 8004440:	d904      	bls.n	800444c <_raise_r+0x14>
 8004442:	2316      	movs	r3, #22
 8004444:	6003      	str	r3, [r0, #0]
 8004446:	f04f 30ff 	mov.w	r0, #4294967295
 800444a:	bd38      	pop	{r3, r4, r5, pc}
 800444c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800444e:	b112      	cbz	r2, 8004456 <_raise_r+0x1e>
 8004450:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004454:	b94b      	cbnz	r3, 800446a <_raise_r+0x32>
 8004456:	4620      	mov	r0, r4
 8004458:	f000 f830 	bl	80044bc <_getpid_r>
 800445c:	462a      	mov	r2, r5
 800445e:	4601      	mov	r1, r0
 8004460:	4620      	mov	r0, r4
 8004462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004466:	f000 b817 	b.w	8004498 <_kill_r>
 800446a:	2b01      	cmp	r3, #1
 800446c:	d00a      	beq.n	8004484 <_raise_r+0x4c>
 800446e:	1c59      	adds	r1, r3, #1
 8004470:	d103      	bne.n	800447a <_raise_r+0x42>
 8004472:	2316      	movs	r3, #22
 8004474:	6003      	str	r3, [r0, #0]
 8004476:	2001      	movs	r0, #1
 8004478:	e7e7      	b.n	800444a <_raise_r+0x12>
 800447a:	2400      	movs	r4, #0
 800447c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004480:	4628      	mov	r0, r5
 8004482:	4798      	blx	r3
 8004484:	2000      	movs	r0, #0
 8004486:	e7e0      	b.n	800444a <_raise_r+0x12>

08004488 <raise>:
 8004488:	4b02      	ldr	r3, [pc, #8]	; (8004494 <raise+0xc>)
 800448a:	4601      	mov	r1, r0
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	f7ff bfd3 	b.w	8004438 <_raise_r>
 8004492:	bf00      	nop
 8004494:	20000014 	.word	0x20000014

08004498 <_kill_r>:
 8004498:	b538      	push	{r3, r4, r5, lr}
 800449a:	4d07      	ldr	r5, [pc, #28]	; (80044b8 <_kill_r+0x20>)
 800449c:	2300      	movs	r3, #0
 800449e:	4604      	mov	r4, r0
 80044a0:	4608      	mov	r0, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	602b      	str	r3, [r5, #0]
 80044a6:	f7fc fb23 	bl	8000af0 <_kill>
 80044aa:	1c43      	adds	r3, r0, #1
 80044ac:	d102      	bne.n	80044b4 <_kill_r+0x1c>
 80044ae:	682b      	ldr	r3, [r5, #0]
 80044b0:	b103      	cbz	r3, 80044b4 <_kill_r+0x1c>
 80044b2:	6023      	str	r3, [r4, #0]
 80044b4:	bd38      	pop	{r3, r4, r5, pc}
 80044b6:	bf00      	nop
 80044b8:	20000608 	.word	0x20000608

080044bc <_getpid_r>:
 80044bc:	f7fc bb10 	b.w	8000ae0 <_getpid>

080044c0 <__sread>:
 80044c0:	b510      	push	{r4, lr}
 80044c2:	460c      	mov	r4, r1
 80044c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c8:	f000 f8a0 	bl	800460c <_read_r>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	bfab      	itete	ge
 80044d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044d2:	89a3      	ldrhlt	r3, [r4, #12]
 80044d4:	181b      	addge	r3, r3, r0
 80044d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044da:	bfac      	ite	ge
 80044dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80044de:	81a3      	strhlt	r3, [r4, #12]
 80044e0:	bd10      	pop	{r4, pc}

080044e2 <__swrite>:
 80044e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e6:	461f      	mov	r7, r3
 80044e8:	898b      	ldrh	r3, [r1, #12]
 80044ea:	05db      	lsls	r3, r3, #23
 80044ec:	4605      	mov	r5, r0
 80044ee:	460c      	mov	r4, r1
 80044f0:	4616      	mov	r6, r2
 80044f2:	d505      	bpl.n	8004500 <__swrite+0x1e>
 80044f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f8:	2302      	movs	r3, #2
 80044fa:	2200      	movs	r2, #0
 80044fc:	f000 f868 	bl	80045d0 <_lseek_r>
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800450a:	81a3      	strh	r3, [r4, #12]
 800450c:	4632      	mov	r2, r6
 800450e:	463b      	mov	r3, r7
 8004510:	4628      	mov	r0, r5
 8004512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004516:	f000 b817 	b.w	8004548 <_write_r>

0800451a <__sseek>:
 800451a:	b510      	push	{r4, lr}
 800451c:	460c      	mov	r4, r1
 800451e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004522:	f000 f855 	bl	80045d0 <_lseek_r>
 8004526:	1c43      	adds	r3, r0, #1
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	bf15      	itete	ne
 800452c:	6560      	strne	r0, [r4, #84]	; 0x54
 800452e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004532:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004536:	81a3      	strheq	r3, [r4, #12]
 8004538:	bf18      	it	ne
 800453a:	81a3      	strhne	r3, [r4, #12]
 800453c:	bd10      	pop	{r4, pc}

0800453e <__sclose>:
 800453e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004542:	f000 b813 	b.w	800456c <_close_r>
	...

08004548 <_write_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4d07      	ldr	r5, [pc, #28]	; (8004568 <_write_r+0x20>)
 800454c:	4604      	mov	r4, r0
 800454e:	4608      	mov	r0, r1
 8004550:	4611      	mov	r1, r2
 8004552:	2200      	movs	r2, #0
 8004554:	602a      	str	r2, [r5, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	f7fc fb01 	bl	8000b5e <_write>
 800455c:	1c43      	adds	r3, r0, #1
 800455e:	d102      	bne.n	8004566 <_write_r+0x1e>
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	b103      	cbz	r3, 8004566 <_write_r+0x1e>
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	bd38      	pop	{r3, r4, r5, pc}
 8004568:	20000608 	.word	0x20000608

0800456c <_close_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d06      	ldr	r5, [pc, #24]	; (8004588 <_close_r+0x1c>)
 8004570:	2300      	movs	r3, #0
 8004572:	4604      	mov	r4, r0
 8004574:	4608      	mov	r0, r1
 8004576:	602b      	str	r3, [r5, #0]
 8004578:	f7fc fb0d 	bl	8000b96 <_close>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_close_r+0x1a>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	b103      	cbz	r3, 8004586 <_close_r+0x1a>
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	20000608 	.word	0x20000608

0800458c <_fstat_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4d07      	ldr	r5, [pc, #28]	; (80045ac <_fstat_r+0x20>)
 8004590:	2300      	movs	r3, #0
 8004592:	4604      	mov	r4, r0
 8004594:	4608      	mov	r0, r1
 8004596:	4611      	mov	r1, r2
 8004598:	602b      	str	r3, [r5, #0]
 800459a:	f7fc fb08 	bl	8000bae <_fstat>
 800459e:	1c43      	adds	r3, r0, #1
 80045a0:	d102      	bne.n	80045a8 <_fstat_r+0x1c>
 80045a2:	682b      	ldr	r3, [r5, #0]
 80045a4:	b103      	cbz	r3, 80045a8 <_fstat_r+0x1c>
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	bd38      	pop	{r3, r4, r5, pc}
 80045aa:	bf00      	nop
 80045ac:	20000608 	.word	0x20000608

080045b0 <_isatty_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	4d06      	ldr	r5, [pc, #24]	; (80045cc <_isatty_r+0x1c>)
 80045b4:	2300      	movs	r3, #0
 80045b6:	4604      	mov	r4, r0
 80045b8:	4608      	mov	r0, r1
 80045ba:	602b      	str	r3, [r5, #0]
 80045bc:	f7fc fb07 	bl	8000bce <_isatty>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d102      	bne.n	80045ca <_isatty_r+0x1a>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	b103      	cbz	r3, 80045ca <_isatty_r+0x1a>
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	bd38      	pop	{r3, r4, r5, pc}
 80045cc:	20000608 	.word	0x20000608

080045d0 <_lseek_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	4d07      	ldr	r5, [pc, #28]	; (80045f0 <_lseek_r+0x20>)
 80045d4:	4604      	mov	r4, r0
 80045d6:	4608      	mov	r0, r1
 80045d8:	4611      	mov	r1, r2
 80045da:	2200      	movs	r2, #0
 80045dc:	602a      	str	r2, [r5, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	f7fc fb00 	bl	8000be4 <_lseek>
 80045e4:	1c43      	adds	r3, r0, #1
 80045e6:	d102      	bne.n	80045ee <_lseek_r+0x1e>
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	b103      	cbz	r3, 80045ee <_lseek_r+0x1e>
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	bd38      	pop	{r3, r4, r5, pc}
 80045f0:	20000608 	.word	0x20000608

080045f4 <__malloc_lock>:
 80045f4:	4801      	ldr	r0, [pc, #4]	; (80045fc <__malloc_lock+0x8>)
 80045f6:	f7ff bdc7 	b.w	8004188 <__retarget_lock_acquire_recursive>
 80045fa:	bf00      	nop
 80045fc:	200005fc 	.word	0x200005fc

08004600 <__malloc_unlock>:
 8004600:	4801      	ldr	r0, [pc, #4]	; (8004608 <__malloc_unlock+0x8>)
 8004602:	f7ff bdc2 	b.w	800418a <__retarget_lock_release_recursive>
 8004606:	bf00      	nop
 8004608:	200005fc 	.word	0x200005fc

0800460c <_read_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4d07      	ldr	r5, [pc, #28]	; (800462c <_read_r+0x20>)
 8004610:	4604      	mov	r4, r0
 8004612:	4608      	mov	r0, r1
 8004614:	4611      	mov	r1, r2
 8004616:	2200      	movs	r2, #0
 8004618:	602a      	str	r2, [r5, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	f7fc fa82 	bl	8000b24 <_read>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d102      	bne.n	800462a <_read_r+0x1e>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	b103      	cbz	r3, 800462a <_read_r+0x1e>
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	bd38      	pop	{r3, r4, r5, pc}
 800462c:	20000608 	.word	0x20000608

08004630 <_init>:
 8004630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004632:	bf00      	nop
 8004634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004636:	bc08      	pop	{r3}
 8004638:	469e      	mov	lr, r3
 800463a:	4770      	bx	lr

0800463c <_fini>:
 800463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463e:	bf00      	nop
 8004640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004642:	bc08      	pop	{r3}
 8004644:	469e      	mov	lr, r3
 8004646:	4770      	bx	lr

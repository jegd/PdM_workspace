
Ejercicio_TP_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000464c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004810  08004810  00014810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004900  08004900  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08004900  08004900  00014900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004908  08004908  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004908  08004908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  20000024  08004934  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08004934  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105a3  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002463  00000000  00000000  000305f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00032a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  00033798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d10  00000000  00000000  00034400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120f3  00000000  00000000  00057110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd92e  00000000  00000000  00069203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136b31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000374c  00000000  00000000  00136b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080047f8 	.word	0x080047f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	080047f8 	.word	0x080047f8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fd6f 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f813 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f87d 	bl	8000614 <MX_GPIO_Init>
  uartInit();
 800051a:	f000 fcb1 	bl	8000e80 <uartInit>
  MX_I2C1_Init();
 800051e:	f000 fabb 	bl	8000a98 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  init_adxl(DIRECCION_ADXL);
 8000522:	20a6      	movs	r0, #166	; 0xa6
 8000524:	f000 faf0 	bl	8000b08 <init_adxl>
  int8_t X;
  /* USER CODE END 2 */
  X=estadoX();
 8000528:	f000 fbce 	bl	8000cc8 <estadoX>
 800052c:	4603      	mov	r3, r0
 800052e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  X=estadoX();
 8000530:	f000 fbca 	bl	8000cc8 <estadoX>
 8000534:	4603      	mov	r3, r0
 8000536:	71fb      	strb	r3, [r7, #7]
 8000538:	e7fa      	b.n	8000530 <main+0x28>
	...

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 031c 	add.w	r3, r7, #28
 8000546:	2234      	movs	r2, #52	; 0x34
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 f94c 	bl	80047e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 0308 	add.w	r3, r7, #8
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b29      	ldr	r3, [pc, #164]	; (800060c <SystemClock_Config+0xd0>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a28      	ldr	r2, [pc, #160]	; (800060c <SystemClock_Config+0xd0>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b26      	ldr	r3, [pc, #152]	; (800060c <SystemClock_Config+0xd0>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	4b23      	ldr	r3, [pc, #140]	; (8000610 <SystemClock_Config+0xd4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a22      	ldr	r2, [pc, #136]	; (8000610 <SystemClock_Config+0xd4>)
 8000586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <SystemClock_Config+0xd4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800059c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005b0:	23a8      	movs	r3, #168	; 0xa8
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b8:	2307      	movs	r3, #7
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 ff8f 	bl	80034e8 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d0:	f000 f8ce 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2105      	movs	r1, #5
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f904 	bl	8002800 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005fe:	f000 f8b7 	bl	8000770 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08c      	sub	sp, #48	; 0x30
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
 800062e:	4b4c      	ldr	r3, [pc, #304]	; (8000760 <MX_GPIO_Init+0x14c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a4b      	ldr	r2, [pc, #300]	; (8000760 <MX_GPIO_Init+0x14c>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b49      	ldr	r3, [pc, #292]	; (8000760 <MX_GPIO_Init+0x14c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	61bb      	str	r3, [r7, #24]
 8000644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
 800064a:	4b45      	ldr	r3, [pc, #276]	; (8000760 <MX_GPIO_Init+0x14c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a44      	ldr	r2, [pc, #272]	; (8000760 <MX_GPIO_Init+0x14c>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b42      	ldr	r3, [pc, #264]	; (8000760 <MX_GPIO_Init+0x14c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <MX_GPIO_Init+0x14c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a3d      	ldr	r2, [pc, #244]	; (8000760 <MX_GPIO_Init+0x14c>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b3b      	ldr	r3, [pc, #236]	; (8000760 <MX_GPIO_Init+0x14c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	4b37      	ldr	r3, [pc, #220]	; (8000760 <MX_GPIO_Init+0x14c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a36      	ldr	r2, [pc, #216]	; (8000760 <MX_GPIO_Init+0x14c>)
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b34      	ldr	r3, [pc, #208]	; (8000760 <MX_GPIO_Init+0x14c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0308 	and.w	r3, r3, #8
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	4b30      	ldr	r3, [pc, #192]	; (8000760 <MX_GPIO_Init+0x14c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a2f      	ldr	r2, [pc, #188]	; (8000760 <MX_GPIO_Init+0x14c>)
 80006a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <MX_GPIO_Init+0x14c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b29      	ldr	r3, [pc, #164]	; (8000760 <MX_GPIO_Init+0x14c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a28      	ldr	r2, [pc, #160]	; (8000760 <MX_GPIO_Init+0x14c>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <MX_GPIO_Init+0x14c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80006d8:	4822      	ldr	r0, [pc, #136]	; (8000764 <MX_GPIO_Init+0x150>)
 80006da:	f000 ff99 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2140      	movs	r1, #64	; 0x40
 80006e2:	4821      	ldr	r0, [pc, #132]	; (8000768 <MX_GPIO_Init+0x154>)
 80006e4:	f000 ff94 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	481b      	ldr	r0, [pc, #108]	; (800076c <MX_GPIO_Init+0x158>)
 8000700:	f000 fdf2 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000704:	f244 0381 	movw	r3, #16513	; 0x4081
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4811      	ldr	r0, [pc, #68]	; (8000764 <MX_GPIO_Init+0x150>)
 800071e:	f000 fde3 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000722:	2340      	movs	r3, #64	; 0x40
 8000724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	480b      	ldr	r0, [pc, #44]	; (8000768 <MX_GPIO_Init+0x154>)
 800073a:	f000 fdd5 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800073e:	2380      	movs	r3, #128	; 0x80
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000742:	2300      	movs	r3, #0
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_GPIO_Init+0x154>)
 8000752:	f000 fdc9 	bl	80012e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000756:	bf00      	nop
 8000758:	3730      	adds	r7, #48	; 0x30
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40020400 	.word	0x40020400
 8000768:	40021800 	.word	0x40021800
 800076c:	40020800 	.word	0x40020800

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <HAL_MspInit+0x4c>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <HAL_MspInit+0x4c>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_MspInit+0x4c>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_MspInit+0x4c>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a19      	ldr	r2, [pc, #100]	; (8000850 <HAL_I2C_MspInit+0x84>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d12c      	bne.n	8000848 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <HAL_I2C_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <HAL_I2C_MspInit+0x88>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_I2C_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800080a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800080e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000810:	2312      	movs	r3, #18
 8000812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800081c:	2304      	movs	r3, #4
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <HAL_I2C_MspInit+0x8c>)
 8000828:	f000 fd5e 	bl	80012e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_I2C_MspInit+0x88>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <HAL_I2C_MspInit+0x88>)
 8000836:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800083a:	6413      	str	r3, [r2, #64]	; 0x40
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_I2C_MspInit+0x88>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40005400 	.word	0x40005400
 8000854:	40023800 	.word	0x40023800
 8000858:	40020400 	.word	0x40020400

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <HAL_UART_MspInit+0x84>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d12c      	bne.n	80008d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_UART_MspInit+0x88>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_UART_MspInit+0x88>)
 8000888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800088c:	6413      	str	r3, [r2, #64]	; 0x40
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_UART_MspInit+0x88>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_UART_MspInit+0x88>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <HAL_UART_MspInit+0x88>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_UART_MspInit+0x88>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008c8:	2307      	movs	r3, #7
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <HAL_UART_MspInit+0x8c>)
 80008d4:	f000 fd08 	bl	80012e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40004800 	.word	0x40004800
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020c00 	.word	0x40020c00

080008ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0a0      	sub	sp, #128	; 0x80
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	225c      	movs	r2, #92	; 0x5c
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f003 ff6b 	bl	80047e8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800091a:	d14e      	bne.n	80009ba <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800091c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000920:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000922:	2300      	movs	r3, #0
 8000924:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4618      	mov	r0, r3
 800092c:	f002 f882 	bl	8002a34 <HAL_RCCEx_PeriphCLKConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000936:	f7ff ff1b 	bl	8000770 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_PCD_MspInit+0xd8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a20      	ldr	r2, [pc, #128]	; (80009c4 <HAL_PCD_MspInit+0xd8>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_PCD_MspInit+0xd8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000956:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800095a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000968:	230a      	movs	r3, #10
 800096a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000970:	4619      	mov	r1, r3
 8000972:	4815      	ldr	r0, [pc, #84]	; (80009c8 <HAL_PCD_MspInit+0xdc>)
 8000974:	f000 fcb8 	bl	80012e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800098a:	4619      	mov	r1, r3
 800098c:	480e      	ldr	r0, [pc, #56]	; (80009c8 <HAL_PCD_MspInit+0xdc>)
 800098e:	f000 fcab 	bl	80012e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_PCD_MspInit+0xd8>)
 8000994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <HAL_PCD_MspInit+0xd8>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	6353      	str	r3, [r2, #52]	; 0x34
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_PCD_MspInit+0xd8>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_PCD_MspInit+0xd8>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_PCD_MspInit+0xd8>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3780      	adds	r7, #128	; 0x80
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a18:	f000 fb3c 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a4a:	490e      	ldr	r1, [pc, #56]	; (8000a84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a60:	4c0b      	ldr	r4, [pc, #44]	; (8000a90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a6e:	f7ff ffd7 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f003 fe95 	bl	80047a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fd47 	bl	8000508 <main>
  bx  lr    
 8000a7a:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000a7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000a88:	08004910 	.word	0x08004910
  ldr r2, =_sbss
 8000a8c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000a90:	200005f4 	.word	0x200005f4

08000a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC_IRQHandler>
	...

08000a98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000a9e:	4a13      	ldr	r2, [pc, #76]	; (8000aec <MX_I2C1_Init+0x54>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_I2C1_Init+0x58>)
 8000aa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000ad6:	f000 fdb5 	bl	8001644 <HAL_I2C_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ae0:	f7ff fe46 	bl	8000770 <Error_Handler>


  	  */
  /* USER CODE END I2C1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000040 	.word	0x20000040
 8000aec:	40005400 	.word	0x40005400
 8000af0:	000186a0 	.word	0x000186a0

08000af4 <enviar_handle_i2c>:
I2C_HandleTypeDef * enviar_handle_i2c()
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
	return &hi2c1;
 8000af8:	4b02      	ldr	r3, [pc, #8]	; (8000b04 <enviar_handle_i2c+0x10>)
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	20000040 	.word	0x20000040

08000b08 <init_adxl>:
 };
 static eje_t	Eje_Y;
//I2C_HandleTypeDef hi2c1;
//Implementación funciones públicas
 bool_t init_adxl(uint16_t direccion)
 {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	4603      	mov	r3, r0
 8000b10:	80fb      	strh	r3, [r7, #6]
	 assert(&direccion!=NULL);
	 direccion_I2C_ADXL = direccion;
 8000b12:	88fa      	ldrh	r2, [r7, #6]
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <init_adxl+0x8c>)
 8000b16:	801a      	strh	r2, [r3, #0]
	 Modulo_I2C=enviar_handle_i2c();
 8000b18:	f7ff ffec 	bl	8000af4 <enviar_handle_i2c>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a1e      	ldr	r2, [pc, #120]	; (8000b98 <init_adxl+0x90>)
 8000b20:	6013      	str	r3, [r2, #0]
	 MEF_estado_eje_INIT(&Eje_X);
 8000b22:	481e      	ldr	r0, [pc, #120]	; (8000b9c <init_adxl+0x94>)
 8000b24:	f000 f8e2 	bl	8000cec <MEF_estado_eje_INIT>
	 MEF_estado_eje_INIT(&Eje_Y);
 8000b28:	481d      	ldr	r0, [pc, #116]	; (8000ba0 <init_adxl+0x98>)
 8000b2a:	f000 f8df 	bl	8000cec <MEF_estado_eje_INIT>
	  //Seteo del acelerómetro para que empiece a mandar datos
	 // Mandamos a 1 el bit 4 (0x08) del registro 0x2D—POWER_CTL del acelerómetro
	 // para que despierte y empiece a mandar datos
	  uint8_t vec[2]={0x2D,0x08};
 8000b2e:	f640 032d 	movw	r3, #2093	; 0x82d
 8000b32:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(Modulo_I2C,direccion_I2C_ADXL,(uint8_t *)vec, sizeof(vec), TIMEOUT);
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <init_adxl+0x90>)
 8000b36:	6818      	ldr	r0, [r3, #0]
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <init_adxl+0x8c>)
 8000b3a:	8819      	ldrh	r1, [r3, #0]
 8000b3c:	f107 020c 	add.w	r2, r7, #12
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2302      	movs	r3, #2
 8000b48:	f000 fec0 	bl	80018cc <HAL_I2C_Master_Transmit>
	  //Tomamos las muestras de desfase
	  desfaseX=(float)(obtenerX())*256;
 8000b4c:	f000 f830 	bl	8000bb0 <obtenerX>
 8000b50:	eef0 7a40 	vmov.f32	s15, s0
 8000b54:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000ba4 <init_adxl+0x9c>
 8000b58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b60:	ee17 3a90 	vmov	r3, s15
 8000b64:	b21a      	sxth	r2, r3
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <init_adxl+0xa0>)
 8000b68:	801a      	strh	r2, [r3, #0]
	  desfaseY=(float)(obtenerY())*256;
 8000b6a:	f000 f867 	bl	8000c3c <obtenerY>
 8000b6e:	eef0 7a40 	vmov.f32	s15, s0
 8000b72:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000ba4 <init_adxl+0x9c>
 8000b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b7e:	ee17 3a90 	vmov	r3, s15
 8000b82:	b21a      	sxth	r2, r3
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <init_adxl+0xa4>)
 8000b86:	801a      	strh	r2, [r3, #0]
 }
 8000b88:	bf00      	nop
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000009c 	.word	0x2000009c
 8000b98:	20000094 	.word	0x20000094
 8000b9c:	20000004 	.word	0x20000004
 8000ba0:	20000010 	.word	0x20000010
 8000ba4:	43800000 	.word	0x43800000
 8000ba8:	20000098 	.word	0x20000098
 8000bac:	2000009a 	.word	0x2000009a

08000bb0 <obtenerX>:

 float obtenerX(void)
 {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af02      	add	r7, sp, #8
	 uint8_t a=0x32;				//Registro que se debe consultar en el acelerómetro para tener el primer byte de datos X
 8000bb6:	2332      	movs	r3, #50	; 0x32
 8000bb8:	71fb      	strb	r3, [r7, #7]
	 float dato_X;
	 HAL_I2C_Master_Transmit(Modulo_I2C, direccion_I2C_ADXL,(uint8_t *)&a, sizeof(a), TIMEOUT);
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <obtenerX+0x7c>)
 8000bbc:	6818      	ldr	r0, [r3, #0]
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <obtenerX+0x80>)
 8000bc0:	8819      	ldrh	r1, [r3, #0]
 8000bc2:	1dfa      	adds	r2, r7, #7
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2301      	movs	r3, #1
 8000bcc:	f000 fe7e 	bl	80018cc <HAL_I2C_Master_Transmit>
	 uint8_t b[2];
	 int16_t ext;
	 HAL_I2C_Master_Receive(enviar_handle_i2c(), direccion_I2C_ADXL, b, sizeof(b), TIMEOUT);
 8000bd0:	f7ff ff90 	bl	8000af4 <enviar_handle_i2c>
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <obtenerX+0x80>)
 8000bd6:	8819      	ldrh	r1, [r3, #0]
 8000bd8:	1d3a      	adds	r2, r7, #4
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2302      	movs	r3, #2
 8000be2:	f000 ff71 	bl	8001ac8 <HAL_I2C_Master_Receive>
	 ext=(b[1]<<8|b[0])-desfaseX;
 8000be6:	797b      	ldrb	r3, [r7, #5]
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	793b      	ldrb	r3, [r7, #4]
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <obtenerX+0x84>)
 8000bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	81fb      	strh	r3, [r7, #14]
	 dato_X=(float)ext/256;
 8000c04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c08:	ee07 3a90 	vmov	s15, r3
 8000c0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c10:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000c38 <obtenerX+0x88>
 8000c14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c18:	edc7 7a02 	vstr	s15, [r7, #8]
	 return dato_X;
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	ee07 3a90 	vmov	s15, r3
 }
 8000c22:	eeb0 0a67 	vmov.f32	s0, s15
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000094 	.word	0x20000094
 8000c30:	2000009c 	.word	0x2000009c
 8000c34:	20000098 	.word	0x20000098
 8000c38:	43800000 	.word	0x43800000

08000c3c <obtenerY>:
 float obtenerY(void)
 {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af02      	add	r7, sp, #8
	 uint8_t a=0x34;				//Registro que se debe consultar en el acelerómetro para tener el primer byte de datos Y
 8000c42:	2334      	movs	r3, #52	; 0x34
 8000c44:	71fb      	strb	r3, [r7, #7]
	 float dato_Y;
	 HAL_I2C_Master_Transmit(Modulo_I2C, direccion_I2C_ADXL,(uint8_t *)&a, sizeof(a), TIMEOUT);
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <obtenerY+0x7c>)
 8000c48:	6818      	ldr	r0, [r3, #0]
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <obtenerY+0x80>)
 8000c4c:	8819      	ldrh	r1, [r3, #0]
 8000c4e:	1dfa      	adds	r2, r7, #7
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2301      	movs	r3, #1
 8000c58:	f000 fe38 	bl	80018cc <HAL_I2C_Master_Transmit>
	 uint8_t b[2];
	 int16_t ext;
	 HAL_I2C_Master_Receive(enviar_handle_i2c(), direccion_I2C_ADXL, b, sizeof(b), TIMEOUT);
 8000c5c:	f7ff ff4a 	bl	8000af4 <enviar_handle_i2c>
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <obtenerY+0x80>)
 8000c62:	8819      	ldrh	r1, [r3, #0]
 8000c64:	1d3a      	adds	r2, r7, #4
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	f000 ff2b 	bl	8001ac8 <HAL_I2C_Master_Receive>
	 ext=(b[1]<<8|b[0])-desfaseY;
 8000c72:	797b      	ldrb	r3, [r7, #5]
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	b21a      	sxth	r2, r3
 8000c78:	793b      	ldrb	r3, [r7, #4]
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <obtenerY+0x84>)
 8000c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	81fb      	strh	r3, [r7, #14]
	 dato_Y=(float)ext/256;
 8000c90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c94:	ee07 3a90 	vmov	s15, r3
 8000c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c9c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000cc4 <obtenerY+0x88>
 8000ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ca4:	edc7 7a02 	vstr	s15, [r7, #8]
	 return dato_Y;
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	ee07 3a90 	vmov	s15, r3
 }
 8000cae:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000094 	.word	0x20000094
 8000cbc:	2000009c 	.word	0x2000009c
 8000cc0:	2000009a 	.word	0x2000009a
 8000cc4:	43800000 	.word	0x43800000

08000cc8 <estadoX>:

 int8_t estadoX(void)
 {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
	 uint8_obtener_estado_MEF_eje(&Eje_X);
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <estadoX+0x20>)
 8000cd0:	f000 f81a 	bl	8000d08 <uint8_obtener_estado_MEF_eje>
	 int8_t valor_del_eje_X = Eje_X.estadoAcel;
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <estadoX+0x20>)
 8000cd6:	7a1b      	ldrb	r3, [r3, #8]
 8000cd8:	71fb      	strb	r3, [r7, #7]
	 return valor_del_eje_X;
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 }
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000004 	.word	0x20000004

08000cec <MEF_estado_eje_INIT>:
  }


 //Implementación funciones privadas
 static void MEF_estado_eje_INIT(eje_t * Eje_a_evaluar)
 {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	 assert(&Eje_a_evaluar!=NULL);
	 *(Eje_a_evaluar->MEF_eje) = ESTADO_0;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
 }
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <uint8_obtener_estado_MEF_eje>:


 static void uint8_obtener_estado_MEF_eje(eje_t * Eje_a_evaluar)
 {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	 assert(&Eje_a_evaluar!=NULL);
	 switch(*(Eje_a_evaluar->MEF_eje))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f993 3000 	ldrsb.w	r3, [r3]
 8000d18:	3302      	adds	r3, #2
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	f200 809e 	bhi.w	8000e5c <uint8_obtener_estado_MEF_eje+0x154>
 8000d20:	a201      	add	r2, pc, #4	; (adr r2, 8000d28 <uint8_obtener_estado_MEF_eje+0x20>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000df1 	.word	0x08000df1
 8000d2c:	08000e35 	.word	0x08000e35
 8000d30:	08000da9 	.word	0x08000da9
 8000d34:	08000d3d 	.word	0x08000d3d
 8000d38:	08000d65 	.word	0x08000d65
	 {
	 case ESTADO_1:
		 // Se realiza cuando estamos en el estado 1
		 if(Eje_a_evaluar->obtener_valor_eje() < LIMIT_SUP)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	4798      	blx	r3
 8000d42:	eef0 7a40 	vmov.f32	s15, s0
 8000d46:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8000e70 <uint8_obtener_estado_MEF_eje+0x168>
 8000d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d52:	d503      	bpl.n	8000d5c <uint8_obtener_estado_MEF_eje+0x54>
			 *(Eje_a_evaluar->MEF_eje)=ESTADO_NADA_1;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2202      	movs	r2, #2
 8000d5a:	701a      	strb	r2, [r3, #0]

		 Eje_a_evaluar->estadoAcel=1;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	721a      	strb	r2, [r3, #8]
		 break;
 8000d62:	e080      	b.n	8000e66 <uint8_obtener_estado_MEF_eje+0x15e>
	 case ESTADO_NADA_1:
		 // Se realiza cuando estamos en un limbo entre saber si es 1 o 0
		 if(Eje_a_evaluar->obtener_valor_eje() > LIMIT_SUP)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	4798      	blx	r3
 8000d6a:	eef0 7a40 	vmov.f32	s15, s0
 8000d6e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000e70 <uint8_obtener_estado_MEF_eje+0x168>
 8000d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7a:	dd03      	ble.n	8000d84 <uint8_obtener_estado_MEF_eje+0x7c>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_1;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]

		 if(Eje_a_evaluar->obtener_valor_eje() < LIMIT_INF)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	4798      	blx	r3
 8000d8a:	eef0 7a40 	vmov.f32	s15, s0
 8000d8e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8000e74 <uint8_obtener_estado_MEF_eje+0x16c>
 8000d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9a:	d400      	bmi.n	8000d9e <uint8_obtener_estado_MEF_eje+0x96>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_0;
	 		 break;
 8000d9c:	e063      	b.n	8000e66 <uint8_obtener_estado_MEF_eje+0x15e>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_0;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
	 		 break;
 8000da6:	e05e      	b.n	8000e66 <uint8_obtener_estado_MEF_eje+0x15e>
	 case ESTADO_0:
		 // Se realiza cuando estamos en el estado 0
		 if(Eje_a_evaluar->obtener_valor_eje() > LIMIT_INF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	4798      	blx	r3
 8000dae:	eef0 7a40 	vmov.f32	s15, s0
 8000db2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000e74 <uint8_obtener_estado_MEF_eje+0x16c>
 8000db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dbe:	dd03      	ble.n	8000dc8 <uint8_obtener_estado_MEF_eje+0xc0>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_NADA_1;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	701a      	strb	r2, [r3, #0]

		 if(Eje_a_evaluar->obtener_valor_eje() < (-LIMIT_INF))
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	4798      	blx	r3
 8000dce:	eef0 7a40 	vmov.f32	s15, s0
 8000dd2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000e78 <uint8_obtener_estado_MEF_eje+0x170>
 8000dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dde:	d503      	bpl.n	8000de8 <uint8_obtener_estado_MEF_eje+0xe0>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_NADA_M1;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	22fe      	movs	r2, #254	; 0xfe
 8000de6:	701a      	strb	r2, [r3, #0]

		 Eje_a_evaluar->estadoAcel=0;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	721a      	strb	r2, [r3, #8]
	 		 break;
 8000dee:	e03a      	b.n	8000e66 <uint8_obtener_estado_MEF_eje+0x15e>
	 case ESTADO_NADA_M1:
		 // Se realiza cuando estamos en un limbo entre saber si es 0 o -1
		 if(Eje_a_evaluar->obtener_valor_eje() > (-LIMIT_INF))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	4798      	blx	r3
 8000df6:	eef0 7a40 	vmov.f32	s15, s0
 8000dfa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000e78 <uint8_obtener_estado_MEF_eje+0x170>
 8000dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e06:	dd03      	ble.n	8000e10 <uint8_obtener_estado_MEF_eje+0x108>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_0;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]

		 if(Eje_a_evaluar->obtener_valor_eje() < (-LIMIT_SUP))
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	4798      	blx	r3
 8000e16:	eef0 7a40 	vmov.f32	s15, s0
 8000e1a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000e7c <uint8_obtener_estado_MEF_eje+0x174>
 8000e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e26:	d400      	bmi.n	8000e2a <uint8_obtener_estado_MEF_eje+0x122>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_M1;
	 		 break;
 8000e28:	e01d      	b.n	8000e66 <uint8_obtener_estado_MEF_eje+0x15e>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_M1;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	701a      	strb	r2, [r3, #0]
	 		 break;
 8000e32:	e018      	b.n	8000e66 <uint8_obtener_estado_MEF_eje+0x15e>
	 case ESTADO_M1:
		 // Se realiza cuando estamos en el estado -1

		 if(Eje_a_evaluar->obtener_valor_eje() > (-LIMIT_SUP))
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	4798      	blx	r3
 8000e3a:	eef0 7a40 	vmov.f32	s15, s0
 8000e3e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000e7c <uint8_obtener_estado_MEF_eje+0x174>
 8000e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4a:	dd03      	ble.n	8000e54 <uint8_obtener_estado_MEF_eje+0x14c>
		 { *(Eje_a_evaluar->MEF_eje)=ESTADO_NADA_M1;}
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	22fe      	movs	r2, #254	; 0xfe
 8000e52:	701a      	strb	r2, [r3, #0]

		 Eje_a_evaluar->estadoAcel=-1;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	22ff      	movs	r2, #255	; 0xff
 8000e58:	721a      	strb	r2, [r3, #8]

	 		 break;
 8000e5a:	e004      	b.n	8000e66 <uint8_obtener_estado_MEF_eje+0x15e>
	 default:
		 MEF_estado_eje_INIT(Eje_a_evaluar);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff44 	bl	8000cec <MEF_estado_eje_INIT>
		 break;
 8000e64:	bf00      	nop


	 }
 }
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	3f4ccccd 	.word	0x3f4ccccd
 8000e74:	3e4ccccd 	.word	0x3e4ccccd
 8000e78:	be4ccccd 	.word	0xbe4ccccd
 8000e7c:	bf4ccccd 	.word	0xbf4ccccd

08000e80 <uartInit>:
static void Error_Handler(void);						//Función para manejo de errores

//Implementación de funciones

bool_t uartInit(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
	bool_t Estado_uart = false;
 8000e86:	2300      	movs	r3, #0
 8000e88:	71fb      	strb	r3, [r7, #7]
	 MX_USART3_UART_Init();
 8000e8a:	f000 f853 	bl	8000f34 <MX_USART3_UART_Init>
	 MX_USB_OTG_FS_PCD_Init();
 8000e8e:	f000 f87b 	bl	8000f88 <MX_USB_OTG_FS_PCD_Init>
	 if (HAL_UART_Init(&huart3) == HAL_OK)
 8000e92:	4812      	ldr	r0, [pc, #72]	; (8000edc <uartInit+0x5c>)
 8000e94:	f002 fdc6 	bl	8003a24 <HAL_UART_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <uartInit+0x22>
	 Estado_uart = true;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	71fb      	strb	r3, [r7, #7]
	 // Mensaje de inicialización y parámetros de
	 uartSendString((const uint8_t *) "\n\rInicializacion de UART exitosa \n\r");
 8000ea2:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <uartInit+0x60>)
 8000ea4:	f000 f82c 	bl	8000f00 <uartSendString>
	 uartSendString((const uint8_t *) "Parametros de UART \n\r ");
 8000ea8:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <uartInit+0x64>)
 8000eaa:	f000 f829 	bl	8000f00 <uartSendString>
	 uartSendString((const uint8_t *) "- Baudios: 9600 \n\r ");
 8000eae:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <uartInit+0x68>)
 8000eb0:	f000 f826 	bl	8000f00 <uartSendString>
	 uartSendString((const uint8_t *) "- Palabra(incluyendo pariedad): 8 \n\r ");
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <uartInit+0x6c>)
 8000eb6:	f000 f823 	bl	8000f00 <uartSendString>
	 uartSendString((const uint8_t *) "- Stop bits: 1 \n\r ");
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <uartInit+0x70>)
 8000ebc:	f000 f820 	bl	8000f00 <uartSendString>
	 uartSendString((const uint8_t *) "- Pariedad: Impar \n\r ");
 8000ec0:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <uartInit+0x74>)
 8000ec2:	f000 f81d 	bl	8000f00 <uartSendString>
	 uartSendString((const uint8_t *) "- Modo: Transmisor receptor \n\r ");
 8000ec6:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <uartInit+0x78>)
 8000ec8:	f000 f81a 	bl	8000f00 <uartSendString>
	 uartSendString((const uint8_t *) "- Flow: Ninguno \n\r ");
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <uartInit+0x7c>)
 8000ece:	f000 f817 	bl	8000f00 <uartSendString>


	 return Estado_uart;
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200000a0 	.word	0x200000a0
 8000ee0:	08004810 	.word	0x08004810
 8000ee4:	08004834 	.word	0x08004834
 8000ee8:	0800484c 	.word	0x0800484c
 8000eec:	08004860 	.word	0x08004860
 8000ef0:	08004888 	.word	0x08004888
 8000ef4:	0800489c 	.word	0x0800489c
 8000ef8:	080048b4 	.word	0x080048b4
 8000efc:	080048d4 	.word	0x080048d4

08000f00 <uartSendString>:

void uartSendString(const uint8_t *  pstring)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	 const uint8_t *puntero=pstring;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	60fb      	str	r3, [r7, #12]
	 while(*puntero)
 8000f0c:	e007      	b.n	8000f1e <uartSendString+0x1e>
	 {
		 HAL_UART_Transmit(&huart3,(const uint8_t *)puntero++,1,200);
 8000f0e:	68f9      	ldr	r1, [r7, #12]
 8000f10:	1c4b      	adds	r3, r1, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	23c8      	movs	r3, #200	; 0xc8
 8000f16:	2201      	movs	r2, #1
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <uartSendString+0x30>)
 8000f1a:	f002 fdd0 	bl	8003abe <HAL_UART_Transmit>
	 while(*puntero)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f3      	bne.n	8000f0e <uartSendString+0xe>
	 }
}
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000a0 	.word	0x200000a0

08000f34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <MX_USART3_UART_Init+0x50>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = BAUDIOS;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = PALABRA;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = STOP;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = PARI;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f54:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000f58:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = MODO;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f5c:	220c      	movs	r2, #12
 8000f5e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = FLOW;
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = TIME;
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f6e:	f002 fd59 	bl	8003a24 <HAL_UART_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8000f78:	f000 f834 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000a0 	.word	0x200000a0
 8000f84:	40004800 	.word	0x40004800

08000f88 <MX_USB_OTG_FS_PCD_Init>:

static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f96:	2206      	movs	r2, #6
 8000f98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa8:	2202      	movs	r2, #2
 8000faa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fcc:	f001 facf 	bl	800256e <HAL_PCD_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fd6:	f000 f805 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000e4 	.word	0x200000e4

08000fe4 <Error_Handler>:

static void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x8>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <HAL_Init+0x40>)
 8000ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_Init+0x40>)
 8001006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_Init+0x40>)
 8001012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001018:	2003      	movs	r0, #3
 800101a:	f000 f931 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f808 	bl	8001034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001024:	f7ff fbaa 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023c00 	.word	0x40023c00

08001034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_InitTick+0x54>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x58>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	fbb3 f3f1 	udiv	r3, r3, r1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f93b 	bl	80012ce <HAL_SYSTICK_Config>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00e      	b.n	8001080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d80a      	bhi.n	800107e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f000 f911 	bl	8001296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001074:	4a06      	ldr	r2, [pc, #24]	; (8001090 <HAL_InitTick+0x5c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e000      	b.n	8001080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000000 	.word	0x20000000
 800108c:	20000020 	.word	0x20000020
 8001090:	2000001c 	.word	0x2000001c

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000020 	.word	0x20000020
 80010b8:	200005f0 	.word	0x200005f0

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200005f0 	.word	0x200005f0

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff ffee 	bl	80010bc <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffde 	bl	80010bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000020 	.word	0x20000020

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff8e 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff47 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff5c 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff8e 	bl	80011d4 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5d 	bl	8001180 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffb0 	bl	800123c <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	e165      	b.n	80015d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	429a      	cmp	r2, r3
 800131e:	f040 8154 	bne.w	80015ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b01      	cmp	r3, #1
 800132c:	d005      	beq.n	800133a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001336:	2b02      	cmp	r3, #2
 8001338:	d130      	bne.n	800139c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 0201 	and.w	r2, r3, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d017      	beq.n	80013d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d123      	bne.n	800142c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3208      	adds	r2, #8
 8001426:	69b9      	ldr	r1, [r7, #24]
 8001428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0203 	and.w	r2, r3, #3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80ae 	beq.w	80015ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b5d      	ldr	r3, [pc, #372]	; (80015e8 <HAL_GPIO_Init+0x300>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a5c      	ldr	r2, [pc, #368]	; (80015e8 <HAL_GPIO_Init+0x300>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b5a      	ldr	r3, [pc, #360]	; (80015e8 <HAL_GPIO_Init+0x300>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148a:	4a58      	ldr	r2, [pc, #352]	; (80015ec <HAL_GPIO_Init+0x304>)
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4f      	ldr	r2, [pc, #316]	; (80015f0 <HAL_GPIO_Init+0x308>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d025      	beq.n	8001502 <HAL_GPIO_Init+0x21a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4e      	ldr	r2, [pc, #312]	; (80015f4 <HAL_GPIO_Init+0x30c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d01f      	beq.n	80014fe <HAL_GPIO_Init+0x216>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4d      	ldr	r2, [pc, #308]	; (80015f8 <HAL_GPIO_Init+0x310>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d019      	beq.n	80014fa <HAL_GPIO_Init+0x212>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4c      	ldr	r2, [pc, #304]	; (80015fc <HAL_GPIO_Init+0x314>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0x20e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4b      	ldr	r2, [pc, #300]	; (8001600 <HAL_GPIO_Init+0x318>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00d      	beq.n	80014f2 <HAL_GPIO_Init+0x20a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4a      	ldr	r2, [pc, #296]	; (8001604 <HAL_GPIO_Init+0x31c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d007      	beq.n	80014ee <HAL_GPIO_Init+0x206>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a49      	ldr	r2, [pc, #292]	; (8001608 <HAL_GPIO_Init+0x320>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_GPIO_Init+0x202>
 80014e6:	2306      	movs	r3, #6
 80014e8:	e00c      	b.n	8001504 <HAL_GPIO_Init+0x21c>
 80014ea:	2307      	movs	r3, #7
 80014ec:	e00a      	b.n	8001504 <HAL_GPIO_Init+0x21c>
 80014ee:	2305      	movs	r3, #5
 80014f0:	e008      	b.n	8001504 <HAL_GPIO_Init+0x21c>
 80014f2:	2304      	movs	r3, #4
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x21c>
 80014f6:	2303      	movs	r3, #3
 80014f8:	e004      	b.n	8001504 <HAL_GPIO_Init+0x21c>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e002      	b.n	8001504 <HAL_GPIO_Init+0x21c>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_GPIO_Init+0x21c>
 8001502:	2300      	movs	r3, #0
 8001504:	69fa      	ldr	r2, [r7, #28]
 8001506:	f002 0203 	and.w	r2, r2, #3
 800150a:	0092      	lsls	r2, r2, #2
 800150c:	4093      	lsls	r3, r2
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001514:	4935      	ldr	r1, [pc, #212]	; (80015ec <HAL_GPIO_Init+0x304>)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001522:	4b3a      	ldr	r3, [pc, #232]	; (800160c <HAL_GPIO_Init+0x324>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001546:	4a31      	ldr	r2, [pc, #196]	; (800160c <HAL_GPIO_Init+0x324>)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800154c:	4b2f      	ldr	r3, [pc, #188]	; (800160c <HAL_GPIO_Init+0x324>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001570:	4a26      	ldr	r2, [pc, #152]	; (800160c <HAL_GPIO_Init+0x324>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <HAL_GPIO_Init+0x324>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <HAL_GPIO_Init+0x324>)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_GPIO_Init+0x324>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015c4:	4a11      	ldr	r2, [pc, #68]	; (800160c <HAL_GPIO_Init+0x324>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	2b0f      	cmp	r3, #15
 80015d4:	f67f ae96 	bls.w	8001304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40013800 	.word	0x40013800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40020400 	.word	0x40020400
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40021000 	.word	0x40021000
 8001604:	40021400 	.word	0x40021400
 8001608:	40021800 	.word	0x40021800
 800160c:	40013c00 	.word	0x40013c00

08001610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800162c:	e003      	b.n	8001636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	041a      	lsls	r2, r3, #16
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e12b      	b.n	80018ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d106      	bne.n	8001670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff f8ae 	bl	80007cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2224      	movs	r2, #36	; 0x24
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0201 	bic.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001696:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016a8:	f001 f99c 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 80016ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4a81      	ldr	r2, [pc, #516]	; (80018b8 <HAL_I2C_Init+0x274>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d807      	bhi.n	80016c8 <HAL_I2C_Init+0x84>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4a80      	ldr	r2, [pc, #512]	; (80018bc <HAL_I2C_Init+0x278>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	bf94      	ite	ls
 80016c0:	2301      	movls	r3, #1
 80016c2:	2300      	movhi	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	e006      	b.n	80016d6 <HAL_I2C_Init+0x92>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4a7d      	ldr	r2, [pc, #500]	; (80018c0 <HAL_I2C_Init+0x27c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	bf94      	ite	ls
 80016d0:	2301      	movls	r3, #1
 80016d2:	2300      	movhi	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e0e7      	b.n	80018ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4a78      	ldr	r2, [pc, #480]	; (80018c4 <HAL_I2C_Init+0x280>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0c9b      	lsrs	r3, r3, #18
 80016e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a6a      	ldr	r2, [pc, #424]	; (80018b8 <HAL_I2C_Init+0x274>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d802      	bhi.n	8001718 <HAL_I2C_Init+0xd4>
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	3301      	adds	r3, #1
 8001716:	e009      	b.n	800172c <HAL_I2C_Init+0xe8>
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a69      	ldr	r2, [pc, #420]	; (80018c8 <HAL_I2C_Init+0x284>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	3301      	adds	r3, #1
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	430b      	orrs	r3, r1
 8001732:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800173e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	495c      	ldr	r1, [pc, #368]	; (80018b8 <HAL_I2C_Init+0x274>)
 8001748:	428b      	cmp	r3, r1
 800174a:	d819      	bhi.n	8001780 <HAL_I2C_Init+0x13c>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	1e59      	subs	r1, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fbb1 f3f3 	udiv	r3, r1, r3
 800175a:	1c59      	adds	r1, r3, #1
 800175c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001760:	400b      	ands	r3, r1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00a      	beq.n	800177c <HAL_I2C_Init+0x138>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1e59      	subs	r1, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fbb1 f3f3 	udiv	r3, r1, r3
 8001774:	3301      	adds	r3, #1
 8001776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177a:	e051      	b.n	8001820 <HAL_I2C_Init+0x1dc>
 800177c:	2304      	movs	r3, #4
 800177e:	e04f      	b.n	8001820 <HAL_I2C_Init+0x1dc>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d111      	bne.n	80017ac <HAL_I2C_Init+0x168>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	1e58      	subs	r0, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	440b      	add	r3, r1
 8001796:	fbb0 f3f3 	udiv	r3, r0, r3
 800179a:	3301      	adds	r3, #1
 800179c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf0c      	ite	eq
 80017a4:	2301      	moveq	r3, #1
 80017a6:	2300      	movne	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	e012      	b.n	80017d2 <HAL_I2C_Init+0x18e>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	0099      	lsls	r1, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	bf0c      	ite	eq
 80017cc:	2301      	moveq	r3, #1
 80017ce:	2300      	movne	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Init+0x196>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e022      	b.n	8001820 <HAL_I2C_Init+0x1dc>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10e      	bne.n	8001800 <HAL_I2C_Init+0x1bc>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1e58      	subs	r0, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6859      	ldr	r1, [r3, #4]
 80017ea:	460b      	mov	r3, r1
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	440b      	add	r3, r1
 80017f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f4:	3301      	adds	r3, #1
 80017f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017fe:	e00f      	b.n	8001820 <HAL_I2C_Init+0x1dc>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1e58      	subs	r0, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	0099      	lsls	r1, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	fbb0 f3f3 	udiv	r3, r0, r3
 8001816:	3301      	adds	r3, #1
 8001818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	6809      	ldr	r1, [r1, #0]
 8001824:	4313      	orrs	r3, r2
 8001826:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69da      	ldr	r2, [r3, #28]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800184e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6911      	ldr	r1, [r2, #16]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68d2      	ldr	r2, [r2, #12]
 800185a:	4311      	orrs	r1, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	430b      	orrs	r3, r1
 8001862:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2220      	movs	r2, #32
 800189a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	000186a0 	.word	0x000186a0
 80018bc:	001e847f 	.word	0x001e847f
 80018c0:	003d08ff 	.word	0x003d08ff
 80018c4:	431bde83 	.word	0x431bde83
 80018c8:	10624dd3 	.word	0x10624dd3

080018cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	461a      	mov	r2, r3
 80018d8:	460b      	mov	r3, r1
 80018da:	817b      	strh	r3, [r7, #10]
 80018dc:	4613      	mov	r3, r2
 80018de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018e0:	f7ff fbec 	bl	80010bc <HAL_GetTick>
 80018e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b20      	cmp	r3, #32
 80018f0:	f040 80e0 	bne.w	8001ab4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2319      	movs	r3, #25
 80018fa:	2201      	movs	r2, #1
 80018fc:	4970      	ldr	r1, [pc, #448]	; (8001ac0 <HAL_I2C_Master_Transmit+0x1f4>)
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 fc58 	bl	80021b4 <I2C_WaitOnFlagUntilTimeout>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800190a:	2302      	movs	r3, #2
 800190c:	e0d3      	b.n	8001ab6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_I2C_Master_Transmit+0x50>
 8001918:	2302      	movs	r3, #2
 800191a:	e0cc      	b.n	8001ab6 <HAL_I2C_Master_Transmit+0x1ea>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b01      	cmp	r3, #1
 8001930:	d007      	beq.n	8001942 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001950:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2221      	movs	r2, #33	; 0x21
 8001956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2210      	movs	r2, #16
 800195e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	893a      	ldrh	r2, [r7, #8]
 8001972:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001978:	b29a      	uxth	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4a50      	ldr	r2, [pc, #320]	; (8001ac4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001984:	8979      	ldrh	r1, [r7, #10]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fac2 	bl	8001f14 <I2C_MasterRequestWrite>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e08d      	b.n	8001ab6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019b0:	e066      	b.n	8001a80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	6a39      	ldr	r1, [r7, #32]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 fcd2 	bl	8002360 <I2C_WaitOnTXEFlagUntilTimeout>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00d      	beq.n	80019de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d107      	bne.n	80019da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e06b      	b.n	8001ab6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	781a      	ldrb	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d11b      	bne.n	8001a54 <HAL_I2C_Master_Transmit+0x188>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d017      	beq.n	8001a54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	6a39      	ldr	r1, [r7, #32]
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 fcc2 	bl	80023e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00d      	beq.n	8001a80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d107      	bne.n	8001a7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e01a      	b.n	8001ab6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d194      	bne.n	80019b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e000      	b.n	8001ab6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ab4:	2302      	movs	r3, #2
  }
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	00100002 	.word	0x00100002
 8001ac4:	ffff0000 	.word	0xffff0000

08001ac8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	; 0x30
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	817b      	strh	r3, [r7, #10]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff faee 	bl	80010bc <HAL_GetTick>
 8001ae0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b20      	cmp	r3, #32
 8001aec:	f040 820b 	bne.w	8001f06 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2319      	movs	r3, #25
 8001af6:	2201      	movs	r2, #1
 8001af8:	497c      	ldr	r1, [pc, #496]	; (8001cec <HAL_I2C_Master_Receive+0x224>)
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 fb5a 	bl	80021b4 <I2C_WaitOnFlagUntilTimeout>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001b06:	2302      	movs	r3, #2
 8001b08:	e1fe      	b.n	8001f08 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_I2C_Master_Receive+0x50>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e1f7      	b.n	8001f08 <HAL_I2C_Master_Receive+0x440>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d007      	beq.n	8001b3e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0201 	orr.w	r2, r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2222      	movs	r2, #34	; 0x22
 8001b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2210      	movs	r2, #16
 8001b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	893a      	ldrh	r2, [r7, #8]
 8001b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4a5c      	ldr	r2, [pc, #368]	; (8001cf0 <HAL_I2C_Master_Receive+0x228>)
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b80:	8979      	ldrh	r1, [r7, #10]
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 fa46 	bl	8002018 <I2C_MasterRequestRead>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e1b8      	b.n	8001f08 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d113      	bne.n	8001bc6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	623b      	str	r3, [r7, #32]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	623b      	str	r3, [r7, #32]
 8001bb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e18c      	b.n	8001ee0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d11b      	bne.n	8001c06 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	e16c      	b.n	8001ee0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d11b      	bne.n	8001c46 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	e14c      	b.n	8001ee0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c6c:	e138      	b.n	8001ee0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	f200 80f1 	bhi.w	8001e5a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d123      	bne.n	8001cc8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 fbed 	bl	8002464 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e139      	b.n	8001f08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691a      	ldr	r2, [r3, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cc6:	e10b      	b.n	8001ee0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d14e      	bne.n	8001d6e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	4906      	ldr	r1, [pc, #24]	; (8001cf4 <HAL_I2C_Master_Receive+0x22c>)
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 fa6a 	bl	80021b4 <I2C_WaitOnFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e10e      	b.n	8001f08 <HAL_I2C_Master_Receive+0x440>
 8001cea:	bf00      	nop
 8001cec:	00100002 	.word	0x00100002
 8001cf0:	ffff0000 	.word	0xffff0000
 8001cf4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d6c:	e0b8      	b.n	8001ee0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d74:	2200      	movs	r2, #0
 8001d76:	4966      	ldr	r1, [pc, #408]	; (8001f10 <HAL_I2C_Master_Receive+0x448>)
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 fa1b 	bl	80021b4 <I2C_WaitOnFlagUntilTimeout>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0bf      	b.n	8001f08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	494f      	ldr	r1, [pc, #316]	; (8001f10 <HAL_I2C_Master_Receive+0x448>)
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f9ed 	bl	80021b4 <I2C_WaitOnFlagUntilTimeout>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e091      	b.n	8001f08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e58:	e042      	b.n	8001ee0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 fb00 	bl	8002464 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e04c      	b.n	8001f08 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d118      	bne.n	8001ee0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f47f aec2 	bne.w	8001c6e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001f06:	2302      	movs	r3, #2
  }
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	00010004 	.word	0x00010004

08001f14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	460b      	mov	r3, r1
 8001f22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d006      	beq.n	8001f3e <I2C_MasterRequestWrite+0x2a>
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d003      	beq.n	8001f3e <I2C_MasterRequestWrite+0x2a>
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f3c:	d108      	bne.n	8001f50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	e00b      	b.n	8001f68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	2b12      	cmp	r3, #18
 8001f56:	d107      	bne.n	8001f68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f91d 	bl	80021b4 <I2C_WaitOnFlagUntilTimeout>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00d      	beq.n	8001f9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f8e:	d103      	bne.n	8001f98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e035      	b.n	8002008 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fa4:	d108      	bne.n	8001fb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fa6:	897b      	ldrh	r3, [r7, #10]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fb4:	611a      	str	r2, [r3, #16]
 8001fb6:	e01b      	b.n	8001ff0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fb8:	897b      	ldrh	r3, [r7, #10]
 8001fba:	11db      	asrs	r3, r3, #7
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	f003 0306 	and.w	r3, r3, #6
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	f063 030f 	orn	r3, r3, #15
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	490e      	ldr	r1, [pc, #56]	; (8002010 <I2C_MasterRequestWrite+0xfc>)
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 f943 	bl	8002262 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e010      	b.n	8002008 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fe6:	897b      	ldrh	r3, [r7, #10]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	4907      	ldr	r1, [pc, #28]	; (8002014 <I2C_MasterRequestWrite+0x100>)
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f933 	bl	8002262 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	00010008 	.word	0x00010008
 8002014:	00010002 	.word	0x00010002

08002018 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af02      	add	r7, sp, #8
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	460b      	mov	r3, r1
 8002026:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800203c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2b08      	cmp	r3, #8
 8002042:	d006      	beq.n	8002052 <I2C_MasterRequestRead+0x3a>
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d003      	beq.n	8002052 <I2C_MasterRequestRead+0x3a>
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002050:	d108      	bne.n	8002064 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	e00b      	b.n	800207c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	2b11      	cmp	r3, #17
 800206a:	d107      	bne.n	800207c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800207a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f893 	bl	80021b4 <I2C_WaitOnFlagUntilTimeout>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00d      	beq.n	80020b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a2:	d103      	bne.n	80020ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e079      	b.n	80021a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020b8:	d108      	bne.n	80020cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020ba:	897b      	ldrh	r3, [r7, #10]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	611a      	str	r2, [r3, #16]
 80020ca:	e05f      	b.n	800218c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020cc:	897b      	ldrh	r3, [r7, #10]
 80020ce:	11db      	asrs	r3, r3, #7
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f003 0306 	and.w	r3, r3, #6
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f063 030f 	orn	r3, r3, #15
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4930      	ldr	r1, [pc, #192]	; (80021ac <I2C_MasterRequestRead+0x194>)
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f8b9 	bl	8002262 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e054      	b.n	80021a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020fa:	897b      	ldrh	r3, [r7, #10]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4929      	ldr	r1, [pc, #164]	; (80021b0 <I2C_MasterRequestRead+0x198>)
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f8a9 	bl	8002262 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e044      	b.n	80021a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800213e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f831 	bl	80021b4 <I2C_WaitOnFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00d      	beq.n	8002174 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002166:	d103      	bne.n	8002170 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800216e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e017      	b.n	80021a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002174:	897b      	ldrh	r3, [r7, #10]
 8002176:	11db      	asrs	r3, r3, #7
 8002178:	b2db      	uxtb	r3, r3
 800217a:	f003 0306 	and.w	r3, r3, #6
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f063 030e 	orn	r3, r3, #14
 8002184:	b2da      	uxtb	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	4907      	ldr	r1, [pc, #28]	; (80021b0 <I2C_MasterRequestRead+0x198>)
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f865 	bl	8002262 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	00010008 	.word	0x00010008
 80021b0:	00010002 	.word	0x00010002

080021b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021c4:	e025      	b.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d021      	beq.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ce:	f7fe ff75 	bl	80010bc <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d302      	bcc.n	80021e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d116      	bne.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f043 0220 	orr.w	r2, r3, #32
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e023      	b.n	800225a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d10d      	bne.n	8002238 <I2C_WaitOnFlagUntilTimeout+0x84>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4013      	ands	r3, r2
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf0c      	ite	eq
 800222e:	2301      	moveq	r3, #1
 8002230:	2300      	movne	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	e00c      	b.n	8002252 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4013      	ands	r3, r2
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	bf0c      	ite	eq
 800224a:	2301      	moveq	r3, #1
 800224c:	2300      	movne	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	429a      	cmp	r2, r3
 8002256:	d0b6      	beq.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002270:	e051      	b.n	8002316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002280:	d123      	bne.n	80022ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002290:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800229a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2220      	movs	r2, #32
 80022a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f043 0204 	orr.w	r2, r3, #4
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e046      	b.n	8002358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d021      	beq.n	8002316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d2:	f7fe fef3 	bl	80010bc <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d302      	bcc.n	80022e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d116      	bne.n	8002316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f043 0220 	orr.w	r2, r3, #32
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e020      	b.n	8002358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b01      	cmp	r3, #1
 800231e:	d10c      	bne.n	800233a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4013      	ands	r3, r2
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	bf14      	ite	ne
 8002332:	2301      	movne	r3, #1
 8002334:	2300      	moveq	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	e00b      	b.n	8002352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	43da      	mvns	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	4013      	ands	r3, r2
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d18d      	bne.n	8002272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800236c:	e02d      	b.n	80023ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f8ce 	bl	8002510 <I2C_IsAcknowledgeFailed>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e02d      	b.n	80023da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d021      	beq.n	80023ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002386:	f7fe fe99 	bl	80010bc <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	429a      	cmp	r2, r3
 8002394:	d302      	bcc.n	800239c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d116      	bne.n	80023ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f043 0220 	orr.w	r2, r3, #32
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e007      	b.n	80023da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d4:	2b80      	cmp	r3, #128	; 0x80
 80023d6:	d1ca      	bne.n	800236e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023ee:	e02d      	b.n	800244c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f88d 	bl	8002510 <I2C_IsAcknowledgeFailed>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e02d      	b.n	800245c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d021      	beq.n	800244c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002408:	f7fe fe58 	bl	80010bc <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	429a      	cmp	r2, r3
 8002416:	d302      	bcc.n	800241e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d116      	bne.n	800244c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	f043 0220 	orr.w	r2, r3, #32
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e007      	b.n	800245c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b04      	cmp	r3, #4
 8002458:	d1ca      	bne.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002470:	e042      	b.n	80024f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b10      	cmp	r3, #16
 800247e:	d119      	bne.n	80024b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0210 	mvn.w	r2, #16
 8002488:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e029      	b.n	8002508 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b4:	f7fe fe02 	bl	80010bc <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d302      	bcc.n	80024ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d116      	bne.n	80024f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e007      	b.n	8002508 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b40      	cmp	r3, #64	; 0x40
 8002504:	d1b5      	bne.n	8002472 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002526:	d11b      	bne.n	8002560 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002530:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f043 0204 	orr.w	r2, r3, #4
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800256e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002570:	b08f      	sub	sp, #60	; 0x3c
 8002572:	af0a      	add	r7, sp, #40	; 0x28
 8002574:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e116      	b.n	80027ae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe f9a6 	bl	80008ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2203      	movs	r2, #3
 80025a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 fe53 	bl	800426a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	687e      	ldr	r6, [r7, #4]
 80025cc:	466d      	mov	r5, sp
 80025ce:	f106 0410 	add.w	r4, r6, #16
 80025d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025de:	e885 0003 	stmia.w	r5, {r0, r1}
 80025e2:	1d33      	adds	r3, r6, #4
 80025e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	f001 fdde 	bl	80041a8 <USB_CoreInit>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0d7      	b.n	80027ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f001 fe41 	bl	800428c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	e04a      	b.n	80026a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002610:	7bfa      	ldrb	r2, [r7, #15]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	333d      	adds	r3, #61	; 0x3d
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	333c      	adds	r3, #60	; 0x3c
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	b298      	uxth	r0, r3
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	3344      	adds	r3, #68	; 0x44
 800264c:	4602      	mov	r2, r0
 800264e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3340      	adds	r3, #64	; 0x40
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3348      	adds	r3, #72	; 0x48
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	334c      	adds	r3, #76	; 0x4c
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3354      	adds	r3, #84	; 0x54
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	3301      	adds	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d3af      	bcc.n	8002610 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
 80026b4:	e044      	b.n	8002740 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026cc:	7bfa      	ldrb	r2, [r7, #15]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	3301      	adds	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	429a      	cmp	r2, r3
 8002748:	d3b5      	bcc.n	80026b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	687e      	ldr	r6, [r7, #4]
 8002752:	466d      	mov	r5, sp
 8002754:	f106 0410 	add.w	r4, r6, #16
 8002758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800275c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002760:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002764:	e885 0003 	stmia.w	r5, {r0, r1}
 8002768:	1d33      	adds	r3, r6, #4
 800276a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800276c:	6838      	ldr	r0, [r7, #0]
 800276e:	f001 fdd9 	bl	8004324 <USB_DevInit>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e014      	b.n	80027ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2b01      	cmp	r3, #1
 800279a:	d102      	bne.n	80027a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f80a 	bl	80027b6 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f001 ff97 	bl	80046da <USB_DevDisconnect>

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027b6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e8:	f043 0303 	orr.w	r3, r3, #3
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0cc      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d90c      	bls.n	800283c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b65      	ldr	r3, [pc, #404]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0b8      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a58      	ldr	r2, [pc, #352]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800285e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800286c:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b50      	ldr	r3, [pc, #320]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	494d      	ldr	r1, [pc, #308]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d044      	beq.n	8002920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d119      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e07f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d003      	beq.n	80028be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e06f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e067      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028de:	4b37      	ldr	r3, [pc, #220]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f023 0203 	bic.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4934      	ldr	r1, [pc, #208]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f0:	f7fe fbe4 	bl	80010bc <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	e00a      	b.n	800290e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7fe fbe0 	bl	80010bc <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e04f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 020c 	and.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	429a      	cmp	r2, r3
 800291e:	d1eb      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d20c      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e032      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4916      	ldr	r1, [pc, #88]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	490e      	ldr	r1, [pc, #56]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002986:	f000 fb7f 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 800298a:	4602      	mov	r2, r0
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	490a      	ldr	r1, [pc, #40]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	5ccb      	ldrb	r3, [r1, r3]
 800299a:	fa22 f303 	lsr.w	r3, r2, r3
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fb44 	bl	8001034 <HAL_InitTick>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023c00 	.word	0x40023c00
 80029bc:	40023800 	.word	0x40023800
 80029c0:	080048e8 	.word	0x080048e8
 80029c4:	20000000 	.word	0x20000000
 80029c8:	2000001c 	.word	0x2000001c

080029cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000000 	.word	0x20000000

080029e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029e8:	f7ff fff0 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	0a9b      	lsrs	r3, r3, #10
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	4903      	ldr	r1, [pc, #12]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800
 8002a08:	080048f8 	.word	0x080048f8

08002a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a10:	f7ff ffdc 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	0b5b      	lsrs	r3, r3, #13
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	4903      	ldr	r1, [pc, #12]	; (8002a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	080048f8 	.word	0x080048f8

08002a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	; 0x30
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d010      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002a6c:	4b6f      	ldr	r3, [pc, #444]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a72:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	496c      	ldr	r1, [pc, #432]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d010      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002a9a:	4b64      	ldr	r3, [pc, #400]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	4960      	ldr	r1, [pc, #384]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d017      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ac8:	4b58      	ldr	r3, [pc, #352]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ace:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4955      	ldr	r1, [pc, #340]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ae6:	d101      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002af4:	2301      	movs	r3, #1
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d017      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b04:	4b49      	ldr	r3, [pc, #292]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b12:	4946      	ldr	r1, [pc, #280]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b22:	d101      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002b24:	2301      	movs	r3, #1
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002b30:	2301      	movs	r3, #1
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 808a 	beq.w	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a38      	ldr	r2, [pc, #224]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
 8002b52:	4b36      	ldr	r3, [pc, #216]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	60bb      	str	r3, [r7, #8]
 8002b5c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b5e:	4b34      	ldr	r3, [pc, #208]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a33      	ldr	r2, [pc, #204]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b6a:	f7fe faa7 	bl	80010bc <HAL_GetTick>
 8002b6e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b72:	f7fe faa3 	bl	80010bc <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e278      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b84:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b90:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b98:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d02f      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba8:	6a3a      	ldr	r2, [r7, #32]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d028      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bae:	4b1f      	ldr	r3, [pc, #124]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bb8:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002bc4:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bca:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d114      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002bd6:	f7fe fa71 	bl	80010bc <HAL_GetTick>
 8002bda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bde:	f7fe fa6d 	bl	80010bc <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e240      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ee      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c0c:	d114      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c22:	4902      	ldr	r1, [pc, #8]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]
 8002c28:	e00c      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40007000 	.word	0x40007000
 8002c34:	42470e40 	.word	0x42470e40
 8002c38:	4b4a      	ldr	r3, [pc, #296]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4a49      	ldr	r2, [pc, #292]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c42:	6093      	str	r3, [r2, #8]
 8002c44:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c50:	4944      	ldr	r1, [pc, #272]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d004      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002c68:	4b3f      	ldr	r3, [pc, #252]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002c6a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002c78:	4b3a      	ldr	r3, [pc, #232]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c86:	4937      	ldr	r1, [pc, #220]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c9a:	4b32      	ldr	r3, [pc, #200]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca8:	492e      	ldr	r1, [pc, #184]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d011      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cbc:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cca:	4926      	ldr	r1, [pc, #152]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002cec:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	491a      	ldr	r1, [pc, #104]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d011      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d14:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1c:	4911      	ldr	r1, [pc, #68]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d005      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d40:	f040 80ff 	bne.w	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d4a:	f7fe f9b7 	bl	80010bc <HAL_GetTick>
 8002d4e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d50:	e00e      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d52:	f7fe f9b3 	bl	80010bc <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d907      	bls.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e188      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002d64:	40023800 	.word	0x40023800
 8002d68:	424711e0 	.word	0x424711e0
 8002d6c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d70:	4b7e      	ldr	r3, [pc, #504]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ea      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d028      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d124      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002da4:	4b71      	ldr	r3, [pc, #452]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002daa:	0c1b      	lsrs	r3, r3, #16
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	3301      	adds	r3, #1
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002db6:	4b6d      	ldr	r3, [pc, #436]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dbc:	0e1b      	lsrs	r3, r3, #24
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	019b      	lsls	r3, r3, #6
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	041b      	lsls	r3, r3, #16
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	071b      	lsls	r3, r3, #28
 8002de6:	4961      	ldr	r1, [pc, #388]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d004      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d035      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e18:	d130      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002e1a:	4b54      	ldr	r3, [pc, #336]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	3301      	adds	r3, #1
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e2c:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e32:	0f1b      	lsrs	r3, r3, #28
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	019b      	lsls	r3, r3, #6
 8002e44:	431a      	orrs	r2, r3
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	041b      	lsls	r3, r3, #16
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	061b      	lsls	r3, r3, #24
 8002e56:	431a      	orrs	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	071b      	lsls	r3, r3, #28
 8002e5c:	4943      	ldr	r1, [pc, #268]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e64:	4b41      	ldr	r3, [pc, #260]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e6a:	f023 021f 	bic.w	r2, r3, #31
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	3b01      	subs	r3, #1
 8002e74:	493d      	ldr	r1, [pc, #244]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d029      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e90:	d124      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002e92:	4b36      	ldr	r3, [pc, #216]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e98:	0c1b      	lsrs	r3, r3, #16
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ea4:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eaa:	0f1b      	lsrs	r3, r3, #28
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	019b      	lsls	r3, r3, #6
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	085b      	lsrs	r3, r3, #1
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	041b      	lsls	r3, r3, #16
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	061b      	lsls	r3, r3, #24
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	071b      	lsls	r3, r3, #28
 8002ed4:	4925      	ldr	r1, [pc, #148]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d016      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	019b      	lsls	r3, r3, #6
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	3b01      	subs	r3, #1
 8002efc:	041b      	lsls	r3, r3, #16
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	061b      	lsls	r3, r3, #24
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	071b      	lsls	r3, r3, #28
 8002f0e:	4917      	ldr	r1, [pc, #92]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f1c:	f7fe f8ce 	bl	80010bc <HAL_GetTick>
 8002f20:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f24:	f7fe f8ca 	bl	80010bc <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e09f      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	f040 8095 	bne.w	8003074 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f50:	f7fe f8b4 	bl	80010bc <HAL_GetTick>
 8002f54:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f56:	e00f      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002f58:	f7fe f8b0 	bl	80010bc <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d908      	bls.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e085      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	42470068 	.word	0x42470068
 8002f74:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f78:	4b41      	ldr	r3, [pc, #260]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f84:	d0e8      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d02b      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d127      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002fae:	4b34      	ldr	r3, [pc, #208]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb4:	0c1b      	lsrs	r3, r3, #16
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	019b      	lsls	r3, r3, #6
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	041b      	lsls	r3, r3, #16
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	061b      	lsls	r3, r3, #24
 8002fdc:	4928      	ldr	r1, [pc, #160]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002fe4:	4b26      	ldr	r3, [pc, #152]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	4922      	ldr	r1, [pc, #136]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d01d      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003012:	d118      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	0e1b      	lsrs	r3, r3, #24
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	019b      	lsls	r3, r3, #6
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	3b01      	subs	r3, #1
 8003036:	041b      	lsls	r3, r3, #16
 8003038:	431a      	orrs	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	061b      	lsls	r3, r3, #24
 800303e:	4910      	ldr	r1, [pc, #64]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003046:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800304c:	f7fe f836 	bl	80010bc <HAL_GetTick>
 8003050:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003054:	f7fe f832 	bl	80010bc <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e007      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800306e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003072:	d1ef      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3730      	adds	r7, #48	; 0x30
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	42470070 	.word	0x42470070

08003088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800308c:	b0ae      	sub	sp, #184	; 0xb8
 800308e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ae:	4bcb      	ldr	r3, [pc, #812]	; (80033dc <HAL_RCC_GetSysClockFreq+0x354>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b0c      	cmp	r3, #12
 80030b8:	f200 8206 	bhi.w	80034c8 <HAL_RCC_GetSysClockFreq+0x440>
 80030bc:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80030be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c2:	bf00      	nop
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	080034c9 	.word	0x080034c9
 80030cc:	080034c9 	.word	0x080034c9
 80030d0:	080034c9 	.word	0x080034c9
 80030d4:	08003101 	.word	0x08003101
 80030d8:	080034c9 	.word	0x080034c9
 80030dc:	080034c9 	.word	0x080034c9
 80030e0:	080034c9 	.word	0x080034c9
 80030e4:	08003109 	.word	0x08003109
 80030e8:	080034c9 	.word	0x080034c9
 80030ec:	080034c9 	.word	0x080034c9
 80030f0:	080034c9 	.word	0x080034c9
 80030f4:	080032f9 	.word	0x080032f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030f8:	4bb9      	ldr	r3, [pc, #740]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80030fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80030fe:	e1e7      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003100:	4bb8      	ldr	r3, [pc, #736]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003102:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003106:	e1e3      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003108:	4bb4      	ldr	r3, [pc, #720]	; (80033dc <HAL_RCC_GetSysClockFreq+0x354>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003110:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003114:	4bb1      	ldr	r3, [pc, #708]	; (80033dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d071      	beq.n	8003204 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003120:	4bae      	ldr	r3, [pc, #696]	; (80033dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	2200      	movs	r2, #0
 8003128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800312c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003130:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003138:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800313c:	2300      	movs	r3, #0
 800313e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003142:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003146:	4622      	mov	r2, r4
 8003148:	462b      	mov	r3, r5
 800314a:	f04f 0000 	mov.w	r0, #0
 800314e:	f04f 0100 	mov.w	r1, #0
 8003152:	0159      	lsls	r1, r3, #5
 8003154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003158:	0150      	lsls	r0, r2, #5
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4621      	mov	r1, r4
 8003160:	1a51      	subs	r1, r2, r1
 8003162:	6439      	str	r1, [r7, #64]	; 0x40
 8003164:	4629      	mov	r1, r5
 8003166:	eb63 0301 	sbc.w	r3, r3, r1
 800316a:	647b      	str	r3, [r7, #68]	; 0x44
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003178:	4649      	mov	r1, r9
 800317a:	018b      	lsls	r3, r1, #6
 800317c:	4641      	mov	r1, r8
 800317e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003182:	4641      	mov	r1, r8
 8003184:	018a      	lsls	r2, r1, #6
 8003186:	4641      	mov	r1, r8
 8003188:	1a51      	subs	r1, r2, r1
 800318a:	63b9      	str	r1, [r7, #56]	; 0x38
 800318c:	4649      	mov	r1, r9
 800318e:	eb63 0301 	sbc.w	r3, r3, r1
 8003192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80031a0:	4649      	mov	r1, r9
 80031a2:	00cb      	lsls	r3, r1, #3
 80031a4:	4641      	mov	r1, r8
 80031a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031aa:	4641      	mov	r1, r8
 80031ac:	00ca      	lsls	r2, r1, #3
 80031ae:	4610      	mov	r0, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	4603      	mov	r3, r0
 80031b4:	4622      	mov	r2, r4
 80031b6:	189b      	adds	r3, r3, r2
 80031b8:	633b      	str	r3, [r7, #48]	; 0x30
 80031ba:	462b      	mov	r3, r5
 80031bc:	460a      	mov	r2, r1
 80031be:	eb42 0303 	adc.w	r3, r2, r3
 80031c2:	637b      	str	r3, [r7, #52]	; 0x34
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031d0:	4629      	mov	r1, r5
 80031d2:	024b      	lsls	r3, r1, #9
 80031d4:	4621      	mov	r1, r4
 80031d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031da:	4621      	mov	r1, r4
 80031dc:	024a      	lsls	r2, r1, #9
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80031f4:	f7fd f806 	bl	8000204 <__aeabi_uldivmod>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4613      	mov	r3, r2
 80031fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003202:	e067      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003204:	4b75      	ldr	r3, [pc, #468]	; (80033dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	099b      	lsrs	r3, r3, #6
 800320a:	2200      	movs	r2, #0
 800320c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003210:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003214:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321c:	67bb      	str	r3, [r7, #120]	; 0x78
 800321e:	2300      	movs	r3, #0
 8003220:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003222:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003226:	4622      	mov	r2, r4
 8003228:	462b      	mov	r3, r5
 800322a:	f04f 0000 	mov.w	r0, #0
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	0159      	lsls	r1, r3, #5
 8003234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003238:	0150      	lsls	r0, r2, #5
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4621      	mov	r1, r4
 8003240:	1a51      	subs	r1, r2, r1
 8003242:	62b9      	str	r1, [r7, #40]	; 0x28
 8003244:	4629      	mov	r1, r5
 8003246:	eb63 0301 	sbc.w	r3, r3, r1
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003258:	4649      	mov	r1, r9
 800325a:	018b      	lsls	r3, r1, #6
 800325c:	4641      	mov	r1, r8
 800325e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003262:	4641      	mov	r1, r8
 8003264:	018a      	lsls	r2, r1, #6
 8003266:	4641      	mov	r1, r8
 8003268:	ebb2 0a01 	subs.w	sl, r2, r1
 800326c:	4649      	mov	r1, r9
 800326e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800327e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003282:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003286:	4692      	mov	sl, r2
 8003288:	469b      	mov	fp, r3
 800328a:	4623      	mov	r3, r4
 800328c:	eb1a 0303 	adds.w	r3, sl, r3
 8003290:	623b      	str	r3, [r7, #32]
 8003292:	462b      	mov	r3, r5
 8003294:	eb4b 0303 	adc.w	r3, fp, r3
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80032a6:	4629      	mov	r1, r5
 80032a8:	028b      	lsls	r3, r1, #10
 80032aa:	4621      	mov	r1, r4
 80032ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032b0:	4621      	mov	r1, r4
 80032b2:	028a      	lsls	r2, r1, #10
 80032b4:	4610      	mov	r0, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032bc:	2200      	movs	r2, #0
 80032be:	673b      	str	r3, [r7, #112]	; 0x70
 80032c0:	677a      	str	r2, [r7, #116]	; 0x74
 80032c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80032c6:	f7fc ff9d 	bl	8000204 <__aeabi_uldivmod>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4613      	mov	r3, r2
 80032d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032d4:	4b41      	ldr	r3, [pc, #260]	; (80033dc <HAL_RCC_GetSysClockFreq+0x354>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	0c1b      	lsrs	r3, r3, #16
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	3301      	adds	r3, #1
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80032e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032f6:	e0eb      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f8:	4b38      	ldr	r3, [pc, #224]	; (80033dc <HAL_RCC_GetSysClockFreq+0x354>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003304:	4b35      	ldr	r3, [pc, #212]	; (80033dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d06b      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003310:	4b32      	ldr	r3, [pc, #200]	; (80033dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	2200      	movs	r2, #0
 8003318:	66bb      	str	r3, [r7, #104]	; 0x68
 800331a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800331c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800331e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003322:	663b      	str	r3, [r7, #96]	; 0x60
 8003324:	2300      	movs	r3, #0
 8003326:	667b      	str	r3, [r7, #100]	; 0x64
 8003328:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800332c:	4622      	mov	r2, r4
 800332e:	462b      	mov	r3, r5
 8003330:	f04f 0000 	mov.w	r0, #0
 8003334:	f04f 0100 	mov.w	r1, #0
 8003338:	0159      	lsls	r1, r3, #5
 800333a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800333e:	0150      	lsls	r0, r2, #5
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4621      	mov	r1, r4
 8003346:	1a51      	subs	r1, r2, r1
 8003348:	61b9      	str	r1, [r7, #24]
 800334a:	4629      	mov	r1, r5
 800334c:	eb63 0301 	sbc.w	r3, r3, r1
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800335e:	4659      	mov	r1, fp
 8003360:	018b      	lsls	r3, r1, #6
 8003362:	4651      	mov	r1, sl
 8003364:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003368:	4651      	mov	r1, sl
 800336a:	018a      	lsls	r2, r1, #6
 800336c:	4651      	mov	r1, sl
 800336e:	ebb2 0801 	subs.w	r8, r2, r1
 8003372:	4659      	mov	r1, fp
 8003374:	eb63 0901 	sbc.w	r9, r3, r1
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003384:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003388:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800338c:	4690      	mov	r8, r2
 800338e:	4699      	mov	r9, r3
 8003390:	4623      	mov	r3, r4
 8003392:	eb18 0303 	adds.w	r3, r8, r3
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	462b      	mov	r3, r5
 800339a:	eb49 0303 	adc.w	r3, r9, r3
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80033ac:	4629      	mov	r1, r5
 80033ae:	024b      	lsls	r3, r1, #9
 80033b0:	4621      	mov	r1, r4
 80033b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033b6:	4621      	mov	r1, r4
 80033b8:	024a      	lsls	r2, r1, #9
 80033ba:	4610      	mov	r0, r2
 80033bc:	4619      	mov	r1, r3
 80033be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033c2:	2200      	movs	r2, #0
 80033c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80033c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80033c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033cc:	f7fc ff1a 	bl	8000204 <__aeabi_uldivmod>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4613      	mov	r3, r2
 80033d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033da:	e065      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x420>
 80033dc:	40023800 	.word	0x40023800
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e8:	4b3d      	ldr	r3, [pc, #244]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	2200      	movs	r2, #0
 80033f0:	4618      	mov	r0, r3
 80033f2:	4611      	mov	r1, r2
 80033f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033f8:	653b      	str	r3, [r7, #80]	; 0x50
 80033fa:	2300      	movs	r3, #0
 80033fc:	657b      	str	r3, [r7, #84]	; 0x54
 80033fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003402:	4642      	mov	r2, r8
 8003404:	464b      	mov	r3, r9
 8003406:	f04f 0000 	mov.w	r0, #0
 800340a:	f04f 0100 	mov.w	r1, #0
 800340e:	0159      	lsls	r1, r3, #5
 8003410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003414:	0150      	lsls	r0, r2, #5
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4641      	mov	r1, r8
 800341c:	1a51      	subs	r1, r2, r1
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	4649      	mov	r1, r9
 8003422:	eb63 0301 	sbc.w	r3, r3, r1
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003434:	4659      	mov	r1, fp
 8003436:	018b      	lsls	r3, r1, #6
 8003438:	4651      	mov	r1, sl
 800343a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800343e:	4651      	mov	r1, sl
 8003440:	018a      	lsls	r2, r1, #6
 8003442:	4651      	mov	r1, sl
 8003444:	1a54      	subs	r4, r2, r1
 8003446:	4659      	mov	r1, fp
 8003448:	eb63 0501 	sbc.w	r5, r3, r1
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	00eb      	lsls	r3, r5, #3
 8003456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800345a:	00e2      	lsls	r2, r4, #3
 800345c:	4614      	mov	r4, r2
 800345e:	461d      	mov	r5, r3
 8003460:	4643      	mov	r3, r8
 8003462:	18e3      	adds	r3, r4, r3
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	464b      	mov	r3, r9
 8003468:	eb45 0303 	adc.w	r3, r5, r3
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9d7 4500 	ldrd	r4, r5, [r7]
 800347a:	4629      	mov	r1, r5
 800347c:	028b      	lsls	r3, r1, #10
 800347e:	4621      	mov	r1, r4
 8003480:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003484:	4621      	mov	r1, r4
 8003486:	028a      	lsls	r2, r1, #10
 8003488:	4610      	mov	r0, r2
 800348a:	4619      	mov	r1, r3
 800348c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003490:	2200      	movs	r2, #0
 8003492:	64bb      	str	r3, [r7, #72]	; 0x48
 8003494:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003496:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800349a:	f7fc feb3 	bl	8000204 <__aeabi_uldivmod>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4613      	mov	r3, r2
 80034a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034a8:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	0f1b      	lsrs	r3, r3, #28
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80034b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80034be:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034c6:	e003      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034c8:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80034ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	37b8      	adds	r7, #184	; 0xb8
 80034d8:	46bd      	mov	sp, r7
 80034da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	00f42400 	.word	0x00f42400

080034e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e28d      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8083 	beq.w	800360e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003508:	4b94      	ldr	r3, [pc, #592]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b04      	cmp	r3, #4
 8003512:	d019      	beq.n	8003548 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003514:	4b91      	ldr	r3, [pc, #580]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800351c:	2b08      	cmp	r3, #8
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003520:	4b8e      	ldr	r3, [pc, #568]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800352c:	d00c      	beq.n	8003548 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352e:	4b8b      	ldr	r3, [pc, #556]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d112      	bne.n	8003560 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353a:	4b88      	ldr	r3, [pc, #544]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003546:	d10b      	bne.n	8003560 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	4b84      	ldr	r3, [pc, #528]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d05b      	beq.n	800360c <HAL_RCC_OscConfig+0x124>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d157      	bne.n	800360c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e25a      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003568:	d106      	bne.n	8003578 <HAL_RCC_OscConfig+0x90>
 800356a:	4b7c      	ldr	r3, [pc, #496]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a7b      	ldr	r2, [pc, #492]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e01d      	b.n	80035b4 <HAL_RCC_OscConfig+0xcc>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0xb4>
 8003582:	4b76      	ldr	r3, [pc, #472]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a75      	ldr	r2, [pc, #468]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b73      	ldr	r3, [pc, #460]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a72      	ldr	r2, [pc, #456]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e00b      	b.n	80035b4 <HAL_RCC_OscConfig+0xcc>
 800359c:	4b6f      	ldr	r3, [pc, #444]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a6e      	ldr	r2, [pc, #440]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4b6c      	ldr	r3, [pc, #432]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6b      	ldr	r2, [pc, #428]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d013      	beq.n	80035e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fd fd7e 	bl	80010bc <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fd fd7a 	bl	80010bc <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e21f      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b61      	ldr	r3, [pc, #388]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0xdc>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fd fd6a 	bl	80010bc <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fd fd66 	bl	80010bc <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e20b      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	4b57      	ldr	r3, [pc, #348]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x104>
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d06f      	beq.n	80036fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800361a:	4b50      	ldr	r3, [pc, #320]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b00      	cmp	r3, #0
 8003624:	d017      	beq.n	8003656 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003626:	4b4d      	ldr	r3, [pc, #308]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800362e:	2b08      	cmp	r3, #8
 8003630:	d105      	bne.n	800363e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003632:	4b4a      	ldr	r3, [pc, #296]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363e:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d11c      	bne.n	8003684 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364a:	4b44      	ldr	r3, [pc, #272]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d116      	bne.n	8003684 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003656:	4b41      	ldr	r3, [pc, #260]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_RCC_OscConfig+0x186>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e1d3      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366e:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4937      	ldr	r1, [pc, #220]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003682:	e03a      	b.n	80036fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d020      	beq.n	80036ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800368c:	4b34      	ldr	r3, [pc, #208]	; (8003760 <HAL_RCC_OscConfig+0x278>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003692:	f7fd fd13 	bl	80010bc <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369a:	f7fd fd0f 	bl	80010bc <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e1b4      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	4b2b      	ldr	r3, [pc, #172]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b8:	4b28      	ldr	r3, [pc, #160]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4925      	ldr	r1, [pc, #148]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]
 80036cc:	e015      	b.n	80036fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <HAL_RCC_OscConfig+0x278>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fd fcf2 	bl	80010bc <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036dc:	f7fd fcee 	bl	80010bc <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e193      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d036      	beq.n	8003774 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d016      	beq.n	800373c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fd fcd2 	bl	80010bc <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800371c:	f7fd fcce 	bl	80010bc <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e173      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x234>
 800373a:	e01b      	b.n	8003774 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003742:	f7fd fcbb 	bl	80010bc <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003748:	e00e      	b.n	8003768 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374a:	f7fd fcb7 	bl	80010bc <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d907      	bls.n	8003768 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e15c      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
 800375c:	40023800 	.word	0x40023800
 8003760:	42470000 	.word	0x42470000
 8003764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003768:	4b8a      	ldr	r3, [pc, #552]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800376a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1ea      	bne.n	800374a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8097 	beq.w	80038b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003786:	4b83      	ldr	r3, [pc, #524]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	4b7f      	ldr	r3, [pc, #508]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a7e      	ldr	r2, [pc, #504]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b7c      	ldr	r3, [pc, #496]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b79      	ldr	r3, [pc, #484]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d118      	bne.n	80037f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037be:	4b76      	ldr	r3, [pc, #472]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a75      	ldr	r2, [pc, #468]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ca:	f7fd fc77 	bl	80010bc <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d2:	f7fd fc73 	bl	80010bc <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e118      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e4:	4b6c      	ldr	r3, [pc, #432]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d106      	bne.n	8003806 <HAL_RCC_OscConfig+0x31e>
 80037f8:	4b66      	ldr	r3, [pc, #408]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	4a65      	ldr	r2, [pc, #404]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6713      	str	r3, [r2, #112]	; 0x70
 8003804:	e01c      	b.n	8003840 <HAL_RCC_OscConfig+0x358>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b05      	cmp	r3, #5
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x340>
 800380e:	4b61      	ldr	r3, [pc, #388]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	4a60      	ldr	r2, [pc, #384]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	6713      	str	r3, [r2, #112]	; 0x70
 800381a:	4b5e      	ldr	r3, [pc, #376]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a5d      	ldr	r2, [pc, #372]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0x358>
 8003828:	4b5a      	ldr	r3, [pc, #360]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	4a59      	ldr	r2, [pc, #356]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800382e:	f023 0301 	bic.w	r3, r3, #1
 8003832:	6713      	str	r3, [r2, #112]	; 0x70
 8003834:	4b57      	ldr	r3, [pc, #348]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	4a56      	ldr	r2, [pc, #344]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800383a:	f023 0304 	bic.w	r3, r3, #4
 800383e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d015      	beq.n	8003874 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fd fc38 	bl	80010bc <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fd fc34 	bl	80010bc <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0d7      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003866:	4b4b      	ldr	r3, [pc, #300]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0ee      	beq.n	8003850 <HAL_RCC_OscConfig+0x368>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fd fc22 	bl	80010bc <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387a:	e00a      	b.n	8003892 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800387c:	f7fd fc1e 	bl	80010bc <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	; 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0c1      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003892:	4b40      	ldr	r3, [pc, #256]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ee      	bne.n	800387c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a4:	4b3b      	ldr	r3, [pc, #236]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	4a3a      	ldr	r2, [pc, #232]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80ad 	beq.w	8003a14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ba:	4b36      	ldr	r3, [pc, #216]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d060      	beq.n	8003988 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d145      	bne.n	800395a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ce:	4b33      	ldr	r3, [pc, #204]	; (800399c <HAL_RCC_OscConfig+0x4b4>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fd fbf2 	bl	80010bc <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fd fbee 	bl	80010bc <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e093      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	4b29      	ldr	r3, [pc, #164]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	019b      	lsls	r3, r3, #6
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	085b      	lsrs	r3, r3, #1
 8003912:	3b01      	subs	r3, #1
 8003914:	041b      	lsls	r3, r3, #16
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	071b      	lsls	r3, r3, #28
 8003926:	491b      	ldr	r1, [pc, #108]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_RCC_OscConfig+0x4b4>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fd fbc3 	bl	80010bc <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393a:	f7fd fbbf 	bl	80010bc <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e064      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x452>
 8003958:	e05c      	b.n	8003a14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_RCC_OscConfig+0x4b4>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd fbac 	bl	80010bc <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003968:	f7fd fba8 	bl	80010bc <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e04d      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x480>
 8003986:	e045      	b.n	8003a14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d107      	bne.n	80039a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e040      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
 8003994:	40023800 	.word	0x40023800
 8003998:	40007000 	.word	0x40007000
 800399c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039a0:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <HAL_RCC_OscConfig+0x538>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d030      	beq.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d129      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d122      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039d0:	4013      	ands	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d8:	4293      	cmp	r3, r2
 80039da:	d119      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	3b01      	subs	r3, #1
 80039ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d10f      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d107      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800

08003a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e03f      	b.n	8003ab6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fc ff06 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f929 	bl	8003cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b08a      	sub	sp, #40	; 0x28
 8003ac2:	af02      	add	r7, sp, #8
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d17c      	bne.n	8003bd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_UART_Transmit+0x2c>
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e075      	b.n	8003bda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_UART_Transmit+0x3e>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e06e      	b.n	8003bda <HAL_UART_Transmit+0x11c>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2221      	movs	r2, #33	; 0x21
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b12:	f7fd fad3 	bl	80010bc <HAL_GetTick>
 8003b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	88fa      	ldrh	r2, [r7, #6]
 8003b22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	d108      	bne.n	8003b40 <HAL_UART_Transmit+0x82>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d104      	bne.n	8003b40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e003      	b.n	8003b48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b50:	e02a      	b.n	8003ba8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f840 	bl	8003be2 <UART_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e036      	b.n	8003bda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3302      	adds	r3, #2
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e007      	b.n	8003b9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	3301      	adds	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1cf      	bne.n	8003b52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2140      	movs	r1, #64	; 0x40
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f810 	bl	8003be2 <UART_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e006      	b.n	8003bda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b090      	sub	sp, #64	; 0x40
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf2:	e050      	b.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfa:	d04c      	beq.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c02:	f7fd fa5b 	bl	80010bc <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d241      	bcs.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	330c      	adds	r3, #12
 8003c18:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c32:	637a      	str	r2, [r7, #52]	; 0x34
 8003c34:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e5      	bne.n	8003c12 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3314      	adds	r3, #20
 8003c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	613b      	str	r3, [r7, #16]
   return(result);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3314      	adds	r3, #20
 8003c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c66:	623a      	str	r2, [r7, #32]
 8003c68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	69f9      	ldr	r1, [r7, #28]
 8003c6c:	6a3a      	ldr	r2, [r7, #32]
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e5      	bne.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e00f      	b.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	bf0c      	ite	eq
 8003ca6:	2301      	moveq	r3, #1
 8003ca8:	2300      	movne	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d09f      	beq.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3740      	adds	r7, #64	; 0x40
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc4:	b0c0      	sub	sp, #256	; 0x100
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	68d9      	ldr	r1, [r3, #12]
 8003cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	ea40 0301 	orr.w	r3, r0, r1
 8003ce8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d18:	f021 010c 	bic.w	r1, r1, #12
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d26:	430b      	orrs	r3, r1
 8003d28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3a:	6999      	ldr	r1, [r3, #24]
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	ea40 0301 	orr.w	r3, r0, r1
 8003d46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4b8f      	ldr	r3, [pc, #572]	; (8003f8c <UART_SetConfig+0x2cc>)
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d005      	beq.n	8003d60 <UART_SetConfig+0xa0>
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b8d      	ldr	r3, [pc, #564]	; (8003f90 <UART_SetConfig+0x2d0>)
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d104      	bne.n	8003d6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d60:	f7fe fe54 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8003d64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d68:	e003      	b.n	8003d72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d6a:	f7fe fe3b 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 8003d6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7c:	f040 810c 	bne.w	8003f98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d92:	4622      	mov	r2, r4
 8003d94:	462b      	mov	r3, r5
 8003d96:	1891      	adds	r1, r2, r2
 8003d98:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d9a:	415b      	adcs	r3, r3
 8003d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003da2:	4621      	mov	r1, r4
 8003da4:	eb12 0801 	adds.w	r8, r2, r1
 8003da8:	4629      	mov	r1, r5
 8003daa:	eb43 0901 	adc.w	r9, r3, r1
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dc2:	4690      	mov	r8, r2
 8003dc4:	4699      	mov	r9, r3
 8003dc6:	4623      	mov	r3, r4
 8003dc8:	eb18 0303 	adds.w	r3, r8, r3
 8003dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003dd0:	462b      	mov	r3, r5
 8003dd2:	eb49 0303 	adc.w	r3, r9, r3
 8003dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003de6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003dea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dee:	460b      	mov	r3, r1
 8003df0:	18db      	adds	r3, r3, r3
 8003df2:	653b      	str	r3, [r7, #80]	; 0x50
 8003df4:	4613      	mov	r3, r2
 8003df6:	eb42 0303 	adc.w	r3, r2, r3
 8003dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8003dfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e04:	f7fc f9fe 	bl	8000204 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4b61      	ldr	r3, [pc, #388]	; (8003f94 <UART_SetConfig+0x2d4>)
 8003e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	011c      	lsls	r4, r3, #4
 8003e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e28:	4642      	mov	r2, r8
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	1891      	adds	r1, r2, r2
 8003e2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e30:	415b      	adcs	r3, r3
 8003e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e38:	4641      	mov	r1, r8
 8003e3a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e3e:	4649      	mov	r1, r9
 8003e40:	eb43 0b01 	adc.w	fp, r3, r1
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e58:	4692      	mov	sl, r2
 8003e5a:	469b      	mov	fp, r3
 8003e5c:	4643      	mov	r3, r8
 8003e5e:	eb1a 0303 	adds.w	r3, sl, r3
 8003e62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e66:	464b      	mov	r3, r9
 8003e68:	eb4b 0303 	adc.w	r3, fp, r3
 8003e6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e84:	460b      	mov	r3, r1
 8003e86:	18db      	adds	r3, r3, r3
 8003e88:	643b      	str	r3, [r7, #64]	; 0x40
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	eb42 0303 	adc.w	r3, r2, r3
 8003e90:	647b      	str	r3, [r7, #68]	; 0x44
 8003e92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e9a:	f7fc f9b3 	bl	8000204 <__aeabi_uldivmod>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	4b3b      	ldr	r3, [pc, #236]	; (8003f94 <UART_SetConfig+0x2d4>)
 8003ea6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	2264      	movs	r2, #100	; 0x64
 8003eae:	fb02 f303 	mul.w	r3, r2, r3
 8003eb2:	1acb      	subs	r3, r1, r3
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003eba:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <UART_SetConfig+0x2d4>)
 8003ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ec8:	441c      	add	r4, r3
 8003eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ed4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ed8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003edc:	4642      	mov	r2, r8
 8003ede:	464b      	mov	r3, r9
 8003ee0:	1891      	adds	r1, r2, r2
 8003ee2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ee4:	415b      	adcs	r3, r3
 8003ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003eec:	4641      	mov	r1, r8
 8003eee:	1851      	adds	r1, r2, r1
 8003ef0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	414b      	adcs	r3, r1
 8003ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f04:	4659      	mov	r1, fp
 8003f06:	00cb      	lsls	r3, r1, #3
 8003f08:	4651      	mov	r1, sl
 8003f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f0e:	4651      	mov	r1, sl
 8003f10:	00ca      	lsls	r2, r1, #3
 8003f12:	4610      	mov	r0, r2
 8003f14:	4619      	mov	r1, r3
 8003f16:	4603      	mov	r3, r0
 8003f18:	4642      	mov	r2, r8
 8003f1a:	189b      	adds	r3, r3, r2
 8003f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f20:	464b      	mov	r3, r9
 8003f22:	460a      	mov	r2, r1
 8003f24:	eb42 0303 	adc.w	r3, r2, r3
 8003f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f40:	460b      	mov	r3, r1
 8003f42:	18db      	adds	r3, r3, r3
 8003f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f46:	4613      	mov	r3, r2
 8003f48:	eb42 0303 	adc.w	r3, r2, r3
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f56:	f7fc f955 	bl	8000204 <__aeabi_uldivmod>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <UART_SetConfig+0x2d4>)
 8003f60:	fba3 1302 	umull	r1, r3, r3, r2
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	2164      	movs	r1, #100	; 0x64
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	3332      	adds	r3, #50	; 0x32
 8003f72:	4a08      	ldr	r2, [pc, #32]	; (8003f94 <UART_SetConfig+0x2d4>)
 8003f74:	fba2 2303 	umull	r2, r3, r2, r3
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	f003 0207 	and.w	r2, r3, #7
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4422      	add	r2, r4
 8003f86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f88:	e105      	b.n	8004196 <UART_SetConfig+0x4d6>
 8003f8a:	bf00      	nop
 8003f8c:	40011000 	.word	0x40011000
 8003f90:	40011400 	.word	0x40011400
 8003f94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fa2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003faa:	4642      	mov	r2, r8
 8003fac:	464b      	mov	r3, r9
 8003fae:	1891      	adds	r1, r2, r2
 8003fb0:	6239      	str	r1, [r7, #32]
 8003fb2:	415b      	adcs	r3, r3
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fba:	4641      	mov	r1, r8
 8003fbc:	1854      	adds	r4, r2, r1
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	eb43 0501 	adc.w	r5, r3, r1
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	00eb      	lsls	r3, r5, #3
 8003fce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fd2:	00e2      	lsls	r2, r4, #3
 8003fd4:	4614      	mov	r4, r2
 8003fd6:	461d      	mov	r5, r3
 8003fd8:	4643      	mov	r3, r8
 8003fda:	18e3      	adds	r3, r4, r3
 8003fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	eb45 0303 	adc.w	r3, r5, r3
 8003fe6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ff6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004006:	4629      	mov	r1, r5
 8004008:	008b      	lsls	r3, r1, #2
 800400a:	4621      	mov	r1, r4
 800400c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004010:	4621      	mov	r1, r4
 8004012:	008a      	lsls	r2, r1, #2
 8004014:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004018:	f7fc f8f4 	bl	8000204 <__aeabi_uldivmod>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4b60      	ldr	r3, [pc, #384]	; (80041a4 <UART_SetConfig+0x4e4>)
 8004022:	fba3 2302 	umull	r2, r3, r3, r2
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	011c      	lsls	r4, r3, #4
 800402a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800402e:	2200      	movs	r2, #0
 8004030:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004034:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004038:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800403c:	4642      	mov	r2, r8
 800403e:	464b      	mov	r3, r9
 8004040:	1891      	adds	r1, r2, r2
 8004042:	61b9      	str	r1, [r7, #24]
 8004044:	415b      	adcs	r3, r3
 8004046:	61fb      	str	r3, [r7, #28]
 8004048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800404c:	4641      	mov	r1, r8
 800404e:	1851      	adds	r1, r2, r1
 8004050:	6139      	str	r1, [r7, #16]
 8004052:	4649      	mov	r1, r9
 8004054:	414b      	adcs	r3, r1
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004064:	4659      	mov	r1, fp
 8004066:	00cb      	lsls	r3, r1, #3
 8004068:	4651      	mov	r1, sl
 800406a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800406e:	4651      	mov	r1, sl
 8004070:	00ca      	lsls	r2, r1, #3
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	4603      	mov	r3, r0
 8004078:	4642      	mov	r2, r8
 800407a:	189b      	adds	r3, r3, r2
 800407c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004080:	464b      	mov	r3, r9
 8004082:	460a      	mov	r2, r1
 8004084:	eb42 0303 	adc.w	r3, r2, r3
 8004088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	67bb      	str	r3, [r7, #120]	; 0x78
 8004096:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040a4:	4649      	mov	r1, r9
 80040a6:	008b      	lsls	r3, r1, #2
 80040a8:	4641      	mov	r1, r8
 80040aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ae:	4641      	mov	r1, r8
 80040b0:	008a      	lsls	r2, r1, #2
 80040b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040b6:	f7fc f8a5 	bl	8000204 <__aeabi_uldivmod>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <UART_SetConfig+0x4e4>)
 80040c0:	fba3 1302 	umull	r1, r3, r3, r2
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	2164      	movs	r1, #100	; 0x64
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	3332      	adds	r3, #50	; 0x32
 80040d2:	4a34      	ldr	r2, [pc, #208]	; (80041a4 <UART_SetConfig+0x4e4>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040de:	441c      	add	r4, r3
 80040e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e4:	2200      	movs	r2, #0
 80040e6:	673b      	str	r3, [r7, #112]	; 0x70
 80040e8:	677a      	str	r2, [r7, #116]	; 0x74
 80040ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040ee:	4642      	mov	r2, r8
 80040f0:	464b      	mov	r3, r9
 80040f2:	1891      	adds	r1, r2, r2
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	415b      	adcs	r3, r3
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040fe:	4641      	mov	r1, r8
 8004100:	1851      	adds	r1, r2, r1
 8004102:	6039      	str	r1, [r7, #0]
 8004104:	4649      	mov	r1, r9
 8004106:	414b      	adcs	r3, r1
 8004108:	607b      	str	r3, [r7, #4]
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004116:	4659      	mov	r1, fp
 8004118:	00cb      	lsls	r3, r1, #3
 800411a:	4651      	mov	r1, sl
 800411c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004120:	4651      	mov	r1, sl
 8004122:	00ca      	lsls	r2, r1, #3
 8004124:	4610      	mov	r0, r2
 8004126:	4619      	mov	r1, r3
 8004128:	4603      	mov	r3, r0
 800412a:	4642      	mov	r2, r8
 800412c:	189b      	adds	r3, r3, r2
 800412e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004130:	464b      	mov	r3, r9
 8004132:	460a      	mov	r2, r1
 8004134:	eb42 0303 	adc.w	r3, r2, r3
 8004138:	66fb      	str	r3, [r7, #108]	; 0x6c
 800413a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	663b      	str	r3, [r7, #96]	; 0x60
 8004144:	667a      	str	r2, [r7, #100]	; 0x64
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004152:	4649      	mov	r1, r9
 8004154:	008b      	lsls	r3, r1, #2
 8004156:	4641      	mov	r1, r8
 8004158:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800415c:	4641      	mov	r1, r8
 800415e:	008a      	lsls	r2, r1, #2
 8004160:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004164:	f7fc f84e 	bl	8000204 <__aeabi_uldivmod>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <UART_SetConfig+0x4e4>)
 800416e:	fba3 1302 	umull	r1, r3, r3, r2
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2164      	movs	r1, #100	; 0x64
 8004176:	fb01 f303 	mul.w	r3, r1, r3
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	3332      	adds	r3, #50	; 0x32
 8004180:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <UART_SetConfig+0x4e4>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	f003 020f 	and.w	r2, r3, #15
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4422      	add	r2, r4
 8004194:	609a      	str	r2, [r3, #8]
}
 8004196:	bf00      	nop
 8004198:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800419c:	46bd      	mov	sp, r7
 800419e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041a2:	bf00      	nop
 80041a4:	51eb851f 	.word	0x51eb851f

080041a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041a8:	b084      	sub	sp, #16
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	f107 001c 	add.w	r0, r7, #28
 80041b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d122      	bne.n	8004206 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d105      	bne.n	80041fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fa9c 	bl	8004738 <USB_CoreReset>
 8004200:	4603      	mov	r3, r0
 8004202:	73fb      	strb	r3, [r7, #15]
 8004204:	e01a      	b.n	800423c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa90 	bl	8004738 <USB_CoreReset>
 8004218:	4603      	mov	r3, r0
 800421a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800421c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	639a      	str	r2, [r3, #56]	; 0x38
 800422e:	e005      	b.n	800423c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423e:	2b01      	cmp	r3, #1
 8004240:	d10b      	bne.n	800425a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f043 0206 	orr.w	r2, r3, #6
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f043 0220 	orr.w	r2, r3, #32
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800425a:	7bfb      	ldrb	r3, [r7, #15]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004266:	b004      	add	sp, #16
 8004268:	4770      	bx	lr

0800426a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f023 0201 	bic.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d115      	bne.n	80042da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042ba:	2001      	movs	r0, #1
 80042bc:	f7fc ff0a 	bl	80010d4 <HAL_Delay>
      ms++;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3301      	adds	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fa28 	bl	800471c <USB_GetMode>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d01e      	beq.n	8004310 <USB_SetCurrentMode+0x84>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b31      	cmp	r3, #49	; 0x31
 80042d6:	d9f0      	bls.n	80042ba <USB_SetCurrentMode+0x2e>
 80042d8:	e01a      	b.n	8004310 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d115      	bne.n	800430c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042ec:	2001      	movs	r0, #1
 80042ee:	f7fc fef1 	bl	80010d4 <HAL_Delay>
      ms++;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3301      	adds	r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fa0f 	bl	800471c <USB_GetMode>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <USB_SetCurrentMode+0x84>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b31      	cmp	r3, #49	; 0x31
 8004308:	d9f0      	bls.n	80042ec <USB_SetCurrentMode+0x60>
 800430a:	e001      	b.n	8004310 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e005      	b.n	800431c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b32      	cmp	r3, #50	; 0x32
 8004314:	d101      	bne.n	800431a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004324:	b084      	sub	sp, #16
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	e009      	b.n	8004358 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	3340      	adds	r3, #64	; 0x40
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	2200      	movs	r2, #0
 8004350:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	3301      	adds	r3, #1
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2b0e      	cmp	r3, #14
 800435c:	d9f2      	bls.n	8004344 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800435e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d11c      	bne.n	800439e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004372:	f043 0302 	orr.w	r3, r3, #2
 8004376:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	e005      	b.n	80043aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043b0:	461a      	mov	r2, r3
 80043b2:	2300      	movs	r3, #0
 80043b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043bc:	4619      	mov	r1, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c4:	461a      	mov	r2, r3
 80043c6:	680b      	ldr	r3, [r1, #0]
 80043c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d10c      	bne.n	80043ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d104      	bne.n	80043e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043d6:	2100      	movs	r1, #0
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f965 	bl	80046a8 <USB_SetDevSpeed>
 80043de:	e008      	b.n	80043f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043e0:	2101      	movs	r1, #1
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f960 	bl	80046a8 <USB_SetDevSpeed>
 80043e8:	e003      	b.n	80043f2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043ea:	2103      	movs	r1, #3
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f95b 	bl	80046a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043f2:	2110      	movs	r1, #16
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f8f3 	bl	80045e0 <USB_FlushTxFifo>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f91f 	bl	8004648 <USB_FlushRxFifo>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441a:	461a      	mov	r2, r3
 800441c:	2300      	movs	r3, #0
 800441e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004426:	461a      	mov	r2, r3
 8004428:	2300      	movs	r3, #0
 800442a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004432:	461a      	mov	r2, r3
 8004434:	2300      	movs	r3, #0
 8004436:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004438:	2300      	movs	r3, #0
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	e043      	b.n	80044c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004454:	d118      	bne.n	8004488 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10a      	bne.n	8004472 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004468:	461a      	mov	r2, r3
 800446a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	e013      	b.n	800449a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447e:	461a      	mov	r2, r3
 8004480:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e008      	b.n	800449a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004494:	461a      	mov	r2, r3
 8004496:	2300      	movs	r3, #0
 8004498:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a6:	461a      	mov	r2, r3
 80044a8:	2300      	movs	r3, #0
 80044aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b8:	461a      	mov	r2, r3
 80044ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	3301      	adds	r3, #1
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d3b7      	bcc.n	800443e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e043      	b.n	800455c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044ea:	d118      	bne.n	800451e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fe:	461a      	mov	r2, r3
 8004500:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	e013      	b.n	8004530 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004514:	461a      	mov	r2, r3
 8004516:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e008      	b.n	8004530 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452a:	461a      	mov	r2, r3
 800452c:	2300      	movs	r3, #0
 800452e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	461a      	mov	r2, r3
 800453e:	2300      	movs	r3, #0
 8004540:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454e:	461a      	mov	r2, r3
 8004550:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004554:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	3301      	adds	r3, #1
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	429a      	cmp	r2, r3
 8004562:	d3b7      	bcc.n	80044d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004576:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004584:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	f043 0210 	orr.w	r2, r3, #16
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <USB_DevInit+0x2b8>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	f043 0208 	orr.w	r2, r3, #8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d107      	bne.n	80045cc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045c4:	f043 0304 	orr.w	r3, r3, #4
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045d8:	b004      	add	sp, #16
 80045da:	4770      	bx	lr
 80045dc:	803c3800 	.word	0x803c3800

080045e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3301      	adds	r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4a13      	ldr	r2, [pc, #76]	; (8004644 <USB_FlushTxFifo+0x64>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e01b      	b.n	8004638 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	daf2      	bge.n	80045ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	019b      	lsls	r3, r3, #6
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3301      	adds	r3, #1
 800461c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4a08      	ldr	r2, [pc, #32]	; (8004644 <USB_FlushTxFifo+0x64>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e006      	b.n	8004638 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b20      	cmp	r3, #32
 8004634:	d0f0      	beq.n	8004618 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	00030d40 	.word	0x00030d40

08004648 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3301      	adds	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4a11      	ldr	r2, [pc, #68]	; (80046a4 <USB_FlushRxFifo+0x5c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d901      	bls.n	8004666 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e018      	b.n	8004698 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	daf2      	bge.n	8004654 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2210      	movs	r2, #16
 8004676:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3301      	adds	r3, #1
 800467c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <USB_FlushRxFifo+0x5c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e006      	b.n	8004698 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	2b10      	cmp	r3, #16
 8004694:	d0f0      	beq.n	8004678 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	00030d40 	.word	0x00030d40

080046a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	68f9      	ldr	r1, [r7, #12]
 80046c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046c8:	4313      	orrs	r3, r2
 80046ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046f4:	f023 0303 	bic.w	r3, r3, #3
 80046f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004708:	f043 0302 	orr.w	r3, r3, #2
 800470c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	f003 0301 	and.w	r3, r3, #1
}
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3301      	adds	r3, #1
 8004748:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4a13      	ldr	r2, [pc, #76]	; (800479c <USB_CoreReset+0x64>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e01b      	b.n	800478e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	daf2      	bge.n	8004744 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f043 0201 	orr.w	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3301      	adds	r3, #1
 8004772:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4a09      	ldr	r2, [pc, #36]	; (800479c <USB_CoreReset+0x64>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d901      	bls.n	8004780 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e006      	b.n	800478e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b01      	cmp	r3, #1
 800478a:	d0f0      	beq.n	800476e <USB_CoreReset+0x36>

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	00030d40 	.word	0x00030d40

080047a0 <__libc_init_array>:
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	4d0d      	ldr	r5, [pc, #52]	; (80047d8 <__libc_init_array+0x38>)
 80047a4:	4c0d      	ldr	r4, [pc, #52]	; (80047dc <__libc_init_array+0x3c>)
 80047a6:	1b64      	subs	r4, r4, r5
 80047a8:	10a4      	asrs	r4, r4, #2
 80047aa:	2600      	movs	r6, #0
 80047ac:	42a6      	cmp	r6, r4
 80047ae:	d109      	bne.n	80047c4 <__libc_init_array+0x24>
 80047b0:	4d0b      	ldr	r5, [pc, #44]	; (80047e0 <__libc_init_array+0x40>)
 80047b2:	4c0c      	ldr	r4, [pc, #48]	; (80047e4 <__libc_init_array+0x44>)
 80047b4:	f000 f820 	bl	80047f8 <_init>
 80047b8:	1b64      	subs	r4, r4, r5
 80047ba:	10a4      	asrs	r4, r4, #2
 80047bc:	2600      	movs	r6, #0
 80047be:	42a6      	cmp	r6, r4
 80047c0:	d105      	bne.n	80047ce <__libc_init_array+0x2e>
 80047c2:	bd70      	pop	{r4, r5, r6, pc}
 80047c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c8:	4798      	blx	r3
 80047ca:	3601      	adds	r6, #1
 80047cc:	e7ee      	b.n	80047ac <__libc_init_array+0xc>
 80047ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d2:	4798      	blx	r3
 80047d4:	3601      	adds	r6, #1
 80047d6:	e7f2      	b.n	80047be <__libc_init_array+0x1e>
 80047d8:	08004908 	.word	0x08004908
 80047dc:	08004908 	.word	0x08004908
 80047e0:	08004908 	.word	0x08004908
 80047e4:	0800490c 	.word	0x0800490c

080047e8 <memset>:
 80047e8:	4402      	add	r2, r0
 80047ea:	4603      	mov	r3, r0
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d100      	bne.n	80047f2 <memset+0xa>
 80047f0:	4770      	bx	lr
 80047f2:	f803 1b01 	strb.w	r1, [r3], #1
 80047f6:	e7f9      	b.n	80047ec <memset+0x4>

080047f8 <_init>:
 80047f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fa:	bf00      	nop
 80047fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fe:	bc08      	pop	{r3}
 8004800:	469e      	mov	lr, r3
 8004802:	4770      	bx	lr

08004804 <_fini>:
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	bf00      	nop
 8004808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480a:	bc08      	pop	{r3}
 800480c:	469e      	mov	lr, r3
 800480e:	4770      	bx	lr

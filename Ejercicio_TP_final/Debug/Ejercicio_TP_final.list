
Ejercicio_TP_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800426c  0800426c  0001426c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004284  08004284  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004284  08004284  00014284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800428c  0800428c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800428c  0800428c  0001428c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004290  08004290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  2000000c  080042a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  080042a0  000205d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5c0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efa  00000000  00000000  0002f5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  000314f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00032178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021af3  00000000  00000000  00032d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001012c  00000000  00000000  0005484b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc592  00000000  00000000  00064977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130f09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003538  00000000  00000000  00130f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004254 	.word	0x08004254

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004254 	.word	0x08004254

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fb9d 	bl	8000c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f867 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f957 	bl	80007c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800051a:	f000 f8fd 	bl	8000718 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800051e:	f000 f925 	bl	800076c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000522:	f000 f8cb 	bl	80006bc <MX_I2C1_Init>
  //bool_t estado_2 = readKey();
  //debounceFSM_init();			//Inicio de MEF que ve el estado del boton de usuario
  /* USER CODE END 2 */

  //Seteo del acelerómetro para qeu empiece a mandar datos
  uint8_t vec[2]={0x2D,0x08};
 8000526:	f640 032d 	movw	r3, #2093	; 0x82d
 800052a:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c1,0x53<<1,(uint8_t *)vec, 2, HAL_MAX_DELAY);
 800052c:	1d3a      	adds	r2, r7, #4
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2302      	movs	r3, #2
 8000536:	21a6      	movs	r1, #166	; 0xa6
 8000538:	4828      	ldr	r0, [pc, #160]	; (80005dc <main+0xd4>)
 800053a:	f000 fff5 	bl	8001528 <HAL_I2C_Master_Transmit>
  uint8_t a=0x32;
 800053e:	2332      	movs	r3, #50	; 0x32
 8000540:	70fb      	strb	r3, [r7, #3]
  //Consultando X,Y
  int16_t dato_X;
  float dato_Y;
  uint8_t b[2];
  // X en registros 0x32 (Bit0) y 0x33 (Bit1)
  HAL_I2C_Master_Transmit(&hi2c1, 0x53<<1,(uint8_t *)&a, 1, HAL_MAX_DELAY);
 8000542:	1cfa      	adds	r2, r7, #3
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	21a6      	movs	r1, #166	; 0xa6
 800054e:	4823      	ldr	r0, [pc, #140]	; (80005dc <main+0xd4>)
 8000550:	f000 ffea 	bl	8001528 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, 0x53<<1, b, 2, HAL_MAX_DELAY);
 8000554:	463a      	mov	r2, r7
 8000556:	f04f 33ff 	mov.w	r3, #4294967295
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2302      	movs	r3, #2
 800055e:	21a6      	movs	r1, #166	; 0xa6
 8000560:	481e      	ldr	r0, [pc, #120]	; (80005dc <main+0xd4>)
 8000562:	f001 f8df 	bl	8001724 <HAL_I2C_Master_Receive>
  dato_X=(b[1]<<8|b[0]);
 8000566:	787b      	ldrb	r3, [r7, #1]
 8000568:	021b      	lsls	r3, r3, #8
 800056a:	b21a      	sxth	r2, r3
 800056c:	783b      	ldrb	r3, [r7, #0]
 800056e:	b21b      	sxth	r3, r3
 8000570:	4313      	orrs	r3, r2
 8000572:	81fb      	strh	r3, [r7, #14]
  dato_Y=dato_X/256;
 8000574:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000578:	2b00      	cmp	r3, #0
 800057a:	da00      	bge.n	800057e <main+0x76>
 800057c:	33ff      	adds	r3, #255	; 0xff
 800057e:	121b      	asrs	r3, r3, #8
 8000580:	b21b      	sxth	r3, r3
 8000582:	ee07 3a90 	vmov	s15, r3
 8000586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800058a:	edc7 7a02 	vstr	s15, [r7, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_I2C_Master_Transmit(&hi2c1, 0x53<<1,(uint8_t *)&a, 1, HAL_MAX_DELAY);
 800058e:	1cfa      	adds	r2, r7, #3
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2301      	movs	r3, #1
 8000598:	21a6      	movs	r1, #166	; 0xa6
 800059a:	4810      	ldr	r0, [pc, #64]	; (80005dc <main+0xd4>)
 800059c:	f000 ffc4 	bl	8001528 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, 0x53<<1, b, 2, HAL_MAX_DELAY);
 80005a0:	463a      	mov	r2, r7
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2302      	movs	r3, #2
 80005aa:	21a6      	movs	r1, #166	; 0xa6
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <main+0xd4>)
 80005ae:	f001 f8b9 	bl	8001724 <HAL_I2C_Master_Receive>
	  dato_X=(b[1]<<8|b[0]);
 80005b2:	787b      	ldrb	r3, [r7, #1]
 80005b4:	021b      	lsls	r3, r3, #8
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	783b      	ldrb	r3, [r7, #0]
 80005ba:	b21b      	sxth	r3, r3
 80005bc:	4313      	orrs	r3, r2
 80005be:	81fb      	strh	r3, [r7, #14]
	  dato_Y=(float)(dato_X)/256;
 80005c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005c4:	ee07 3a90 	vmov	s15, r3
 80005c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005cc:	eddf 6a04 	vldr	s13, [pc, #16]	; 80005e0 <main+0xd8>
 80005d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005d4:	edc7 7a02 	vstr	s15, [r7, #8]
	  HAL_I2C_Master_Transmit(&hi2c1, 0x53<<1,(uint8_t *)&a, 1, HAL_MAX_DELAY);
 80005d8:	e7d9      	b.n	800058e <main+0x86>
 80005da:	bf00      	nop
 80005dc:	20000028 	.word	0x20000028
 80005e0:	43800000 	.word	0x43800000

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2234      	movs	r2, #52	; 0x34
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fe26 	bl	8004244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <SystemClock_Config+0xd0>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a22      	ldr	r2, [pc, #136]	; (80006b8 <SystemClock_Config+0xd4>)
 800062e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <SystemClock_Config+0xd4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000644:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000658:	23a8      	movs	r3, #168	; 0xa8
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000660:	2307      	movs	r3, #7
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fd69 	bl	8003144 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000678:	f000 f954 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000688:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2105      	movs	r1, #5
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fede 	bl	800245c <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a6:	f000 f93d 	bl	8000924 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C1_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_I2C1_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_I2C1_Init+0x50>)
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_I2C1_Init+0x58>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_I2C1_Init+0x50>)
 80006da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_I2C1_Init+0x50>)
 80006fa:	f000 fdd1 	bl	80012a0 <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 f90e 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000028 	.word	0x20000028
 8000710:	40005400 	.word	0x40005400
 8000714:	000186a0 	.word	0x000186a0

08000718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <MX_USART3_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 8000724:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_ODD;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 8000738:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800073c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 8000740:	220c      	movs	r2, #12
 8000742:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 8000752:	f002 ff95 	bl	8003680 <HAL_UART_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 800075c:	f000 f8e2 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000007c 	.word	0x2000007c
 8000768:	40004800 	.word	0x40004800

0800076c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000772:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000776:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	2206      	movs	r2, #6
 800077c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000780:	2202      	movs	r2, #2
 8000782:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	2202      	movs	r2, #2
 800078e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2201      	movs	r2, #1
 8000794:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b0:	f001 fd0b 	bl	80021ca <HAL_PCD_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007ba:	f000 f8b3 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000c0 	.word	0x200000c0

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
 80007e2:	4b4c      	ldr	r3, [pc, #304]	; (8000914 <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a4b      	ldr	r2, [pc, #300]	; (8000914 <MX_GPIO_Init+0x14c>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b49      	ldr	r3, [pc, #292]	; (8000914 <MX_GPIO_Init+0x14c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	4b45      	ldr	r3, [pc, #276]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a44      	ldr	r2, [pc, #272]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b42      	ldr	r3, [pc, #264]	; (8000914 <MX_GPIO_Init+0x14c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b3e      	ldr	r3, [pc, #248]	; (8000914 <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a3d      	ldr	r2, [pc, #244]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b3b      	ldr	r3, [pc, #236]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b37      	ldr	r3, [pc, #220]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a36      	ldr	r2, [pc, #216]	; (8000914 <MX_GPIO_Init+0x14c>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b34      	ldr	r3, [pc, #208]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b30      	ldr	r3, [pc, #192]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a2f      	ldr	r2, [pc, #188]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a28      	ldr	r2, [pc, #160]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f244 0181 	movw	r1, #16513	; 0x4081
 800088c:	4822      	ldr	r0, [pc, #136]	; (8000918 <MX_GPIO_Init+0x150>)
 800088e:	f000 fced 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2140      	movs	r1, #64	; 0x40
 8000896:	4821      	ldr	r0, [pc, #132]	; (800091c <MX_GPIO_Init+0x154>)
 8000898:	f000 fce8 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	481b      	ldr	r0, [pc, #108]	; (8000920 <MX_GPIO_Init+0x158>)
 80008b4:	f000 fb46 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008b8:	f244 0381 	movw	r3, #16513	; 0x4081
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4811      	ldr	r0, [pc, #68]	; (8000918 <MX_GPIO_Init+0x150>)
 80008d2:	f000 fb37 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d6:	2340      	movs	r3, #64	; 0x40
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <MX_GPIO_Init+0x154>)
 80008ee:	f000 fb29 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_GPIO_Init+0x154>)
 8000906:	f000 fb1d 	bl	8000f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	3730      	adds	r7, #48	; 0x30
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400
 800091c:	40021800 	.word	0x40021800
 8000920:	40020800 	.word	0x40020800

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <HAL_MspInit+0x4c>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a19      	ldr	r2, [pc, #100]	; (8000a04 <HAL_I2C_MspInit+0x84>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d12c      	bne.n	80009fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c4:	2312      	movs	r3, #18
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d0:	2304      	movs	r3, #4
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <HAL_I2C_MspInit+0x8c>)
 80009dc:	f000 fab2 	bl	8000f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	; 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40005400 	.word	0x40005400
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <HAL_UART_MspInit+0x84>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d12c      	bne.n	8000a8c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <HAL_UART_MspInit+0x8c>)
 8000a88:	f000 fa5c 	bl	8000f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40004800 	.word	0x40004800
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020c00 	.word	0x40020c00

08000aa0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b0a0      	sub	sp, #128	; 0x80
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	225c      	movs	r2, #92	; 0x5c
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 fbbf 	bl	8004244 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ace:	d14e      	bne.n	8000b6e <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fdd6 	bl	8002690 <HAL_RCCEx_PeriphCLKConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000aea:	f7ff ff1b 	bl	8000924 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_PCD_MspInit+0xd8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a20      	ldr	r2, [pc, #128]	; (8000b78 <HAL_PCD_MspInit+0xd8>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_PCD_MspInit+0xd8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b0a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b1c:	230a      	movs	r3, #10
 8000b1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b24:	4619      	mov	r1, r3
 8000b26:	4815      	ldr	r0, [pc, #84]	; (8000b7c <HAL_PCD_MspInit+0xdc>)
 8000b28:	f000 fa0c 	bl	8000f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b30:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480e      	ldr	r0, [pc, #56]	; (8000b7c <HAL_PCD_MspInit+0xdc>)
 8000b42:	f000 f9ff 	bl	8000f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_PCD_MspInit+0xd8>)
 8000b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_PCD_MspInit+0xd8>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b50:	6353      	str	r3, [r2, #52]	; 0x34
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_PCD_MspInit+0xd8>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_PCD_MspInit+0xd8>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_PCD_MspInit+0xd8>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3780      	adds	r7, #128	; 0x80
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 f890 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfe:	490e      	ldr	r1, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c14:	4c0b      	ldr	r4, [pc, #44]	; (8000c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c22:	f7ff ffd7 	bl	8000bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f003 fae9 	bl	80041fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fc6d 	bl	8000508 <main>
  bx  lr    
 8000c2e:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c3c:	08004294 	.word	0x08004294
  ldr r2, =_sbss
 8000c40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c44:	200005d0 	.word	0x200005d0

08000c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <HAL_Init+0x40>)
 8000c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_Init+0x40>)
 8000c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_Init+0x40>)
 8000c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f931 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 f808 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c80:	f7ff fe56 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023c00 	.word	0x40023c00

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x54>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_InitTick+0x58>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f93b 	bl	8000f2a <HAL_SYSTICK_Config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00e      	b.n	8000cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d80a      	bhi.n	8000cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f000 f911 	bl	8000ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_InitTick+0x5c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000004 	.word	0x20000004

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	200005cc 	.word	0x200005cc

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200005cc 	.word	0x200005cc

08000d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff ffee 	bl	8000d18 <HAL_GetTick>
 8000d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d48:	d005      	beq.n	8000d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_Delay+0x44>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d56:	bf00      	nop
 8000d58:	f7ff ffde 	bl	8000d18 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d8f7      	bhi.n	8000d58 <HAL_Delay+0x28>
  {
  }
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f7ff ff8e 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff47 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff5c 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff8e 	bl	8000e30 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5d 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffb0 	bl	8000e98 <SysTick_Config>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	e165      	b.n	800122c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f040 8154 	bne.w	8001226 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d005      	beq.n	8000f96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d130      	bne.n	8000ff8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	091b      	lsrs	r3, r3, #4
 8000fe2:	f003 0201 	and.w	r2, r3, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b03      	cmp	r3, #3
 8001002:	d017      	beq.n	8001034 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d123      	bne.n	8001088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	69b9      	ldr	r1, [r7, #24]
 8001084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0203 	and.w	r2, r3, #3
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80ae 	beq.w	8001226 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b5d      	ldr	r3, [pc, #372]	; (8001244 <HAL_GPIO_Init+0x300>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a5c      	ldr	r2, [pc, #368]	; (8001244 <HAL_GPIO_Init+0x300>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <HAL_GPIO_Init+0x300>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010e6:	4a58      	ldr	r2, [pc, #352]	; (8001248 <HAL_GPIO_Init+0x304>)
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4f      	ldr	r2, [pc, #316]	; (800124c <HAL_GPIO_Init+0x308>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d025      	beq.n	800115e <HAL_GPIO_Init+0x21a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4e      	ldr	r2, [pc, #312]	; (8001250 <HAL_GPIO_Init+0x30c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d01f      	beq.n	800115a <HAL_GPIO_Init+0x216>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4d      	ldr	r2, [pc, #308]	; (8001254 <HAL_GPIO_Init+0x310>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d019      	beq.n	8001156 <HAL_GPIO_Init+0x212>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4c      	ldr	r2, [pc, #304]	; (8001258 <HAL_GPIO_Init+0x314>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x20e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4b      	ldr	r2, [pc, #300]	; (800125c <HAL_GPIO_Init+0x318>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x20a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4a      	ldr	r2, [pc, #296]	; (8001260 <HAL_GPIO_Init+0x31c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x206>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a49      	ldr	r2, [pc, #292]	; (8001264 <HAL_GPIO_Init+0x320>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x202>
 8001142:	2306      	movs	r3, #6
 8001144:	e00c      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 8001146:	2307      	movs	r3, #7
 8001148:	e00a      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 800114a:	2305      	movs	r3, #5
 800114c:	e008      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 800114e:	2304      	movs	r3, #4
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 8001152:	2303      	movs	r3, #3
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 800115e:	2300      	movs	r3, #0
 8001160:	69fa      	ldr	r2, [r7, #28]
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001170:	4935      	ldr	r1, [pc, #212]	; (8001248 <HAL_GPIO_Init+0x304>)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117e:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <HAL_GPIO_Init+0x324>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a2:	4a31      	ldr	r2, [pc, #196]	; (8001268 <HAL_GPIO_Init+0x324>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <HAL_GPIO_Init+0x324>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <HAL_GPIO_Init+0x324>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <HAL_GPIO_Init+0x324>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <HAL_GPIO_Init+0x324>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <HAL_GPIO_Init+0x324>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001220:	4a11      	ldr	r2, [pc, #68]	; (8001268 <HAL_GPIO_Init+0x324>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3301      	adds	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	f67f ae96 	bls.w	8000f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40013800 	.word	0x40013800
 800124c:	40020000 	.word	0x40020000
 8001250:	40020400 	.word	0x40020400
 8001254:	40020800 	.word	0x40020800
 8001258:	40020c00 	.word	0x40020c00
 800125c:	40021000 	.word	0x40021000
 8001260:	40021400 	.word	0x40021400
 8001264:	40021800 	.word	0x40021800
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001288:	e003      	b.n	8001292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e12b      	b.n	800150a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d106      	bne.n	80012cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fb5a 	bl	8000980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2224      	movs	r2, #36	; 0x24
 80012d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0201 	bic.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001304:	f001 f99c 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 8001308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a81      	ldr	r2, [pc, #516]	; (8001514 <HAL_I2C_Init+0x274>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d807      	bhi.n	8001324 <HAL_I2C_Init+0x84>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4a80      	ldr	r2, [pc, #512]	; (8001518 <HAL_I2C_Init+0x278>)
 8001318:	4293      	cmp	r3, r2
 800131a:	bf94      	ite	ls
 800131c:	2301      	movls	r3, #1
 800131e:	2300      	movhi	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	e006      	b.n	8001332 <HAL_I2C_Init+0x92>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4a7d      	ldr	r2, [pc, #500]	; (800151c <HAL_I2C_Init+0x27c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	bf94      	ite	ls
 800132c:	2301      	movls	r3, #1
 800132e:	2300      	movhi	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e0e7      	b.n	800150a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4a78      	ldr	r2, [pc, #480]	; (8001520 <HAL_I2C_Init+0x280>)
 800133e:	fba2 2303 	umull	r2, r3, r2, r3
 8001342:	0c9b      	lsrs	r3, r3, #18
 8001344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	430a      	orrs	r2, r1
 8001358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a6a      	ldr	r2, [pc, #424]	; (8001514 <HAL_I2C_Init+0x274>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d802      	bhi.n	8001374 <HAL_I2C_Init+0xd4>
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	3301      	adds	r3, #1
 8001372:	e009      	b.n	8001388 <HAL_I2C_Init+0xe8>
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	4a69      	ldr	r2, [pc, #420]	; (8001524 <HAL_I2C_Init+0x284>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	099b      	lsrs	r3, r3, #6
 8001386:	3301      	adds	r3, #1
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	430b      	orrs	r3, r1
 800138e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800139a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	495c      	ldr	r1, [pc, #368]	; (8001514 <HAL_I2C_Init+0x274>)
 80013a4:	428b      	cmp	r3, r1
 80013a6:	d819      	bhi.n	80013dc <HAL_I2C_Init+0x13c>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	1e59      	subs	r1, r3, #1
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80013b6:	1c59      	adds	r1, r3, #1
 80013b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013bc:	400b      	ands	r3, r1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00a      	beq.n	80013d8 <HAL_I2C_Init+0x138>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1e59      	subs	r1, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d0:	3301      	adds	r3, #1
 80013d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d6:	e051      	b.n	800147c <HAL_I2C_Init+0x1dc>
 80013d8:	2304      	movs	r3, #4
 80013da:	e04f      	b.n	800147c <HAL_I2C_Init+0x1dc>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d111      	bne.n	8001408 <HAL_I2C_Init+0x168>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	1e58      	subs	r0, r3, #1
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6859      	ldr	r1, [r3, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	440b      	add	r3, r1
 80013f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bf0c      	ite	eq
 8001400:	2301      	moveq	r3, #1
 8001402:	2300      	movne	r3, #0
 8001404:	b2db      	uxtb	r3, r3
 8001406:	e012      	b.n	800142e <HAL_I2C_Init+0x18e>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1e58      	subs	r0, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	0099      	lsls	r1, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	fbb0 f3f3 	udiv	r3, r0, r3
 800141e:	3301      	adds	r3, #1
 8001420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf0c      	ite	eq
 8001428:	2301      	moveq	r3, #1
 800142a:	2300      	movne	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_I2C_Init+0x196>
 8001432:	2301      	movs	r3, #1
 8001434:	e022      	b.n	800147c <HAL_I2C_Init+0x1dc>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10e      	bne.n	800145c <HAL_I2C_Init+0x1bc>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1e58      	subs	r0, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6859      	ldr	r1, [r3, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	440b      	add	r3, r1
 800144c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001450:	3301      	adds	r3, #1
 8001452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800145a:	e00f      	b.n	800147c <HAL_I2C_Init+0x1dc>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	1e58      	subs	r0, r3, #1
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	0099      	lsls	r1, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001472:	3301      	adds	r3, #1
 8001474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	6809      	ldr	r1, [r1, #0]
 8001480:	4313      	orrs	r3, r2
 8001482:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69da      	ldr	r2, [r3, #28]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6911      	ldr	r1, [r2, #16]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68d2      	ldr	r2, [r2, #12]
 80014b6:	4311      	orrs	r1, r2
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	430b      	orrs	r3, r1
 80014be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0201 	orr.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2220      	movs	r2, #32
 80014f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	000186a0 	.word	0x000186a0
 8001518:	001e847f 	.word	0x001e847f
 800151c:	003d08ff 	.word	0x003d08ff
 8001520:	431bde83 	.word	0x431bde83
 8001524:	10624dd3 	.word	0x10624dd3

08001528 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af02      	add	r7, sp, #8
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	461a      	mov	r2, r3
 8001534:	460b      	mov	r3, r1
 8001536:	817b      	strh	r3, [r7, #10]
 8001538:	4613      	mov	r3, r2
 800153a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff fbec 	bl	8000d18 <HAL_GetTick>
 8001540:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b20      	cmp	r3, #32
 800154c:	f040 80e0 	bne.w	8001710 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2319      	movs	r3, #25
 8001556:	2201      	movs	r2, #1
 8001558:	4970      	ldr	r1, [pc, #448]	; (800171c <HAL_I2C_Master_Transmit+0x1f4>)
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 fc58 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001566:	2302      	movs	r3, #2
 8001568:	e0d3      	b.n	8001712 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_I2C_Master_Transmit+0x50>
 8001574:	2302      	movs	r3, #2
 8001576:	e0cc      	b.n	8001712 <HAL_I2C_Master_Transmit+0x1ea>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b01      	cmp	r3, #1
 800158c:	d007      	beq.n	800159e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0201 	orr.w	r2, r2, #1
 800159c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2221      	movs	r2, #33	; 0x21
 80015b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2210      	movs	r2, #16
 80015ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	893a      	ldrh	r2, [r7, #8]
 80015ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4a50      	ldr	r2, [pc, #320]	; (8001720 <HAL_I2C_Master_Transmit+0x1f8>)
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015e0:	8979      	ldrh	r1, [r7, #10]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	6a3a      	ldr	r2, [r7, #32]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 fac2 	bl	8001b70 <I2C_MasterRequestWrite>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e08d      	b.n	8001712 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800160c:	e066      	b.n	80016dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	6a39      	ldr	r1, [r7, #32]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 fcd2 	bl	8001fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00d      	beq.n	800163a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	2b04      	cmp	r3, #4
 8001624:	d107      	bne.n	8001636 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001634:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e06b      	b.n	8001712 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	781a      	ldrb	r2, [r3, #0]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001654:	b29b      	uxth	r3, r3
 8001656:	3b01      	subs	r3, #1
 8001658:	b29a      	uxth	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001662:	3b01      	subs	r3, #1
 8001664:	b29a      	uxth	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b04      	cmp	r3, #4
 8001676:	d11b      	bne.n	80016b0 <HAL_I2C_Master_Transmit+0x188>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167c:	2b00      	cmp	r3, #0
 800167e:	d017      	beq.n	80016b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	781a      	ldrb	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169a:	b29b      	uxth	r3, r3
 800169c:	3b01      	subs	r3, #1
 800169e:	b29a      	uxth	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	6a39      	ldr	r1, [r7, #32]
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 fcc2 	bl	800203e <I2C_WaitOnBTFFlagUntilTimeout>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00d      	beq.n	80016dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d107      	bne.n	80016d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e01a      	b.n	8001712 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d194      	bne.n	800160e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2220      	movs	r2, #32
 80016f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	e000      	b.n	8001712 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001710:	2302      	movs	r3, #2
  }
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	00100002 	.word	0x00100002
 8001720:	ffff0000 	.word	0xffff0000

08001724 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08c      	sub	sp, #48	; 0x30
 8001728:	af02      	add	r7, sp, #8
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	461a      	mov	r2, r3
 8001730:	460b      	mov	r3, r1
 8001732:	817b      	strh	r3, [r7, #10]
 8001734:	4613      	mov	r3, r2
 8001736:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001738:	f7ff faee 	bl	8000d18 <HAL_GetTick>
 800173c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b20      	cmp	r3, #32
 8001748:	f040 820b 	bne.w	8001b62 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2319      	movs	r3, #25
 8001752:	2201      	movs	r2, #1
 8001754:	497c      	ldr	r1, [pc, #496]	; (8001948 <HAL_I2C_Master_Receive+0x224>)
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 fb5a 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001762:	2302      	movs	r3, #2
 8001764:	e1fe      	b.n	8001b64 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <HAL_I2C_Master_Receive+0x50>
 8001770:	2302      	movs	r3, #2
 8001772:	e1f7      	b.n	8001b64 <HAL_I2C_Master_Receive+0x440>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b01      	cmp	r3, #1
 8001788:	d007      	beq.n	800179a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 0201 	orr.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2222      	movs	r2, #34	; 0x22
 80017ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2210      	movs	r2, #16
 80017b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	893a      	ldrh	r2, [r7, #8]
 80017ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4a5c      	ldr	r2, [pc, #368]	; (800194c <HAL_I2C_Master_Receive+0x228>)
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017dc:	8979      	ldrh	r1, [r7, #10]
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 fa46 	bl	8001c74 <I2C_MasterRequestRead>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e1b8      	b.n	8001b64 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d113      	bne.n	8001822 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	623b      	str	r3, [r7, #32]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	623b      	str	r3, [r7, #32]
 800180e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e18c      	b.n	8001b3c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001826:	2b01      	cmp	r3, #1
 8001828:	d11b      	bne.n	8001862 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001838:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e16c      	b.n	8001b3c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001866:	2b02      	cmp	r3, #2
 8001868:	d11b      	bne.n	80018a2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001878:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	e14c      	b.n	8001b3c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80018c8:	e138      	b.n	8001b3c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	f200 80f1 	bhi.w	8001ab6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d123      	bne.n	8001924 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 fbed 	bl	80020c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e139      	b.n	8001b64 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190c:	3b01      	subs	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001922:	e10b      	b.n	8001b3c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001928:	2b02      	cmp	r3, #2
 800192a:	d14e      	bne.n	80019ca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001932:	2200      	movs	r2, #0
 8001934:	4906      	ldr	r1, [pc, #24]	; (8001950 <HAL_I2C_Master_Receive+0x22c>)
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 fa6a 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d008      	beq.n	8001954 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e10e      	b.n	8001b64 <HAL_I2C_Master_Receive+0x440>
 8001946:	bf00      	nop
 8001948:	00100002 	.word	0x00100002
 800194c:	ffff0000 	.word	0xffff0000
 8001950:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	691a      	ldr	r2, [r3, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198c:	b29b      	uxth	r3, r3
 800198e:	3b01      	subs	r3, #1
 8001990:	b29a      	uxth	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019be:	b29b      	uxth	r3, r3
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019c8:	e0b8      	b.n	8001b3c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d0:	2200      	movs	r2, #0
 80019d2:	4966      	ldr	r1, [pc, #408]	; (8001b6c <HAL_I2C_Master_Receive+0x448>)
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 fa1b 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0bf      	b.n	8001b64 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	494f      	ldr	r1, [pc, #316]	; (8001b6c <HAL_I2C_Master_Receive+0x448>)
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 f9ed 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e091      	b.n	8001b64 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691a      	ldr	r2, [r3, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ab4:	e042      	b.n	8001b3c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 fb00 	bl	80020c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e04c      	b.n	8001b64 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d118      	bne.n	8001b3c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f47f aec2 	bne.w	80018ca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e000      	b.n	8001b64 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001b62:	2302      	movs	r3, #2
  }
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3728      	adds	r7, #40	; 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	00010004 	.word	0x00010004

08001b70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d006      	beq.n	8001b9a <I2C_MasterRequestWrite+0x2a>
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d003      	beq.n	8001b9a <I2C_MasterRequestWrite+0x2a>
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b98:	d108      	bne.n	8001bac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e00b      	b.n	8001bc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	2b12      	cmp	r3, #18
 8001bb2:	d107      	bne.n	8001bc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 f91d 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00d      	beq.n	8001bf8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bea:	d103      	bne.n	8001bf4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e035      	b.n	8001c64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c00:	d108      	bne.n	8001c14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c02:	897b      	ldrh	r3, [r7, #10]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c10:	611a      	str	r2, [r3, #16]
 8001c12:	e01b      	b.n	8001c4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c14:	897b      	ldrh	r3, [r7, #10]
 8001c16:	11db      	asrs	r3, r3, #7
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f003 0306 	and.w	r3, r3, #6
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f063 030f 	orn	r3, r3, #15
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	490e      	ldr	r1, [pc, #56]	; (8001c6c <I2C_MasterRequestWrite+0xfc>)
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f943 	bl	8001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e010      	b.n	8001c64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c42:	897b      	ldrh	r3, [r7, #10]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4907      	ldr	r1, [pc, #28]	; (8001c70 <I2C_MasterRequestWrite+0x100>)
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 f933 	bl	8001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	00010008 	.word	0x00010008
 8001c70:	00010002 	.word	0x00010002

08001c74 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af02      	add	r7, sp, #8
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	460b      	mov	r3, r1
 8001c82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c98:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d006      	beq.n	8001cae <I2C_MasterRequestRead+0x3a>
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d003      	beq.n	8001cae <I2C_MasterRequestRead+0x3a>
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cac:	d108      	bne.n	8001cc0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	e00b      	b.n	8001cd8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	2b11      	cmp	r3, #17
 8001cc6:	d107      	bne.n	8001cd8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 f893 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00d      	beq.n	8001d0c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cfe:	d103      	bne.n	8001d08 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e079      	b.n	8001e00 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d14:	d108      	bne.n	8001d28 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d16:	897b      	ldrh	r3, [r7, #10]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	611a      	str	r2, [r3, #16]
 8001d26:	e05f      	b.n	8001de8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d28:	897b      	ldrh	r3, [r7, #10]
 8001d2a:	11db      	asrs	r3, r3, #7
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	f003 0306 	and.w	r3, r3, #6
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f063 030f 	orn	r3, r3, #15
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4930      	ldr	r1, [pc, #192]	; (8001e08 <I2C_MasterRequestRead+0x194>)
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f8b9 	bl	8001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e054      	b.n	8001e00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d56:	897b      	ldrh	r3, [r7, #10]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4929      	ldr	r1, [pc, #164]	; (8001e0c <I2C_MasterRequestRead+0x198>)
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f8a9 	bl	8001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e044      	b.n	8001e00 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 f831 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00d      	beq.n	8001dd0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dc2:	d103      	bne.n	8001dcc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e017      	b.n	8001e00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001dd0:	897b      	ldrh	r3, [r7, #10]
 8001dd2:	11db      	asrs	r3, r3, #7
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	f003 0306 	and.w	r3, r3, #6
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f063 030e 	orn	r3, r3, #14
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4907      	ldr	r1, [pc, #28]	; (8001e0c <I2C_MasterRequestRead+0x198>)
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f865 	bl	8001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	00010008 	.word	0x00010008
 8001e0c:	00010002 	.word	0x00010002

08001e10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e20:	e025      	b.n	8001e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e28:	d021      	beq.n	8001e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e2a:	f7fe ff75 	bl	8000d18 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d302      	bcc.n	8001e40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d116      	bne.n	8001e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f043 0220 	orr.w	r2, r3, #32
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e023      	b.n	8001eb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d10d      	bne.n	8001e94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4013      	ands	r3, r2
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	e00c      	b.n	8001eae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf0c      	ite	eq
 8001ea6:	2301      	moveq	r3, #1
 8001ea8:	2300      	movne	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d0b6      	beq.n	8001e22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ecc:	e051      	b.n	8001f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001edc:	d123      	bne.n	8001f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ef6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f043 0204 	orr.w	r2, r3, #4
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e046      	b.n	8001fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2c:	d021      	beq.n	8001f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2e:	f7fe fef3 	bl	8000d18 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d302      	bcc.n	8001f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d116      	bne.n	8001f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f043 0220 	orr.w	r2, r3, #32
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e020      	b.n	8001fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	0c1b      	lsrs	r3, r3, #16
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d10c      	bne.n	8001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	43da      	mvns	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4013      	ands	r3, r2
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bf14      	ite	ne
 8001f8e:	2301      	movne	r3, #1
 8001f90:	2300      	moveq	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	e00b      	b.n	8001fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d18d      	bne.n	8001ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fc8:	e02d      	b.n	8002026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f8ce 	bl	800216c <I2C_IsAcknowledgeFailed>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e02d      	b.n	8002036 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d021      	beq.n	8002026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe2:	f7fe fe99 	bl	8000d18 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d116      	bne.n	8002026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f043 0220 	orr.w	r2, r3, #32
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e007      	b.n	8002036 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d1ca      	bne.n	8001fca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800204a:	e02d      	b.n	80020a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f88d 	bl	800216c <I2C_IsAcknowledgeFailed>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e02d      	b.n	80020b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002062:	d021      	beq.n	80020a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002064:	f7fe fe58 	bl	8000d18 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	429a      	cmp	r2, r3
 8002072:	d302      	bcc.n	800207a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d116      	bne.n	80020a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f043 0220 	orr.w	r2, r3, #32
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e007      	b.n	80020b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d1ca      	bne.n	800204c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020cc:	e042      	b.n	8002154 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b10      	cmp	r3, #16
 80020da:	d119      	bne.n	8002110 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0210 	mvn.w	r2, #16
 80020e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e029      	b.n	8002164 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002110:	f7fe fe02 	bl	8000d18 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	429a      	cmp	r2, r3
 800211e:	d302      	bcc.n	8002126 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d116      	bne.n	8002154 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f043 0220 	orr.w	r2, r3, #32
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e007      	b.n	8002164 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b40      	cmp	r3, #64	; 0x40
 8002160:	d1b5      	bne.n	80020ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002182:	d11b      	bne.n	80021bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800218c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f043 0204 	orr.w	r2, r3, #4
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021cc:	b08f      	sub	sp, #60	; 0x3c
 80021ce:	af0a      	add	r7, sp, #40	; 0x28
 80021d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e116      	b.n	800240a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe fc52 	bl	8000aa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2203      	movs	r2, #3
 8002200:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f001 fd53 	bl	8003cc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	687e      	ldr	r6, [r7, #4]
 8002228:	466d      	mov	r5, sp
 800222a:	f106 0410 	add.w	r4, r6, #16
 800222e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002236:	e894 0003 	ldmia.w	r4, {r0, r1}
 800223a:	e885 0003 	stmia.w	r5, {r0, r1}
 800223e:	1d33      	adds	r3, r6, #4
 8002240:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002242:	6838      	ldr	r0, [r7, #0]
 8002244:	f001 fcde 	bl	8003c04 <USB_CoreInit>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e0d7      	b.n	800240a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f001 fd41 	bl	8003ce8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
 800226a:	e04a      	b.n	8002302 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	333d      	adds	r3, #61	; 0x3d
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	333c      	adds	r3, #60	; 0x3c
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	b298      	uxth	r0, r3
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	3344      	adds	r3, #68	; 0x44
 80022a8:	4602      	mov	r2, r0
 80022aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	3340      	adds	r3, #64	; 0x40
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	3348      	adds	r3, #72	; 0x48
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	334c      	adds	r3, #76	; 0x4c
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	3354      	adds	r3, #84	; 0x54
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	3301      	adds	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	d3af      	bcc.n	800226c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	e044      	b.n	800239c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	3301      	adds	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d3b5      	bcc.n	8002312 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	687e      	ldr	r6, [r7, #4]
 80023ae:	466d      	mov	r5, sp
 80023b0:	f106 0410 	add.w	r4, r6, #16
 80023b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80023c4:	1d33      	adds	r3, r6, #4
 80023c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c8:	6838      	ldr	r0, [r7, #0]
 80023ca:	f001 fcd9 	bl	8003d80 <USB_DevInit>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e014      	b.n	800240a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d102      	bne.n	80023fe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f80a 	bl	8002412 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f001 fe97 	bl	8004136 <USB_DevDisconnect>

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002412 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002444:	f043 0303 	orr.w	r3, r3, #3
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0cc      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002470:	4b68      	ldr	r3, [pc, #416]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d90c      	bls.n	8002498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b65      	ldr	r3, [pc, #404]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b63      	ldr	r3, [pc, #396]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0b8      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b0:	4b59      	ldr	r3, [pc, #356]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a58      	ldr	r2, [pc, #352]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c8:	4b53      	ldr	r3, [pc, #332]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a52      	ldr	r2, [pc, #328]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d4:	4b50      	ldr	r3, [pc, #320]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	494d      	ldr	r1, [pc, #308]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d044      	beq.n	800257c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d119      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e07f      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d003      	beq.n	800251a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002516:	2b03      	cmp	r3, #3
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251a:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e06f      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252a:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e067      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253a:	4b37      	ldr	r3, [pc, #220]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4934      	ldr	r1, [pc, #208]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	4313      	orrs	r3, r2
 800254a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800254c:	f7fe fbe4 	bl	8000d18 <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7fe fbe0 	bl	8000d18 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e04f      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 020c 	and.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1eb      	bne.n	8002554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d20c      	bcs.n	80025a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b20      	ldr	r3, [pc, #128]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e032      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4916      	ldr	r1, [pc, #88]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	490e      	ldr	r1, [pc, #56]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025e2:	f000 fb7f 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 80025e6:	4602      	mov	r2, r0
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	490a      	ldr	r1, [pc, #40]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	5ccb      	ldrb	r3, [r1, r3]
 80025f6:	fa22 f303 	lsr.w	r3, r2, r3
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RCC_ClockConfig+0x1c8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fb44 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40023c00 	.word	0x40023c00
 8002618:	40023800 	.word	0x40023800
 800261c:	0800426c 	.word	0x0800426c
 8002620:	20000000 	.word	0x20000000
 8002624:	20000004 	.word	0x20000004

08002628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <HAL_RCC_GetHCLKFreq+0x14>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000000 	.word	0x20000000

08002640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002644:	f7ff fff0 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	0a9b      	lsrs	r3, r3, #10
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4903      	ldr	r1, [pc, #12]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	0800427c 	.word	0x0800427c

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800266c:	f7ff ffdc 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0b5b      	lsrs	r3, r3, #13
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4903      	ldr	r1, [pc, #12]	; (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	0800427c 	.word	0x0800427c

08002690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08c      	sub	sp, #48	; 0x30
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d010      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80026c8:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026ce:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	496c      	ldr	r1, [pc, #432]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80026e6:	2301      	movs	r3, #1
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d010      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80026f6:	4b64      	ldr	r3, [pc, #400]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026fc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	4960      	ldr	r1, [pc, #384]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002714:	2301      	movs	r3, #1
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d017      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002724:	4b58      	ldr	r3, [pc, #352]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800272a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4955      	ldr	r1, [pc, #340]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002742:	d101      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002744:	2301      	movs	r3, #1
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002750:	2301      	movs	r3, #1
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	d017      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002760:	4b49      	ldr	r3, [pc, #292]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002766:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276e:	4946      	ldr	r1, [pc, #280]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800277e:	d101      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002780:	2301      	movs	r3, #1
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800278c:	2301      	movs	r3, #1
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 808a 	beq.w	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	4b39      	ldr	r3, [pc, #228]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	4a38      	ldr	r2, [pc, #224]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	; 0x40
 80027ae:	4b36      	ldr	r3, [pc, #216]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80027ba:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a33      	ldr	r2, [pc, #204]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027c6:	f7fe faa7 	bl	8000d18 <HAL_GetTick>
 80027ca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7fe faa3 	bl	8000d18 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e278      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80027e0:	4b2a      	ldr	r3, [pc, #168]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027ec:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d02f      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002804:	6a3a      	ldr	r2, [r7, #32]
 8002806:	429a      	cmp	r2, r3
 8002808:	d028      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800280a:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002812:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002814:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002820:	4a19      	ldr	r2, [pc, #100]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002826:	4b18      	ldr	r3, [pc, #96]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d114      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002832:	f7fe fa71 	bl	8000d18 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe fa6d 	bl	8000d18 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e240      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ee      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002868:	d114      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800287a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800287e:	4902      	ldr	r1, [pc, #8]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]
 8002884:	e00c      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	40007000 	.word	0x40007000
 8002890:	42470e40 	.word	0x42470e40
 8002894:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a49      	ldr	r2, [pc, #292]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800289a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800289e:	6093      	str	r3, [r2, #8]
 80028a0:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ac:	4944      	ldr	r1, [pc, #272]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d004      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80028c4:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80028c6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80028d4:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	4937      	ldr	r1, [pc, #220]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028f6:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002904:	492e      	ldr	r1, [pc, #184]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d011      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002918:	4b29      	ldr	r3, [pc, #164]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800291a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	4926      	ldr	r1, [pc, #152]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002936:	d101      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002938:	2301      	movs	r3, #1
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002948:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800294a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	491a      	ldr	r1, [pc, #104]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002966:	2b00      	cmp	r3, #0
 8002968:	d011      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800296c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002970:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002978:	4911      	ldr	r1, [pc, #68]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002988:	d101      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800298a:	2301      	movs	r3, #1
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d005      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800299c:	f040 80ff 	bne.w	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029a6:	f7fe f9b7 	bl	8000d18 <HAL_GetTick>
 80029aa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029ac:	e00e      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029ae:	f7fe f9b3 	bl	8000d18 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d907      	bls.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e188      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80029c0:	40023800 	.word	0x40023800
 80029c4:	424711e0 	.word	0x424711e0
 80029c8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029cc:	4b7e      	ldr	r3, [pc, #504]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ea      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d009      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d028      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d124      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a00:	4b71      	ldr	r3, [pc, #452]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a06:	0c1b      	lsrs	r3, r3, #16
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a12:	4b6d      	ldr	r3, [pc, #436]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a18:	0e1b      	lsrs	r3, r3, #24
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	019b      	lsls	r3, r3, #6
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	085b      	lsrs	r3, r3, #1
 8002a30:	3b01      	subs	r3, #1
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	431a      	orrs	r2, r3
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	061b      	lsls	r3, r3, #24
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	071b      	lsls	r3, r3, #28
 8002a42:	4961      	ldr	r1, [pc, #388]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d035      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a74:	d130      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a76:	4b54      	ldr	r3, [pc, #336]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	3301      	adds	r3, #1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a88:	4b4f      	ldr	r3, [pc, #316]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a8e:	0f1b      	lsrs	r3, r3, #28
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	019b      	lsls	r3, r3, #6
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	041b      	lsls	r3, r3, #16
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	061b      	lsls	r3, r3, #24
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	071b      	lsls	r3, r3, #28
 8002ab8:	4943      	ldr	r1, [pc, #268]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ac0:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac6:	f023 021f 	bic.w	r2, r3, #31
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	493d      	ldr	r1, [pc, #244]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d029      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aec:	d124      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002aee:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	3301      	adds	r3, #1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b00:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b06:	0f1b      	lsrs	r3, r3, #28
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	019b      	lsls	r3, r3, #6
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	3b01      	subs	r3, #1
 8002b22:	041b      	lsls	r3, r3, #16
 8002b24:	431a      	orrs	r2, r3
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	071b      	lsls	r3, r3, #28
 8002b30:	4925      	ldr	r1, [pc, #148]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d016      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	019b      	lsls	r3, r3, #6
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	3b01      	subs	r3, #1
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	061b      	lsls	r3, r3, #24
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	071b      	lsls	r3, r3, #28
 8002b6a:	4917      	ldr	r1, [pc, #92]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b72:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b78:	f7fe f8ce 	bl	8000d18 <HAL_GetTick>
 8002b7c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b80:	f7fe f8ca 	bl	8000d18 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e09f      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	f040 8095 	bne.w	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bac:	f7fe f8b4 	bl	8000d18 <HAL_GetTick>
 8002bb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bb2:	e00f      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002bb4:	f7fe f8b0 	bl	8000d18 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d908      	bls.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e085      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	42470068 	.word	0x42470068
 8002bd0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bd4:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002be0:	d0e8      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d02b      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d127      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002c0a:	4b34      	ldr	r3, [pc, #208]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	3301      	adds	r3, #1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	019b      	lsls	r3, r3, #6
 8002c26:	431a      	orrs	r2, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	041b      	lsls	r3, r3, #16
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	061b      	lsls	r3, r3, #24
 8002c38:	4928      	ldr	r1, [pc, #160]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c40:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	4922      	ldr	r1, [pc, #136]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01d      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c6e:	d118      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c70:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	0e1b      	lsrs	r3, r3, #24
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	019b      	lsls	r3, r3, #6
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	3b01      	subs	r3, #1
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	431a      	orrs	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	4910      	ldr	r1, [pc, #64]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7fe f836 	bl	8000d18 <HAL_GetTick>
 8002cac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002cb0:	f7fe f832 	bl	8000d18 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e007      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cce:	d1ef      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3730      	adds	r7, #48	; 0x30
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	42470070 	.word	0x42470070

08002ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce8:	b0ae      	sub	sp, #184	; 0xb8
 8002cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d0a:	4bcb      	ldr	r3, [pc, #812]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	f200 8206 	bhi.w	8003124 <HAL_RCC_GetSysClockFreq+0x440>
 8002d18:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d55 	.word	0x08002d55
 8002d24:	08003125 	.word	0x08003125
 8002d28:	08003125 	.word	0x08003125
 8002d2c:	08003125 	.word	0x08003125
 8002d30:	08002d5d 	.word	0x08002d5d
 8002d34:	08003125 	.word	0x08003125
 8002d38:	08003125 	.word	0x08003125
 8002d3c:	08003125 	.word	0x08003125
 8002d40:	08002d65 	.word	0x08002d65
 8002d44:	08003125 	.word	0x08003125
 8002d48:	08003125 	.word	0x08003125
 8002d4c:	08003125 	.word	0x08003125
 8002d50:	08002f55 	.word	0x08002f55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d54:	4bb9      	ldr	r3, [pc, #740]	; (800303c <HAL_RCC_GetSysClockFreq+0x358>)
 8002d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d5a:	e1e7      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d5c:	4bb8      	ldr	r3, [pc, #736]	; (8003040 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d62:	e1e3      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d64:	4bb4      	ldr	r3, [pc, #720]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d70:	4bb1      	ldr	r3, [pc, #708]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d071      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7c:	4bae      	ldr	r3, [pc, #696]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d88:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002da2:	4622      	mov	r2, r4
 8002da4:	462b      	mov	r3, r5
 8002da6:	f04f 0000 	mov.w	r0, #0
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	0159      	lsls	r1, r3, #5
 8002db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db4:	0150      	lsls	r0, r2, #5
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4621      	mov	r1, r4
 8002dbc:	1a51      	subs	r1, r2, r1
 8002dbe:	6439      	str	r1, [r7, #64]	; 0x40
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	018b      	lsls	r3, r1, #6
 8002dd8:	4641      	mov	r1, r8
 8002dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dde:	4641      	mov	r1, r8
 8002de0:	018a      	lsls	r2, r1, #6
 8002de2:	4641      	mov	r1, r8
 8002de4:	1a51      	subs	r1, r2, r1
 8002de6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002de8:	4649      	mov	r1, r9
 8002dea:	eb63 0301 	sbc.w	r3, r3, r1
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	00cb      	lsls	r3, r1, #3
 8002e00:	4641      	mov	r1, r8
 8002e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e06:	4641      	mov	r1, r8
 8002e08:	00ca      	lsls	r2, r1, #3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4622      	mov	r2, r4
 8002e12:	189b      	adds	r3, r3, r2
 8002e14:	633b      	str	r3, [r7, #48]	; 0x30
 8002e16:	462b      	mov	r3, r5
 8002e18:	460a      	mov	r2, r1
 8002e1a:	eb42 0303 	adc.w	r3, r2, r3
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	024b      	lsls	r3, r1, #9
 8002e30:	4621      	mov	r1, r4
 8002e32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e36:	4621      	mov	r1, r4
 8002e38:	024a      	lsls	r2, r1, #9
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e50:	f7fd f9d8 	bl	8000204 <__aeabi_uldivmod>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4613      	mov	r3, r2
 8002e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e5e:	e067      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e60:	4b75      	ldr	r3, [pc, #468]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	099b      	lsrs	r3, r3, #6
 8002e66:	2200      	movs	r2, #0
 8002e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e6c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e78:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e82:	4622      	mov	r2, r4
 8002e84:	462b      	mov	r3, r5
 8002e86:	f04f 0000 	mov.w	r0, #0
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	0159      	lsls	r1, r3, #5
 8002e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e94:	0150      	lsls	r0, r2, #5
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	1a51      	subs	r1, r2, r1
 8002e9e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	018b      	lsls	r3, r1, #6
 8002eb8:	4641      	mov	r1, r8
 8002eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	018a      	lsls	r2, r1, #6
 8002ec2:	4641      	mov	r1, r8
 8002ec4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ec8:	4649      	mov	r1, r9
 8002eca:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002eda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ede:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ee2:	4692      	mov	sl, r2
 8002ee4:	469b      	mov	fp, r3
 8002ee6:	4623      	mov	r3, r4
 8002ee8:	eb1a 0303 	adds.w	r3, sl, r3
 8002eec:	623b      	str	r3, [r7, #32]
 8002eee:	462b      	mov	r3, r5
 8002ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f02:	4629      	mov	r1, r5
 8002f04:	028b      	lsls	r3, r1, #10
 8002f06:	4621      	mov	r1, r4
 8002f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	028a      	lsls	r2, r1, #10
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f18:	2200      	movs	r2, #0
 8002f1a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f1c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f22:	f7fd f96f 	bl	8000204 <__aeabi_uldivmod>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f30:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	0c1b      	lsrs	r3, r3, #16
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f52:	e0eb      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f54:	4b38      	ldr	r3, [pc, #224]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f60:	4b35      	ldr	r3, [pc, #212]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d06b      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6c:	4b32      	ldr	r3, [pc, #200]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	099b      	lsrs	r3, r3, #6
 8002f72:	2200      	movs	r2, #0
 8002f74:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8002f80:	2300      	movs	r3, #0
 8002f82:	667b      	str	r3, [r7, #100]	; 0x64
 8002f84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f88:	4622      	mov	r2, r4
 8002f8a:	462b      	mov	r3, r5
 8002f8c:	f04f 0000 	mov.w	r0, #0
 8002f90:	f04f 0100 	mov.w	r1, #0
 8002f94:	0159      	lsls	r1, r3, #5
 8002f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f9a:	0150      	lsls	r0, r2, #5
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	1a51      	subs	r1, r2, r1
 8002fa4:	61b9      	str	r1, [r7, #24]
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	eb63 0301 	sbc.w	r3, r3, r1
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fba:	4659      	mov	r1, fp
 8002fbc:	018b      	lsls	r3, r1, #6
 8002fbe:	4651      	mov	r1, sl
 8002fc0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fc4:	4651      	mov	r1, sl
 8002fc6:	018a      	lsls	r2, r1, #6
 8002fc8:	4651      	mov	r1, sl
 8002fca:	ebb2 0801 	subs.w	r8, r2, r1
 8002fce:	4659      	mov	r1, fp
 8002fd0:	eb63 0901 	sbc.w	r9, r3, r1
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fe0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe8:	4690      	mov	r8, r2
 8002fea:	4699      	mov	r9, r3
 8002fec:	4623      	mov	r3, r4
 8002fee:	eb18 0303 	adds.w	r3, r8, r3
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	462b      	mov	r3, r5
 8002ff6:	eb49 0303 	adc.w	r3, r9, r3
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003008:	4629      	mov	r1, r5
 800300a:	024b      	lsls	r3, r1, #9
 800300c:	4621      	mov	r1, r4
 800300e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003012:	4621      	mov	r1, r4
 8003014:	024a      	lsls	r2, r1, #9
 8003016:	4610      	mov	r0, r2
 8003018:	4619      	mov	r1, r3
 800301a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800301e:	2200      	movs	r2, #0
 8003020:	65bb      	str	r3, [r7, #88]	; 0x58
 8003022:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003024:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003028:	f7fd f8ec 	bl	8000204 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4613      	mov	r3, r2
 8003032:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003036:	e065      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x420>
 8003038:	40023800 	.word	0x40023800
 800303c:	00f42400 	.word	0x00f42400
 8003040:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003044:	4b3d      	ldr	r3, [pc, #244]	; (800313c <HAL_RCC_GetSysClockFreq+0x458>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	2200      	movs	r2, #0
 800304c:	4618      	mov	r0, r3
 800304e:	4611      	mov	r1, r2
 8003050:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003054:	653b      	str	r3, [r7, #80]	; 0x50
 8003056:	2300      	movs	r3, #0
 8003058:	657b      	str	r3, [r7, #84]	; 0x54
 800305a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800305e:	4642      	mov	r2, r8
 8003060:	464b      	mov	r3, r9
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f04f 0100 	mov.w	r1, #0
 800306a:	0159      	lsls	r1, r3, #5
 800306c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003070:	0150      	lsls	r0, r2, #5
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4641      	mov	r1, r8
 8003078:	1a51      	subs	r1, r2, r1
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	4649      	mov	r1, r9
 800307e:	eb63 0301 	sbc.w	r3, r3, r1
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003090:	4659      	mov	r1, fp
 8003092:	018b      	lsls	r3, r1, #6
 8003094:	4651      	mov	r1, sl
 8003096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800309a:	4651      	mov	r1, sl
 800309c:	018a      	lsls	r2, r1, #6
 800309e:	4651      	mov	r1, sl
 80030a0:	1a54      	subs	r4, r2, r1
 80030a2:	4659      	mov	r1, fp
 80030a4:	eb63 0501 	sbc.w	r5, r3, r1
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	00eb      	lsls	r3, r5, #3
 80030b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030b6:	00e2      	lsls	r2, r4, #3
 80030b8:	4614      	mov	r4, r2
 80030ba:	461d      	mov	r5, r3
 80030bc:	4643      	mov	r3, r8
 80030be:	18e3      	adds	r3, r4, r3
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	464b      	mov	r3, r9
 80030c4:	eb45 0303 	adc.w	r3, r5, r3
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030d6:	4629      	mov	r1, r5
 80030d8:	028b      	lsls	r3, r1, #10
 80030da:	4621      	mov	r1, r4
 80030dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e0:	4621      	mov	r1, r4
 80030e2:	028a      	lsls	r2, r1, #10
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030ec:	2200      	movs	r2, #0
 80030ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80030f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030f6:	f7fd f885 	bl	8000204 <__aeabi_uldivmod>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4613      	mov	r3, r2
 8003100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003104:	4b0d      	ldr	r3, [pc, #52]	; (800313c <HAL_RCC_GetSysClockFreq+0x458>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	0f1b      	lsrs	r3, r3, #28
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003112:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003122:	e003      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800312a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800312c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003130:	4618      	mov	r0, r3
 8003132:	37b8      	adds	r7, #184	; 0xb8
 8003134:	46bd      	mov	sp, r7
 8003136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800
 8003140:	00f42400 	.word	0x00f42400

08003144 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e28d      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8083 	beq.w	800326a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003164:	4b94      	ldr	r3, [pc, #592]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b04      	cmp	r3, #4
 800316e:	d019      	beq.n	80031a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003170:	4b91      	ldr	r3, [pc, #580]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003178:	2b08      	cmp	r3, #8
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800317c:	4b8e      	ldr	r3, [pc, #568]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003188:	d00c      	beq.n	80031a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318a:	4b8b      	ldr	r3, [pc, #556]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003192:	2b0c      	cmp	r3, #12
 8003194:	d112      	bne.n	80031bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003196:	4b88      	ldr	r3, [pc, #544]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a2:	d10b      	bne.n	80031bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	4b84      	ldr	r3, [pc, #528]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d05b      	beq.n	8003268 <HAL_RCC_OscConfig+0x124>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d157      	bne.n	8003268 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e25a      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c4:	d106      	bne.n	80031d4 <HAL_RCC_OscConfig+0x90>
 80031c6:	4b7c      	ldr	r3, [pc, #496]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a7b      	ldr	r2, [pc, #492]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e01d      	b.n	8003210 <HAL_RCC_OscConfig+0xcc>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0xb4>
 80031de:	4b76      	ldr	r3, [pc, #472]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a75      	ldr	r2, [pc, #468]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	4b73      	ldr	r3, [pc, #460]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a72      	ldr	r2, [pc, #456]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_OscConfig+0xcc>
 80031f8:	4b6f      	ldr	r3, [pc, #444]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a6e      	ldr	r2, [pc, #440]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b6c      	ldr	r3, [pc, #432]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a6b      	ldr	r2, [pc, #428]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800320a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fd fd7e 	bl	8000d18 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003220:	f7fd fd7a 	bl	8000d18 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e21f      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b61      	ldr	r3, [pc, #388]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0xdc>
 800323e:	e014      	b.n	800326a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fd fd6a 	bl	8000d18 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003248:	f7fd fd66 	bl	8000d18 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e20b      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	4b57      	ldr	r3, [pc, #348]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x104>
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d06f      	beq.n	8003356 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003276:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b00      	cmp	r3, #0
 8003280:	d017      	beq.n	80032b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003282:	4b4d      	ldr	r3, [pc, #308]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800328a:	2b08      	cmp	r3, #8
 800328c:	d105      	bne.n	800329a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800328e:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d11c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a6:	4b44      	ldr	r3, [pc, #272]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d116      	bne.n	80032e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b2:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <HAL_RCC_OscConfig+0x186>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d001      	beq.n	80032ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e1d3      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ca:	4b3b      	ldr	r3, [pc, #236]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4937      	ldr	r1, [pc, #220]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032de:	e03a      	b.n	8003356 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d020      	beq.n	800332a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e8:	4b34      	ldr	r3, [pc, #208]	; (80033bc <HAL_RCC_OscConfig+0x278>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fd fd13 	bl	8000d18 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f6:	f7fd fd0f 	bl	8000d18 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e1b4      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	4b2b      	ldr	r3, [pc, #172]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003314:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4925      	ldr	r1, [pc, #148]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003324:	4313      	orrs	r3, r2
 8003326:	600b      	str	r3, [r1, #0]
 8003328:	e015      	b.n	8003356 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332a:	4b24      	ldr	r3, [pc, #144]	; (80033bc <HAL_RCC_OscConfig+0x278>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fd fcf2 	bl	8000d18 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003338:	f7fd fcee 	bl	8000d18 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e193      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d036      	beq.n	80033d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d016      	beq.n	8003398 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800336a:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <HAL_RCC_OscConfig+0x27c>)
 800336c:	2201      	movs	r2, #1
 800336e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fd fcd2 	bl	8000d18 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003378:	f7fd fcce 	bl	8000d18 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e173      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800338c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x234>
 8003396:	e01b      	b.n	80033d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCC_OscConfig+0x27c>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339e:	f7fd fcbb 	bl	8000d18 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a4:	e00e      	b.n	80033c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a6:	f7fd fcb7 	bl	8000d18 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d907      	bls.n	80033c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e15c      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
 80033b8:	40023800 	.word	0x40023800
 80033bc:	42470000 	.word	0x42470000
 80033c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c4:	4b8a      	ldr	r3, [pc, #552]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80033c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ea      	bne.n	80033a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8097 	beq.w	800350c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033de:	2300      	movs	r3, #0
 80033e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e2:	4b83      	ldr	r3, [pc, #524]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10f      	bne.n	800340e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	4b7f      	ldr	r3, [pc, #508]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	4a7e      	ldr	r2, [pc, #504]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80033f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fc:	6413      	str	r3, [r2, #64]	; 0x40
 80033fe:	4b7c      	ldr	r3, [pc, #496]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340a:	2301      	movs	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340e:	4b79      	ldr	r3, [pc, #484]	; (80035f4 <HAL_RCC_OscConfig+0x4b0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d118      	bne.n	800344c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341a:	4b76      	ldr	r3, [pc, #472]	; (80035f4 <HAL_RCC_OscConfig+0x4b0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a75      	ldr	r2, [pc, #468]	; (80035f4 <HAL_RCC_OscConfig+0x4b0>)
 8003420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003426:	f7fd fc77 	bl	8000d18 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342e:	f7fd fc73 	bl	8000d18 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e118      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	4b6c      	ldr	r3, [pc, #432]	; (80035f4 <HAL_RCC_OscConfig+0x4b0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d106      	bne.n	8003462 <HAL_RCC_OscConfig+0x31e>
 8003454:	4b66      	ldr	r3, [pc, #408]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	4a65      	ldr	r2, [pc, #404]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	; 0x70
 8003460:	e01c      	b.n	800349c <HAL_RCC_OscConfig+0x358>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b05      	cmp	r3, #5
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0x340>
 800346a:	4b61      	ldr	r3, [pc, #388]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	4a60      	ldr	r2, [pc, #384]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6713      	str	r3, [r2, #112]	; 0x70
 8003476:	4b5e      	ldr	r3, [pc, #376]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6713      	str	r3, [r2, #112]	; 0x70
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0x358>
 8003484:	4b5a      	ldr	r3, [pc, #360]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	4a59      	ldr	r2, [pc, #356]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	6713      	str	r3, [r2, #112]	; 0x70
 8003490:	4b57      	ldr	r3, [pc, #348]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	4a56      	ldr	r2, [pc, #344]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003496:	f023 0304 	bic.w	r3, r3, #4
 800349a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d015      	beq.n	80034d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fd fc38 	bl	8000d18 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fd fc34 	bl	8000d18 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0d7      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ee      	beq.n	80034ac <HAL_RCC_OscConfig+0x368>
 80034ce:	e014      	b.n	80034fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fd fc22 	bl	8000d18 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fd fc1e 	bl	8000d18 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e0c1      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ee:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1ee      	bne.n	80034d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d105      	bne.n	800350c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003500:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	4a3a      	ldr	r2, [pc, #232]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80ad 	beq.w	8003670 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b08      	cmp	r3, #8
 8003520:	d060      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d145      	bne.n	80035b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352a:	4b33      	ldr	r3, [pc, #204]	; (80035f8 <HAL_RCC_OscConfig+0x4b4>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fd fbf2 	bl	8000d18 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003538:	f7fd fbee 	bl	8000d18 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e093      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	019b      	lsls	r3, r3, #6
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	3b01      	subs	r3, #1
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	061b      	lsls	r3, r3, #24
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	071b      	lsls	r3, r3, #28
 8003582:	491b      	ldr	r1, [pc, #108]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003588:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <HAL_RCC_OscConfig+0x4b4>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358e:	f7fd fbc3 	bl	8000d18 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003596:	f7fd fbbf 	bl	8000d18 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e064      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x452>
 80035b4:	e05c      	b.n	8003670 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <HAL_RCC_OscConfig+0x4b4>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fd fbac 	bl	8000d18 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fd fba8 	bl	8000d18 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e04d      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x480>
 80035e2:	e045      	b.n	8003670 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e040      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40007000 	.word	0x40007000
 80035f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <HAL_RCC_OscConfig+0x538>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d030      	beq.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d129      	bne.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d122      	bne.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800362c:	4013      	ands	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003634:	4293      	cmp	r3, r2
 8003636:	d119      	bne.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	3b01      	subs	r3, #1
 8003646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d10f      	bne.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d107      	bne.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800

08003680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e03f      	b.n	8003712 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd f9b2 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2224      	movs	r2, #36	; 0x24
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f829 	bl	800371c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800371c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003720:	b0c0      	sub	sp, #256	; 0x100
 8003722:	af00      	add	r7, sp, #0
 8003724:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	68d9      	ldr	r1, [r3, #12]
 800373a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	ea40 0301 	orr.w	r3, r0, r1
 8003744:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	431a      	orrs	r2, r3
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	431a      	orrs	r2, r3
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003774:	f021 010c 	bic.w	r1, r1, #12
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003782:	430b      	orrs	r3, r1
 8003784:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	6999      	ldr	r1, [r3, #24]
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	ea40 0301 	orr.w	r3, r0, r1
 80037a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b8f      	ldr	r3, [pc, #572]	; (80039e8 <UART_SetConfig+0x2cc>)
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d005      	beq.n	80037bc <UART_SetConfig+0xa0>
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b8d      	ldr	r3, [pc, #564]	; (80039ec <UART_SetConfig+0x2d0>)
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d104      	bne.n	80037c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037bc:	f7fe ff54 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 80037c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037c4:	e003      	b.n	80037ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037c6:	f7fe ff3b 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 80037ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d8:	f040 810c 	bne.w	80039f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037e0:	2200      	movs	r2, #0
 80037e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037ee:	4622      	mov	r2, r4
 80037f0:	462b      	mov	r3, r5
 80037f2:	1891      	adds	r1, r2, r2
 80037f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80037f6:	415b      	adcs	r3, r3
 80037f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037fe:	4621      	mov	r1, r4
 8003800:	eb12 0801 	adds.w	r8, r2, r1
 8003804:	4629      	mov	r1, r5
 8003806:	eb43 0901 	adc.w	r9, r3, r1
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800381a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800381e:	4690      	mov	r8, r2
 8003820:	4699      	mov	r9, r3
 8003822:	4623      	mov	r3, r4
 8003824:	eb18 0303 	adds.w	r3, r8, r3
 8003828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800382c:	462b      	mov	r3, r5
 800382e:	eb49 0303 	adc.w	r3, r9, r3
 8003832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003842:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003846:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800384a:	460b      	mov	r3, r1
 800384c:	18db      	adds	r3, r3, r3
 800384e:	653b      	str	r3, [r7, #80]	; 0x50
 8003850:	4613      	mov	r3, r2
 8003852:	eb42 0303 	adc.w	r3, r2, r3
 8003856:	657b      	str	r3, [r7, #84]	; 0x54
 8003858:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800385c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003860:	f7fc fcd0 	bl	8000204 <__aeabi_uldivmod>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4b61      	ldr	r3, [pc, #388]	; (80039f0 <UART_SetConfig+0x2d4>)
 800386a:	fba3 2302 	umull	r2, r3, r3, r2
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	011c      	lsls	r4, r3, #4
 8003872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003876:	2200      	movs	r2, #0
 8003878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800387c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003880:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003884:	4642      	mov	r2, r8
 8003886:	464b      	mov	r3, r9
 8003888:	1891      	adds	r1, r2, r2
 800388a:	64b9      	str	r1, [r7, #72]	; 0x48
 800388c:	415b      	adcs	r3, r3
 800388e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003890:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003894:	4641      	mov	r1, r8
 8003896:	eb12 0a01 	adds.w	sl, r2, r1
 800389a:	4649      	mov	r1, r9
 800389c:	eb43 0b01 	adc.w	fp, r3, r1
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b4:	4692      	mov	sl, r2
 80038b6:	469b      	mov	fp, r3
 80038b8:	4643      	mov	r3, r8
 80038ba:	eb1a 0303 	adds.w	r3, sl, r3
 80038be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038c2:	464b      	mov	r3, r9
 80038c4:	eb4b 0303 	adc.w	r3, fp, r3
 80038c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038e0:	460b      	mov	r3, r1
 80038e2:	18db      	adds	r3, r3, r3
 80038e4:	643b      	str	r3, [r7, #64]	; 0x40
 80038e6:	4613      	mov	r3, r2
 80038e8:	eb42 0303 	adc.w	r3, r2, r3
 80038ec:	647b      	str	r3, [r7, #68]	; 0x44
 80038ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038f6:	f7fc fc85 	bl	8000204 <__aeabi_uldivmod>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4611      	mov	r1, r2
 8003900:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <UART_SetConfig+0x2d4>)
 8003902:	fba3 2301 	umull	r2, r3, r3, r1
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2264      	movs	r2, #100	; 0x64
 800390a:	fb02 f303 	mul.w	r3, r2, r3
 800390e:	1acb      	subs	r3, r1, r3
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003916:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <UART_SetConfig+0x2d4>)
 8003918:	fba3 2302 	umull	r2, r3, r3, r2
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003924:	441c      	add	r4, r3
 8003926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800392a:	2200      	movs	r2, #0
 800392c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003930:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003934:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003938:	4642      	mov	r2, r8
 800393a:	464b      	mov	r3, r9
 800393c:	1891      	adds	r1, r2, r2
 800393e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003940:	415b      	adcs	r3, r3
 8003942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003944:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003948:	4641      	mov	r1, r8
 800394a:	1851      	adds	r1, r2, r1
 800394c:	6339      	str	r1, [r7, #48]	; 0x30
 800394e:	4649      	mov	r1, r9
 8003950:	414b      	adcs	r3, r1
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003960:	4659      	mov	r1, fp
 8003962:	00cb      	lsls	r3, r1, #3
 8003964:	4651      	mov	r1, sl
 8003966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800396a:	4651      	mov	r1, sl
 800396c:	00ca      	lsls	r2, r1, #3
 800396e:	4610      	mov	r0, r2
 8003970:	4619      	mov	r1, r3
 8003972:	4603      	mov	r3, r0
 8003974:	4642      	mov	r2, r8
 8003976:	189b      	adds	r3, r3, r2
 8003978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800397c:	464b      	mov	r3, r9
 800397e:	460a      	mov	r2, r1
 8003980:	eb42 0303 	adc.w	r3, r2, r3
 8003984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003994:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003998:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800399c:	460b      	mov	r3, r1
 800399e:	18db      	adds	r3, r3, r3
 80039a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039a2:	4613      	mov	r3, r2
 80039a4:	eb42 0303 	adc.w	r3, r2, r3
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039b2:	f7fc fc27 	bl	8000204 <__aeabi_uldivmod>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <UART_SetConfig+0x2d4>)
 80039bc:	fba3 1302 	umull	r1, r3, r3, r2
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	2164      	movs	r1, #100	; 0x64
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	3332      	adds	r3, #50	; 0x32
 80039ce:	4a08      	ldr	r2, [pc, #32]	; (80039f0 <UART_SetConfig+0x2d4>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	f003 0207 	and.w	r2, r3, #7
 80039da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4422      	add	r2, r4
 80039e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039e4:	e105      	b.n	8003bf2 <UART_SetConfig+0x4d6>
 80039e6:	bf00      	nop
 80039e8:	40011000 	.word	0x40011000
 80039ec:	40011400 	.word	0x40011400
 80039f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039f8:	2200      	movs	r2, #0
 80039fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a06:	4642      	mov	r2, r8
 8003a08:	464b      	mov	r3, r9
 8003a0a:	1891      	adds	r1, r2, r2
 8003a0c:	6239      	str	r1, [r7, #32]
 8003a0e:	415b      	adcs	r3, r3
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
 8003a12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a16:	4641      	mov	r1, r8
 8003a18:	1854      	adds	r4, r2, r1
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	eb43 0501 	adc.w	r5, r3, r1
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	00eb      	lsls	r3, r5, #3
 8003a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a2e:	00e2      	lsls	r2, r4, #3
 8003a30:	4614      	mov	r4, r2
 8003a32:	461d      	mov	r5, r3
 8003a34:	4643      	mov	r3, r8
 8003a36:	18e3      	adds	r3, r4, r3
 8003a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a3c:	464b      	mov	r3, r9
 8003a3e:	eb45 0303 	adc.w	r3, r5, r3
 8003a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a62:	4629      	mov	r1, r5
 8003a64:	008b      	lsls	r3, r1, #2
 8003a66:	4621      	mov	r1, r4
 8003a68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	008a      	lsls	r2, r1, #2
 8003a70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a74:	f7fc fbc6 	bl	8000204 <__aeabi_uldivmod>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4b60      	ldr	r3, [pc, #384]	; (8003c00 <UART_SetConfig+0x4e4>)
 8003a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	011c      	lsls	r4, r3, #4
 8003a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a98:	4642      	mov	r2, r8
 8003a9a:	464b      	mov	r3, r9
 8003a9c:	1891      	adds	r1, r2, r2
 8003a9e:	61b9      	str	r1, [r7, #24]
 8003aa0:	415b      	adcs	r3, r3
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	1851      	adds	r1, r2, r1
 8003aac:	6139      	str	r1, [r7, #16]
 8003aae:	4649      	mov	r1, r9
 8003ab0:	414b      	adcs	r3, r1
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac0:	4659      	mov	r1, fp
 8003ac2:	00cb      	lsls	r3, r1, #3
 8003ac4:	4651      	mov	r1, sl
 8003ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aca:	4651      	mov	r1, sl
 8003acc:	00ca      	lsls	r2, r1, #3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4642      	mov	r2, r8
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003adc:	464b      	mov	r3, r9
 8003ade:	460a      	mov	r2, r1
 8003ae0:	eb42 0303 	adc.w	r3, r2, r3
 8003ae4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003af2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b00:	4649      	mov	r1, r9
 8003b02:	008b      	lsls	r3, r1, #2
 8003b04:	4641      	mov	r1, r8
 8003b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b0a:	4641      	mov	r1, r8
 8003b0c:	008a      	lsls	r2, r1, #2
 8003b0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b12:	f7fc fb77 	bl	8000204 <__aeabi_uldivmod>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <UART_SetConfig+0x4e4>)
 8003b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	2164      	movs	r1, #100	; 0x64
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	3332      	adds	r3, #50	; 0x32
 8003b2e:	4a34      	ldr	r2, [pc, #208]	; (8003c00 <UART_SetConfig+0x4e4>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b3a:	441c      	add	r4, r3
 8003b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b40:	2200      	movs	r2, #0
 8003b42:	673b      	str	r3, [r7, #112]	; 0x70
 8003b44:	677a      	str	r2, [r7, #116]	; 0x74
 8003b46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b4a:	4642      	mov	r2, r8
 8003b4c:	464b      	mov	r3, r9
 8003b4e:	1891      	adds	r1, r2, r2
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	415b      	adcs	r3, r3
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b5a:	4641      	mov	r1, r8
 8003b5c:	1851      	adds	r1, r2, r1
 8003b5e:	6039      	str	r1, [r7, #0]
 8003b60:	4649      	mov	r1, r9
 8003b62:	414b      	adcs	r3, r1
 8003b64:	607b      	str	r3, [r7, #4]
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b72:	4659      	mov	r1, fp
 8003b74:	00cb      	lsls	r3, r1, #3
 8003b76:	4651      	mov	r1, sl
 8003b78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b7c:	4651      	mov	r1, sl
 8003b7e:	00ca      	lsls	r2, r1, #3
 8003b80:	4610      	mov	r0, r2
 8003b82:	4619      	mov	r1, r3
 8003b84:	4603      	mov	r3, r0
 8003b86:	4642      	mov	r2, r8
 8003b88:	189b      	adds	r3, r3, r2
 8003b8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b8c:	464b      	mov	r3, r9
 8003b8e:	460a      	mov	r2, r1
 8003b90:	eb42 0303 	adc.w	r3, r2, r3
 8003b94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba0:	667a      	str	r2, [r7, #100]	; 0x64
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bae:	4649      	mov	r1, r9
 8003bb0:	008b      	lsls	r3, r1, #2
 8003bb2:	4641      	mov	r1, r8
 8003bb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bb8:	4641      	mov	r1, r8
 8003bba:	008a      	lsls	r2, r1, #2
 8003bbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bc0:	f7fc fb20 	bl	8000204 <__aeabi_uldivmod>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <UART_SetConfig+0x4e4>)
 8003bca:	fba3 1302 	umull	r1, r3, r3, r2
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	2164      	movs	r1, #100	; 0x64
 8003bd2:	fb01 f303 	mul.w	r3, r1, r3
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	3332      	adds	r3, #50	; 0x32
 8003bdc:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <UART_SetConfig+0x4e4>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	f003 020f 	and.w	r2, r3, #15
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4422      	add	r2, r4
 8003bf0:	609a      	str	r2, [r3, #8]
}
 8003bf2:	bf00      	nop
 8003bf4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bfe:	bf00      	nop
 8003c00:	51eb851f 	.word	0x51eb851f

08003c04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c04:	b084      	sub	sp, #16
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b084      	sub	sp, #16
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	f107 001c 	add.w	r0, r7, #28
 8003c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d122      	bne.n	8003c62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d105      	bne.n	8003c56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa9c 	bl	8004194 <USB_CoreReset>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	73fb      	strb	r3, [r7, #15]
 8003c60:	e01a      	b.n	8003c98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fa90 	bl	8004194 <USB_CoreReset>
 8003c74:	4603      	mov	r3, r0
 8003c76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	639a      	str	r2, [r3, #56]	; 0x38
 8003c8a:	e005      	b.n	8003c98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d10b      	bne.n	8003cb6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f043 0206 	orr.w	r2, r3, #6
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f043 0220 	orr.w	r2, r3, #32
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cc2:	b004      	add	sp, #16
 8003cc4:	4770      	bx	lr

08003cc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f023 0201 	bic.w	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d115      	bne.n	8003d36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d16:	2001      	movs	r0, #1
 8003d18:	f7fd f80a 	bl	8000d30 <HAL_Delay>
      ms++;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fa28 	bl	8004178 <USB_GetMode>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d01e      	beq.n	8003d6c <USB_SetCurrentMode+0x84>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b31      	cmp	r3, #49	; 0x31
 8003d32:	d9f0      	bls.n	8003d16 <USB_SetCurrentMode+0x2e>
 8003d34:	e01a      	b.n	8003d6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d115      	bne.n	8003d68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d48:	2001      	movs	r0, #1
 8003d4a:	f7fc fff1 	bl	8000d30 <HAL_Delay>
      ms++;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3301      	adds	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fa0f 	bl	8004178 <USB_GetMode>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <USB_SetCurrentMode+0x84>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b31      	cmp	r3, #49	; 0x31
 8003d64:	d9f0      	bls.n	8003d48 <USB_SetCurrentMode+0x60>
 8003d66:	e001      	b.n	8003d6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e005      	b.n	8003d78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b32      	cmp	r3, #50	; 0x32
 8003d70:	d101      	bne.n	8003d76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d80:	b084      	sub	sp, #16
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b086      	sub	sp, #24
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	e009      	b.n	8003db4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	3340      	adds	r3, #64	; 0x40
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	2200      	movs	r2, #0
 8003dac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	3301      	adds	r3, #1
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b0e      	cmp	r3, #14
 8003db8:	d9f2      	bls.n	8003da0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d11c      	bne.n	8003dfa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dce:	f043 0302 	orr.w	r3, r3, #2
 8003dd2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e005      	b.n	8003e06 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	2300      	movs	r3, #0
 8003e10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e18:	4619      	mov	r1, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e20:	461a      	mov	r2, r3
 8003e22:	680b      	ldr	r3, [r1, #0]
 8003e24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d10c      	bne.n	8003e46 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d104      	bne.n	8003e3c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e32:	2100      	movs	r1, #0
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f965 	bl	8004104 <USB_SetDevSpeed>
 8003e3a:	e008      	b.n	8003e4e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f960 	bl	8004104 <USB_SetDevSpeed>
 8003e44:	e003      	b.n	8003e4e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e46:	2103      	movs	r1, #3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f95b 	bl	8004104 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e4e:	2110      	movs	r1, #16
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f8f3 	bl	800403c <USB_FlushTxFifo>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f91f 	bl	80040a4 <USB_FlushRxFifo>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e76:	461a      	mov	r2, r3
 8003e78:	2300      	movs	r3, #0
 8003e7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e82:	461a      	mov	r2, r3
 8003e84:	2300      	movs	r3, #0
 8003e86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2300      	movs	r3, #0
 8003e92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	e043      	b.n	8003f22 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eb0:	d118      	bne.n	8003ee4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	e013      	b.n	8003ef6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eda:	461a      	mov	r2, r3
 8003edc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e008      	b.n	8003ef6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f02:	461a      	mov	r2, r3
 8003f04:	2300      	movs	r3, #0
 8003f06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f14:	461a      	mov	r2, r3
 8003f16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d3b7      	bcc.n	8003e9a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	e043      	b.n	8003fb8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f46:	d118      	bne.n	8003f7a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e013      	b.n	8003f8c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f70:	461a      	mov	r2, r3
 8003f72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	e008      	b.n	8003f8c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f86:	461a      	mov	r2, r3
 8003f88:	2300      	movs	r3, #0
 8003f8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003faa:	461a      	mov	r2, r3
 8003fac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d3b7      	bcc.n	8003f30 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003fe0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	f043 0210 	orr.w	r2, r3, #16
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699a      	ldr	r2, [r3, #24]
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <USB_DevInit+0x2b8>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f043 0208 	orr.w	r2, r3, #8
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d107      	bne.n	8004028 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004020:	f043 0304 	orr.w	r3, r3, #4
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004028:	7dfb      	ldrb	r3, [r7, #23]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004034:	b004      	add	sp, #16
 8004036:	4770      	bx	lr
 8004038:	803c3800 	.word	0x803c3800

0800403c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3301      	adds	r3, #1
 800404e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4a13      	ldr	r2, [pc, #76]	; (80040a0 <USB_FlushTxFifo+0x64>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e01b      	b.n	8004094 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	daf2      	bge.n	800404a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	019b      	lsls	r3, r3, #6
 800406c:	f043 0220 	orr.w	r2, r3, #32
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3301      	adds	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <USB_FlushTxFifo+0x64>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e006      	b.n	8004094 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b20      	cmp	r3, #32
 8004090:	d0f0      	beq.n	8004074 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	00030d40 	.word	0x00030d40

080040a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	3301      	adds	r3, #1
 80040b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a11      	ldr	r2, [pc, #68]	; (8004100 <USB_FlushRxFifo+0x5c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e018      	b.n	80040f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	daf2      	bge.n	80040b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2210      	movs	r2, #16
 80040d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3301      	adds	r3, #1
 80040d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4a08      	ldr	r2, [pc, #32]	; (8004100 <USB_FlushRxFifo+0x5c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e006      	b.n	80040f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d0f0      	beq.n	80040d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	00030d40 	.word	0x00030d40

08004104 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004136:	b480      	push	{r7}
 8004138:	b085      	sub	sp, #20
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004150:	f023 0303 	bic.w	r3, r3, #3
 8004154:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004164:	f043 0302 	orr.w	r3, r3, #2
 8004168:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0301 	and.w	r3, r3, #1
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3301      	adds	r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4a13      	ldr	r2, [pc, #76]	; (80041f8 <USB_CoreReset+0x64>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e01b      	b.n	80041ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	daf2      	bge.n	80041a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f043 0201 	orr.w	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3301      	adds	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4a09      	ldr	r2, [pc, #36]	; (80041f8 <USB_CoreReset+0x64>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d901      	bls.n	80041dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e006      	b.n	80041ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d0f0      	beq.n	80041ca <USB_CoreReset+0x36>

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	00030d40 	.word	0x00030d40

080041fc <__libc_init_array>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	4d0d      	ldr	r5, [pc, #52]	; (8004234 <__libc_init_array+0x38>)
 8004200:	4c0d      	ldr	r4, [pc, #52]	; (8004238 <__libc_init_array+0x3c>)
 8004202:	1b64      	subs	r4, r4, r5
 8004204:	10a4      	asrs	r4, r4, #2
 8004206:	2600      	movs	r6, #0
 8004208:	42a6      	cmp	r6, r4
 800420a:	d109      	bne.n	8004220 <__libc_init_array+0x24>
 800420c:	4d0b      	ldr	r5, [pc, #44]	; (800423c <__libc_init_array+0x40>)
 800420e:	4c0c      	ldr	r4, [pc, #48]	; (8004240 <__libc_init_array+0x44>)
 8004210:	f000 f820 	bl	8004254 <_init>
 8004214:	1b64      	subs	r4, r4, r5
 8004216:	10a4      	asrs	r4, r4, #2
 8004218:	2600      	movs	r6, #0
 800421a:	42a6      	cmp	r6, r4
 800421c:	d105      	bne.n	800422a <__libc_init_array+0x2e>
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	f855 3b04 	ldr.w	r3, [r5], #4
 8004224:	4798      	blx	r3
 8004226:	3601      	adds	r6, #1
 8004228:	e7ee      	b.n	8004208 <__libc_init_array+0xc>
 800422a:	f855 3b04 	ldr.w	r3, [r5], #4
 800422e:	4798      	blx	r3
 8004230:	3601      	adds	r6, #1
 8004232:	e7f2      	b.n	800421a <__libc_init_array+0x1e>
 8004234:	0800428c 	.word	0x0800428c
 8004238:	0800428c 	.word	0x0800428c
 800423c:	0800428c 	.word	0x0800428c
 8004240:	08004290 	.word	0x08004290

08004244 <memset>:
 8004244:	4402      	add	r2, r0
 8004246:	4603      	mov	r3, r0
 8004248:	4293      	cmp	r3, r2
 800424a:	d100      	bne.n	800424e <memset+0xa>
 800424c:	4770      	bx	lr
 800424e:	f803 1b01 	strb.w	r1, [r3], #1
 8004252:	e7f9      	b.n	8004248 <memset+0x4>

08004254 <_init>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	bf00      	nop
 8004258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425a:	bc08      	pop	{r3}
 800425c:	469e      	mov	lr, r3
 800425e:	4770      	bx	lr

08004260 <_fini>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	bf00      	nop
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr

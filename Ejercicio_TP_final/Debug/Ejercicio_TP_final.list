
Ejercicio_TP_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004874  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004a38  08004a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b28  08004b28  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08004b28  08004b28  00014b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b30  08004b30  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  20000024  08004b5c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  08004b5c  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010afc  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026bf  00000000  00000000  00030b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00033210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00033fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002339b  00000000  00000000  00034c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013395  00000000  00000000  0005801b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdafa  00000000  00000000  0006b3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138eaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003880  00000000  00000000  00138efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004a20 	.word	0x08004a20

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08004a20 	.word	0x08004a20

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fe83 	bl	8001218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f82b 	bl	800056c <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  uartInit();
 8000516:	f000 fd15 	bl	8000f44 <uartInit>
  MX_I2C1_Init();
 800051a:	f000 fa27 	bl	800096c <MX_I2C1_Init>
  ctrl_leds_acel_INIT();
 800051e:	f000 fdc9 	bl	80010b4 <ctrl_leds_acel_INIT>
  /* USER CODE BEGIN 2 */
  init_adxl(DIRECCION_ADXL);
 8000522:	20a6      	movs	r0, #166	; 0xa6
 8000524:	f000 fb3e 	bl	8000ba4 <init_adxl>
  int8_t X,Y;
  /* USER CODE END 2 */
  X=estadoX();
 8000528:	f000 fc1c 	bl	8000d64 <estadoX>
 800052c:	4603      	mov	r3, r0
 800052e:	71fb      	strb	r3, [r7, #7]
  Y=estadoY();
 8000530:	f000 fc2a 	bl	8000d88 <estadoY>
 8000534:	4603      	mov	r3, r0
 8000536:	71bb      	strb	r3, [r7, #6]
  update_leds_acel(X,Y);
 8000538:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800053c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000540:	4611      	mov	r1, r2
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fdc2 	bl	80010cc <update_leds_acel>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  X=estadoX();
 8000548:	f000 fc0c 	bl	8000d64 <estadoX>
 800054c:	4603      	mov	r3, r0
 800054e:	71fb      	strb	r3, [r7, #7]
	  Y=estadoY();
 8000550:	f000 fc1a 	bl	8000d88 <estadoY>
 8000554:	4603      	mov	r3, r0
 8000556:	71bb      	strb	r3, [r7, #6]
	  update_leds_acel(X,Y);
 8000558:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800055c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000560:	4611      	mov	r1, r2
 8000562:	4618      	mov	r0, r3
 8000564:	f000 fdb2 	bl	80010cc <update_leds_acel>
	  X=estadoX();
 8000568:	e7ee      	b.n	8000548 <main+0x40>
	...

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2234      	movs	r2, #52	; 0x34
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f004 fa48 	bl	8004a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b29      	ldr	r3, [pc, #164]	; (800063c <SystemClock_Config+0xd0>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a28      	ldr	r2, [pc, #160]	; (800063c <SystemClock_Config+0xd0>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b26      	ldr	r3, [pc, #152]	; (800063c <SystemClock_Config+0xd0>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <SystemClock_Config+0xd4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a22      	ldr	r2, [pc, #136]	; (8000640 <SystemClock_Config+0xd4>)
 80005b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005dc:	2304      	movs	r3, #4
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005e0:	23a8      	movs	r3, #168	; 0xa8
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e8:	2307      	movs	r3, #7
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 f88b 	bl	8003710 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000600:	f000 f820 	bl	8000644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000610:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2105      	movs	r1, #5
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fa00 	bl	8002a28 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800062e:	f000 f809 	bl	8000644 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	e7fe      	b.n	800064c <Error_Handler+0x8>
	...

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <HAL_MspInit+0x4c>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065e:	4a0f      	ldr	r2, [pc, #60]	; (800069c <HAL_MspInit+0x4c>)
 8000660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000664:	6453      	str	r3, [r2, #68]	; 0x44
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <HAL_MspInit+0x4c>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <HAL_MspInit+0x4c>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	4a08      	ldr	r2, [pc, #32]	; (800069c <HAL_MspInit+0x4c>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	6413      	str	r3, [r2, #64]	; 0x40
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_MspInit+0x4c>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800

080006a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a19      	ldr	r2, [pc, #100]	; (8000724 <HAL_I2C_MspInit+0x84>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d12c      	bne.n	800071c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_I2C_MspInit+0x88>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a17      	ldr	r2, [pc, #92]	; (8000728 <HAL_I2C_MspInit+0x88>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_I2C_MspInit+0x88>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e4:	2312      	movs	r3, #18
 80006e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006f0:	2304      	movs	r3, #4
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4619      	mov	r1, r3
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <HAL_I2C_MspInit+0x8c>)
 80006fc:	f000 ff08 	bl	8001510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <HAL_I2C_MspInit+0x88>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_I2C_MspInit+0x88>)
 800070a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <HAL_I2C_MspInit+0x88>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800071c:	bf00      	nop
 800071e:	3728      	adds	r7, #40	; 0x28
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40005400 	.word	0x40005400
 8000728:	40023800 	.word	0x40023800
 800072c:	40020400 	.word	0x40020400

08000730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <HAL_UART_MspInit+0x84>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d12c      	bne.n	80007ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_UART_MspInit+0x88>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <HAL_UART_MspInit+0x88>)
 800075c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000760:	6413      	str	r3, [r2, #64]	; 0x40
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_UART_MspInit+0x88>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_UART_MspInit+0x88>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <HAL_UART_MspInit+0x88>)
 8000778:	f043 0308 	orr.w	r3, r3, #8
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_UART_MspInit+0x88>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800078a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800079c:	2307      	movs	r3, #7
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <HAL_UART_MspInit+0x8c>)
 80007a8:	f000 feb2 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	; 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40004800 	.word	0x40004800
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020c00 	.word	0x40020c00

080007c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b0a0      	sub	sp, #128	; 0x80
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	225c      	movs	r2, #92	; 0x5c
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f004 f915 	bl	8004a10 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007ee:	d14e      	bne.n	800088e <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80007f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80007f6:	2300      	movs	r3, #0
 80007f8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 fa2c 	bl	8002c5c <HAL_RCCEx_PeriphCLKConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800080a:	f7ff ff1b 	bl	8000644 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <HAL_PCD_MspInit+0xd8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a20      	ldr	r2, [pc, #128]	; (8000898 <HAL_PCD_MspInit+0xd8>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <HAL_PCD_MspInit+0xd8>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800082a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800082e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800083c:	230a      	movs	r3, #10
 800083e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000844:	4619      	mov	r1, r3
 8000846:	4815      	ldr	r0, [pc, #84]	; (800089c <HAL_PCD_MspInit+0xdc>)
 8000848:	f000 fe62 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800084c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000850:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000852:	2300      	movs	r3, #0
 8000854:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800085e:	4619      	mov	r1, r3
 8000860:	480e      	ldr	r0, [pc, #56]	; (800089c <HAL_PCD_MspInit+0xdc>)
 8000862:	f000 fe55 	bl	8001510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_PCD_MspInit+0xd8>)
 8000868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <HAL_PCD_MspInit+0xd8>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6353      	str	r3, [r2, #52]	; 0x34
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_PCD_MspInit+0xd8>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <HAL_PCD_MspInit+0xd8>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_PCD_MspInit+0xd8>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800088e:	bf00      	nop
 8000890:	3780      	adds	r7, #128	; 0x80
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 fce6 	bl	80012bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <SystemInit+0x20>)
 80008fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fe:	4a05      	ldr	r2, [pc, #20]	; (8000914 <SystemInit+0x20>)
 8000900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000950 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800091e:	490e      	ldr	r1, [pc, #56]	; (8000958 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000920:	4a0e      	ldr	r2, [pc, #56]	; (800095c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000934:	4c0b      	ldr	r4, [pc, #44]	; (8000964 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000942:	f7ff ffd7 	bl	80008f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000946:	f004 f83f 	bl	80049c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094a:	f7ff fddd 	bl	8000508 <main>
  bx  lr    
 800094e:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800095c:	08004b38 	.word	0x08004b38
  ldr r2, =_sbss
 8000960:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000964:	200005f8 	.word	0x200005f8

08000968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC_IRQHandler>
	...

0800096c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init()
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_I2C1_Init+0x50>)
 8000972:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <MX_I2C1_Init+0x54>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_I2C1_Init+0x50>)
 8000978:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_I2C1_Init+0x58>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_I2C1_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_I2C1_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_I2C1_Init+0x50>)
 800098a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800098e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_I2C1_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_I2C1_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_I2C1_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_I2C1_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_I2C1_Init+0x50>)
 80009aa:	f000 ff5f 	bl	800186c <HAL_I2C_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009b4:	f7ff fe46 	bl	8000644 <Error_Handler>


  	  */
  /* USER CODE END I2C1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000040 	.word	0x20000040
 80009c0:	40005400 	.word	0x40005400
 80009c4:	000186a0 	.word	0x000186a0

080009c8 <enviar_handle_i2c>:
I2C_HandleTypeDef * enviar_handle_i2c()
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	return &hi2c1;
 80009cc:	4b02      	ldr	r3, [pc, #8]	; (80009d8 <enviar_handle_i2c+0x10>)
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	20000040 	.word	0x20000040

080009dc <INIT_GPIO_LEDS>:
#include "main.h"

//Implementación de funciones públicas

void INIT_GPIO_LEDS(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	; 0x30
 80009e0:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
 80009f6:	4b4c      	ldr	r3, [pc, #304]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a4b      	ldr	r2, [pc, #300]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b49      	ldr	r3, [pc, #292]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	61bb      	str	r3, [r7, #24]
 8000a0c:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
 8000a12:	4b45      	ldr	r3, [pc, #276]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a44      	ldr	r2, [pc, #272]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b42      	ldr	r3, [pc, #264]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b3e      	ldr	r3, [pc, #248]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a3d      	ldr	r2, [pc, #244]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b37      	ldr	r3, [pc, #220]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a36      	ldr	r2, [pc, #216]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b34      	ldr	r3, [pc, #208]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a2f      	ldr	r2, [pc, #188]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a28      	ldr	r2, [pc, #160]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <INIT_GPIO_LEDS+0x14c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000aa0:	4822      	ldr	r0, [pc, #136]	; (8000b2c <INIT_GPIO_LEDS+0x150>)
 8000aa2:	f000 fec9 	bl	8001838 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	4821      	ldr	r0, [pc, #132]	; (8000b30 <INIT_GPIO_LEDS+0x154>)
 8000aac:	f000 fec4 	bl	8001838 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : USER_Btn_Pin */
	  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab4:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aba:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	481b      	ldr	r0, [pc, #108]	; (8000b34 <INIT_GPIO_LEDS+0x158>)
 8000ac8:	f000 fd22 	bl	8001510 <HAL_GPIO_Init>

	  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000acc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ad0:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4811      	ldr	r0, [pc, #68]	; (8000b2c <INIT_GPIO_LEDS+0x150>)
 8000ae6:	f000 fd13 	bl	8001510 <HAL_GPIO_Init>

	  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aea:	2340      	movs	r3, #64	; 0x40
 8000aec:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	480b      	ldr	r0, [pc, #44]	; (8000b30 <INIT_GPIO_LEDS+0x154>)
 8000b02:	f000 fd05 	bl	8001510 <HAL_GPIO_Init>

	  /*Configure GPIO pin : USB_OverCurrent_Pin */
	  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <INIT_GPIO_LEDS+0x154>)
 8000b1a:	f000 fcf9 	bl	8001510 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1e:	bf00      	nop
 8000b20:	3730      	adds	r7, #48	; 0x30
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40021800 	.word	0x40021800
 8000b34:	40020800 	.word	0x40020800

08000b38 <Modificar_LED_1>:
void Modificar_LED_1(bool_t valor)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB,LD1_Pin,valor);
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	461a      	mov	r2, r3
 8000b46:	2101      	movs	r1, #1
 8000b48:	4803      	ldr	r0, [pc, #12]	; (8000b58 <Modificar_LED_1+0x20>)
 8000b4a:	f000 fe75 	bl	8001838 <HAL_GPIO_WritePin>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40020400 	.word	0x40020400

08000b5c <Modificar_LED_2>:
void Modificar_LED_2(bool_t valor)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB,LD2_Pin,valor);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	2180      	movs	r1, #128	; 0x80
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <Modificar_LED_2+0x20>)
 8000b6e:	f000 fe63 	bl	8001838 <HAL_GPIO_WritePin>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40020400 	.word	0x40020400

08000b80 <Modificar_LED_3>:
void Modificar_LED_3(bool_t valor)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB,LD3_Pin,valor);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b92:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <Modificar_LED_3+0x20>)
 8000b94:	f000 fe50 	bl	8001838 <HAL_GPIO_WritePin>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <init_adxl>:
 };
 static eje_t	Eje_Y;
//I2C_HandleTypeDef hi2c1;
//Implementación funciones públicas
 bool_t init_adxl(uint16_t direccion)
 {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af02      	add	r7, sp, #8
 8000baa:	4603      	mov	r3, r0
 8000bac:	80fb      	strh	r3, [r7, #6]
	 assert(&direccion!=NULL);
	 direccion_I2C_ADXL = direccion;
 8000bae:	88fa      	ldrh	r2, [r7, #6]
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <init_adxl+0x8c>)
 8000bb2:	801a      	strh	r2, [r3, #0]
	 Modulo_I2C=enviar_handle_i2c();
 8000bb4:	f7ff ff08 	bl	80009c8 <enviar_handle_i2c>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4a1e      	ldr	r2, [pc, #120]	; (8000c34 <init_adxl+0x90>)
 8000bbc:	6013      	str	r3, [r2, #0]
	 MEF_estado_eje_INIT(&Eje_X);
 8000bbe:	481e      	ldr	r0, [pc, #120]	; (8000c38 <init_adxl+0x94>)
 8000bc0:	f000 f8f6 	bl	8000db0 <MEF_estado_eje_INIT>
	 MEF_estado_eje_INIT(&Eje_Y);
 8000bc4:	481d      	ldr	r0, [pc, #116]	; (8000c3c <init_adxl+0x98>)
 8000bc6:	f000 f8f3 	bl	8000db0 <MEF_estado_eje_INIT>
	  //Seteo del acelerómetro para que empiece a mandar datos
	 // Mandamos a 1 el bit 4 (0x08) del registro 0x2D—POWER_CTL del acelerómetro
	 // para que despierte y empiece a mandar datos
	  uint8_t vec[2]={0x2D,0x08};
 8000bca:	f640 032d 	movw	r3, #2093	; 0x82d
 8000bce:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(Modulo_I2C,direccion_I2C_ADXL,(uint8_t *)vec, sizeof(vec), TIMEOUT);
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <init_adxl+0x90>)
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <init_adxl+0x8c>)
 8000bd6:	8819      	ldrh	r1, [r3, #0]
 8000bd8:	f107 020c 	add.w	r2, r7, #12
 8000bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2302      	movs	r3, #2
 8000be4:	f000 ff86 	bl	8001af4 <HAL_I2C_Master_Transmit>
	  //Tomamos las muestras de desfase
	  desfaseX=(float)(obtenerX())*256;
 8000be8:	f000 f830 	bl	8000c4c <obtenerX>
 8000bec:	eef0 7a40 	vmov.f32	s15, s0
 8000bf0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000c40 <init_adxl+0x9c>
 8000bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bfc:	ee17 3a90 	vmov	r3, s15
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <init_adxl+0xa0>)
 8000c04:	801a      	strh	r2, [r3, #0]
	  desfaseY=(float)(obtenerY())*256;
 8000c06:	f000 f867 	bl	8000cd8 <obtenerY>
 8000c0a:	eef0 7a40 	vmov.f32	s15, s0
 8000c0e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000c40 <init_adxl+0x9c>
 8000c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c1a:	ee17 3a90 	vmov	r3, s15
 8000c1e:	b21a      	sxth	r2, r3
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <init_adxl+0xa4>)
 8000c22:	801a      	strh	r2, [r3, #0]
	  return 1;
 8000c24:	2301      	movs	r3, #1
 }
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000009c 	.word	0x2000009c
 8000c34:	20000094 	.word	0x20000094
 8000c38:	20000004 	.word	0x20000004
 8000c3c:	20000010 	.word	0x20000010
 8000c40:	43800000 	.word	0x43800000
 8000c44:	20000098 	.word	0x20000098
 8000c48:	2000009a 	.word	0x2000009a

08000c4c <obtenerX>:

 float obtenerX(void)
 {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af02      	add	r7, sp, #8
	 uint8_t a=0x32;				//Registro que se debe consultar en el acelerómetro para tener el primer byte de datos X
 8000c52:	2332      	movs	r3, #50	; 0x32
 8000c54:	71fb      	strb	r3, [r7, #7]
	 float dato_X;
	 HAL_I2C_Master_Transmit(Modulo_I2C, direccion_I2C_ADXL,(uint8_t *)&a, sizeof(a), TIMEOUT);
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <obtenerX+0x7c>)
 8000c58:	6818      	ldr	r0, [r3, #0]
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <obtenerX+0x80>)
 8000c5c:	8819      	ldrh	r1, [r3, #0]
 8000c5e:	1dfa      	adds	r2, r7, #7
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2301      	movs	r3, #1
 8000c68:	f000 ff44 	bl	8001af4 <HAL_I2C_Master_Transmit>
	 uint8_t b[2];
	 int16_t ext;
	 HAL_I2C_Master_Receive(enviar_handle_i2c(), direccion_I2C_ADXL, b, sizeof(b), TIMEOUT);
 8000c6c:	f7ff feac 	bl	80009c8 <enviar_handle_i2c>
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <obtenerX+0x80>)
 8000c72:	8819      	ldrh	r1, [r3, #0]
 8000c74:	1d3a      	adds	r2, r7, #4
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	f001 f837 	bl	8001cf0 <HAL_I2C_Master_Receive>
	 ext=(b[1]<<8|b[0])-desfaseX;
 8000c82:	797b      	ldrb	r3, [r7, #5]
 8000c84:	021b      	lsls	r3, r3, #8
 8000c86:	b21a      	sxth	r2, r3
 8000c88:	793b      	ldrb	r3, [r7, #4]
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <obtenerX+0x84>)
 8000c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	81fb      	strh	r3, [r7, #14]
	 dato_X=(float)ext/256;
 8000ca0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ca4:	ee07 3a90 	vmov	s15, r3
 8000ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cac:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000cd4 <obtenerX+0x88>
 8000cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cb4:	edc7 7a02 	vstr	s15, [r7, #8]
	 return dato_X;
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	ee07 3a90 	vmov	s15, r3
 }
 8000cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000094 	.word	0x20000094
 8000ccc:	2000009c 	.word	0x2000009c
 8000cd0:	20000098 	.word	0x20000098
 8000cd4:	43800000 	.word	0x43800000

08000cd8 <obtenerY>:
 float obtenerY(void)
 {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af02      	add	r7, sp, #8
	 uint8_t a=0x34;				//Registro que se debe consultar en el acelerómetro para tener el primer byte de datos Y
 8000cde:	2334      	movs	r3, #52	; 0x34
 8000ce0:	71fb      	strb	r3, [r7, #7]
	 float dato_Y;
	 HAL_I2C_Master_Transmit(Modulo_I2C, direccion_I2C_ADXL,(uint8_t *)&a, sizeof(a), TIMEOUT);
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <obtenerY+0x7c>)
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <obtenerY+0x80>)
 8000ce8:	8819      	ldrh	r1, [r3, #0]
 8000cea:	1dfa      	adds	r2, r7, #7
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f000 fefe 	bl	8001af4 <HAL_I2C_Master_Transmit>
	 uint8_t b[2];
	 int16_t ext;
	 HAL_I2C_Master_Receive(enviar_handle_i2c(), direccion_I2C_ADXL, b, sizeof(b), TIMEOUT);
 8000cf8:	f7ff fe66 	bl	80009c8 <enviar_handle_i2c>
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <obtenerY+0x80>)
 8000cfe:	8819      	ldrh	r1, [r3, #0]
 8000d00:	1d3a      	adds	r2, r7, #4
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f000 fff1 	bl	8001cf0 <HAL_I2C_Master_Receive>
	 ext=(b[1]<<8|b[0])-desfaseY;
 8000d0e:	797b      	ldrb	r3, [r7, #5]
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	b21a      	sxth	r2, r3
 8000d14:	793b      	ldrb	r3, [r7, #4]
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <obtenerY+0x84>)
 8000d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	81fb      	strh	r3, [r7, #14]
	 dato_Y=(float)ext/256;
 8000d2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d30:	ee07 3a90 	vmov	s15, r3
 8000d34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d38:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000d60 <obtenerY+0x88>
 8000d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d40:	edc7 7a02 	vstr	s15, [r7, #8]
	 return dato_Y;
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	ee07 3a90 	vmov	s15, r3
 }
 8000d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000094 	.word	0x20000094
 8000d58:	2000009c 	.word	0x2000009c
 8000d5c:	2000009a 	.word	0x2000009a
 8000d60:	43800000 	.word	0x43800000

08000d64 <estadoX>:

 int8_t estadoX(void)
 {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	 uint8_obtener_estado_MEF_eje(&Eje_X);
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <estadoX+0x20>)
 8000d6c:	f000 f82e 	bl	8000dcc <uint8_obtener_estado_MEF_eje>
	 int8_t valor_del_eje_X = Eje_X.estadoAcel;
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <estadoX+0x20>)
 8000d72:	7a1b      	ldrb	r3, [r3, #8]
 8000d74:	71fb      	strb	r3, [r7, #7]
	 return valor_del_eje_X;
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 }
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000004 	.word	0x20000004

08000d88 <estadoY>:
 int8_t estadoY(void)
  {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
	uint8_obtener_estado_MEF_eje(&Eje_Y);
 8000d8e:	4807      	ldr	r0, [pc, #28]	; (8000dac <estadoY+0x24>)
 8000d90:	f000 f81c 	bl	8000dcc <uint8_obtener_estado_MEF_eje>
	int8_t valor_del_eje_Y = Eje_Y.estadoAcel;
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <estadoY+0x24>)
 8000d96:	7a1b      	ldrb	r3, [r3, #8]
 8000d98:	71fb      	strb	r3, [r7, #7]
	return -valor_del_eje_Y;
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	425b      	negs	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	b25b      	sxtb	r3, r3
  }
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000010 	.word	0x20000010

08000db0 <MEF_estado_eje_INIT>:


 //Implementación funciones privadas
 static void MEF_estado_eje_INIT(eje_t * Eje_a_evaluar)
 {
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	 assert(&Eje_a_evaluar!=NULL);
	 *(Eje_a_evaluar->MEF_eje) = ESTADO_0;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
 }
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <uint8_obtener_estado_MEF_eje>:


 static void uint8_obtener_estado_MEF_eje(eje_t * Eje_a_evaluar)
 {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	 assert(&Eje_a_evaluar!=NULL);
	 switch(*(Eje_a_evaluar->MEF_eje))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f993 3000 	ldrsb.w	r3, [r3]
 8000ddc:	3302      	adds	r3, #2
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	f200 809e 	bhi.w	8000f20 <uint8_obtener_estado_MEF_eje+0x154>
 8000de4:	a201      	add	r2, pc, #4	; (adr r2, 8000dec <uint8_obtener_estado_MEF_eje+0x20>)
 8000de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dea:	bf00      	nop
 8000dec:	08000eb5 	.word	0x08000eb5
 8000df0:	08000ef9 	.word	0x08000ef9
 8000df4:	08000e6d 	.word	0x08000e6d
 8000df8:	08000e01 	.word	0x08000e01
 8000dfc:	08000e29 	.word	0x08000e29
	 {
	 case ESTADO_1:
		 // Se realiza cuando estamos en el estado 1
		 if(Eje_a_evaluar->obtener_valor_eje() < LIMIT_SUP)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	4798      	blx	r3
 8000e06:	eef0 7a40 	vmov.f32	s15, s0
 8000e0a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8000f34 <uint8_obtener_estado_MEF_eje+0x168>
 8000e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e16:	d503      	bpl.n	8000e20 <uint8_obtener_estado_MEF_eje+0x54>
			 *(Eje_a_evaluar->MEF_eje)=ESTADO_NADA_1;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	701a      	strb	r2, [r3, #0]

		 Eje_a_evaluar->estadoAcel=1;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	721a      	strb	r2, [r3, #8]
		 break;
 8000e26:	e080      	b.n	8000f2a <uint8_obtener_estado_MEF_eje+0x15e>
	 case ESTADO_NADA_1:
		 // Se realiza cuando estamos en un limbo entre saber si es 1 o 0
		 if(Eje_a_evaluar->obtener_valor_eje() > LIMIT_SUP)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	4798      	blx	r3
 8000e2e:	eef0 7a40 	vmov.f32	s15, s0
 8000e32:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000f34 <uint8_obtener_estado_MEF_eje+0x168>
 8000e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3e:	dd03      	ble.n	8000e48 <uint8_obtener_estado_MEF_eje+0x7c>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_1;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2201      	movs	r2, #1
 8000e46:	701a      	strb	r2, [r3, #0]

		 if(Eje_a_evaluar->obtener_valor_eje() < LIMIT_INF)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	4798      	blx	r3
 8000e4e:	eef0 7a40 	vmov.f32	s15, s0
 8000e52:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8000f38 <uint8_obtener_estado_MEF_eje+0x16c>
 8000e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e5e:	d400      	bmi.n	8000e62 <uint8_obtener_estado_MEF_eje+0x96>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_0;
	 		 break;
 8000e60:	e063      	b.n	8000f2a <uint8_obtener_estado_MEF_eje+0x15e>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_0;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
	 		 break;
 8000e6a:	e05e      	b.n	8000f2a <uint8_obtener_estado_MEF_eje+0x15e>
	 case ESTADO_0:
		 // Se realiza cuando estamos en el estado 0
		 if(Eje_a_evaluar->obtener_valor_eje() > LIMIT_INF)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	4798      	blx	r3
 8000e72:	eef0 7a40 	vmov.f32	s15, s0
 8000e76:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000f38 <uint8_obtener_estado_MEF_eje+0x16c>
 8000e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e82:	dd03      	ble.n	8000e8c <uint8_obtener_estado_MEF_eje+0xc0>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_NADA_1;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2202      	movs	r2, #2
 8000e8a:	701a      	strb	r2, [r3, #0]

		 if(Eje_a_evaluar->obtener_valor_eje() < (-LIMIT_INF))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	4798      	blx	r3
 8000e92:	eef0 7a40 	vmov.f32	s15, s0
 8000e96:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000f3c <uint8_obtener_estado_MEF_eje+0x170>
 8000e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea2:	d503      	bpl.n	8000eac <uint8_obtener_estado_MEF_eje+0xe0>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_NADA_M1;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	22fe      	movs	r2, #254	; 0xfe
 8000eaa:	701a      	strb	r2, [r3, #0]

		 Eje_a_evaluar->estadoAcel=0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	721a      	strb	r2, [r3, #8]
	 		 break;
 8000eb2:	e03a      	b.n	8000f2a <uint8_obtener_estado_MEF_eje+0x15e>
	 case ESTADO_NADA_M1:
		 // Se realiza cuando estamos en un limbo entre saber si es 0 o -1
		 if(Eje_a_evaluar->obtener_valor_eje() > (-LIMIT_INF))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4798      	blx	r3
 8000eba:	eef0 7a40 	vmov.f32	s15, s0
 8000ebe:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000f3c <uint8_obtener_estado_MEF_eje+0x170>
 8000ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eca:	dd03      	ble.n	8000ed4 <uint8_obtener_estado_MEF_eje+0x108>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_0;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]

		 if(Eje_a_evaluar->obtener_valor_eje() < (-LIMIT_SUP))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	4798      	blx	r3
 8000eda:	eef0 7a40 	vmov.f32	s15, s0
 8000ede:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000f40 <uint8_obtener_estado_MEF_eje+0x174>
 8000ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eea:	d400      	bmi.n	8000eee <uint8_obtener_estado_MEF_eje+0x122>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_M1;
	 		 break;
 8000eec:	e01d      	b.n	8000f2a <uint8_obtener_estado_MEF_eje+0x15e>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_M1;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	22ff      	movs	r2, #255	; 0xff
 8000ef4:	701a      	strb	r2, [r3, #0]
	 		 break;
 8000ef6:	e018      	b.n	8000f2a <uint8_obtener_estado_MEF_eje+0x15e>
	 case ESTADO_M1:
		 // Se realiza cuando estamos en el estado -1

		 if(Eje_a_evaluar->obtener_valor_eje() > (-LIMIT_SUP))
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	4798      	blx	r3
 8000efe:	eef0 7a40 	vmov.f32	s15, s0
 8000f02:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000f40 <uint8_obtener_estado_MEF_eje+0x174>
 8000f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0e:	dd03      	ble.n	8000f18 <uint8_obtener_estado_MEF_eje+0x14c>
		 { *(Eje_a_evaluar->MEF_eje)=ESTADO_NADA_M1;}
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	22fe      	movs	r2, #254	; 0xfe
 8000f16:	701a      	strb	r2, [r3, #0]

		 Eje_a_evaluar->estadoAcel=-1;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	22ff      	movs	r2, #255	; 0xff
 8000f1c:	721a      	strb	r2, [r3, #8]

	 		 break;
 8000f1e:	e004      	b.n	8000f2a <uint8_obtener_estado_MEF_eje+0x15e>
	 default:
		 MEF_estado_eje_INIT(Eje_a_evaluar);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff44 	bl	8000db0 <MEF_estado_eje_INIT>
		 break;
 8000f28:	bf00      	nop


	 }
 }
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	3f4ccccd 	.word	0x3f4ccccd
 8000f38:	3e4ccccd 	.word	0x3e4ccccd
 8000f3c:	be4ccccd 	.word	0xbe4ccccd
 8000f40:	bf4ccccd 	.word	0xbf4ccccd

08000f44 <uartInit>:
static void Error_Handler(void);						//Función para manejo de errores

//Implementación de funciones

bool_t uartInit(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
	bool_t Estado_uart = false;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	 MX_USART3_UART_Init();
 8000f4e:	f000 f853 	bl	8000ff8 <MX_USART3_UART_Init>
	 MX_USB_OTG_FS_PCD_Init();
 8000f52:	f000 f87b 	bl	800104c <MX_USB_OTG_FS_PCD_Init>
	 if (HAL_UART_Init(&huart3) == HAL_OK)
 8000f56:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <uartInit+0x5c>)
 8000f58:	f002 fe78 	bl	8003c4c <HAL_UART_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <uartInit+0x22>
	 Estado_uart = true;
 8000f62:	2301      	movs	r3, #1
 8000f64:	71fb      	strb	r3, [r7, #7]
	 // Mensaje de inicialización y parámetros de
	 uartSendString((const uint8_t *) "\n\rInicializacion de UART exitosa \n\r");
 8000f66:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <uartInit+0x60>)
 8000f68:	f000 f82c 	bl	8000fc4 <uartSendString>
	 uartSendString((const uint8_t *) "Parametros de UART \n\r ");
 8000f6c:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <uartInit+0x64>)
 8000f6e:	f000 f829 	bl	8000fc4 <uartSendString>
	 uartSendString((const uint8_t *) "- Baudios: 9600 \n\r ");
 8000f72:	480e      	ldr	r0, [pc, #56]	; (8000fac <uartInit+0x68>)
 8000f74:	f000 f826 	bl	8000fc4 <uartSendString>
	 uartSendString((const uint8_t *) "- Palabra(incluyendo pariedad): 8 \n\r ");
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <uartInit+0x6c>)
 8000f7a:	f000 f823 	bl	8000fc4 <uartSendString>
	 uartSendString((const uint8_t *) "- Stop bits: 1 \n\r ");
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <uartInit+0x70>)
 8000f80:	f000 f820 	bl	8000fc4 <uartSendString>
	 uartSendString((const uint8_t *) "- Pariedad: Impar \n\r ");
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <uartInit+0x74>)
 8000f86:	f000 f81d 	bl	8000fc4 <uartSendString>
	 uartSendString((const uint8_t *) "- Modo: Transmisor receptor \n\r ");
 8000f8a:	480c      	ldr	r0, [pc, #48]	; (8000fbc <uartInit+0x78>)
 8000f8c:	f000 f81a 	bl	8000fc4 <uartSendString>
	 uartSendString((const uint8_t *) "- Flow: Ninguno \n\r ");
 8000f90:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <uartInit+0x7c>)
 8000f92:	f000 f817 	bl	8000fc4 <uartSendString>


	 return Estado_uart;
 8000f96:	79fb      	ldrb	r3, [r7, #7]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200000a0 	.word	0x200000a0
 8000fa4:	08004a38 	.word	0x08004a38
 8000fa8:	08004a5c 	.word	0x08004a5c
 8000fac:	08004a74 	.word	0x08004a74
 8000fb0:	08004a88 	.word	0x08004a88
 8000fb4:	08004ab0 	.word	0x08004ab0
 8000fb8:	08004ac4 	.word	0x08004ac4
 8000fbc:	08004adc 	.word	0x08004adc
 8000fc0:	08004afc 	.word	0x08004afc

08000fc4 <uartSendString>:

void uartSendString(const uint8_t *  pstring)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	 const uint8_t *puntero=pstring;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	60fb      	str	r3, [r7, #12]
	 while(*puntero)
 8000fd0:	e007      	b.n	8000fe2 <uartSendString+0x1e>
	 {
		 HAL_UART_Transmit(&huart3,(const uint8_t *)puntero++,1,200);
 8000fd2:	68f9      	ldr	r1, [r7, #12]
 8000fd4:	1c4b      	adds	r3, r1, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	23c8      	movs	r3, #200	; 0xc8
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <uartSendString+0x30>)
 8000fde:	f002 fe82 	bl	8003ce6 <HAL_UART_Transmit>
	 while(*puntero)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f3      	bne.n	8000fd2 <uartSendString+0xe>
	 }
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200000a0 	.word	0x200000a0

08000ff8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <MX_USART3_UART_Init+0x50>)
 8001000:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = BAUDIOS;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 8001004:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001008:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = PALABRA;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = STOP;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = PARI;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 8001018:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800101c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = MODO;
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 8001020:	220c      	movs	r2, #12
 8001022:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = FLOW;
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = TIME;
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 8001032:	f002 fe0b 	bl	8003c4c <HAL_UART_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 800103c:	f000 f834 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200000a0 	.word	0x200000a0
 8001048:	40004800 	.word	0x40004800

0800104c <MX_USB_OTG_FS_PCD_Init>:

static void MX_USB_OTG_FS_PCD_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001052:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001056:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800105a:	2206      	movs	r2, #6
 800105c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001060:	2202      	movs	r2, #2
 8001062:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800106c:	2202      	movs	r2, #2
 800106e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001072:	2201      	movs	r2, #1
 8001074:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001084:	2201      	movs	r2, #1
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001090:	f001 fb81 	bl	8002796 <HAL_PCD_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800109a:	f000 f805 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000e4 	.word	0x200000e4

080010a8 <Error_Handler>:

static void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <Error_Handler+0x8>
	...

080010b4 <ctrl_leds_acel_INIT>:


//Implentación de funciones públicas

bool_t ctrl_leds_acel_INIT(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	assert(&Estado_actual!=NULL);
	INIT_GPIO_LEDS();
 80010b8:	f7ff fc90 	bl	80009dc <INIT_GPIO_LEDS>
	Estado_actual=BASE;
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <ctrl_leds_acel_INIT+0x14>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
	return 1;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200005f0 	.word	0x200005f0

080010cc <update_leds_acel>:

//Función para indentificar en que estado se debe encontrar la máquina
void update_leds_acel(int8_t valor_entrada_1, int8_t valor_entrada_2)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	460a      	mov	r2, r1
 80010d6:	71fb      	strb	r3, [r7, #7]
 80010d8:	4613      	mov	r3, r2
 80010da:	71bb      	strb	r3, [r7, #6]
	switch(Estado_actual)
 80010dc:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <update_leds_acel+0xf4>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d85c      	bhi.n	800119e <update_leds_acel+0xd2>
 80010e4:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <update_leds_acel+0x20>)
 80010e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ea:	bf00      	nop
 80010ec:	08001101 	.word	0x08001101
 80010f0:	08001115 	.word	0x08001115
 80010f4:	08001163 	.word	0x08001163
 80010f8:	08001177 	.word	0x08001177
 80010fc:	0800118b 	.word	0x0800118b
	{
	case ADELANTE:
		if(valor_entrada_1==PASO_BASE)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d14d      	bne.n	80011a4 <update_leds_acel+0xd8>
		{
			Estado_actual=BASE;
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <update_leds_acel+0xf4>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
			funcion_base();
 800110e:	f000 f860 	bl	80011d2 <funcion_base>
		}
		break;
 8001112:	e047      	b.n	80011a4 <update_leds_acel+0xd8>
	case BASE:
		if(valor_entrada_1==PASO_ADELANTE)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d104      	bne.n	8001126 <update_leds_acel+0x5a>
		{
			Estado_actual=ADELANTE;
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <update_leds_acel+0xf4>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
			funcion_adelante();
 8001122:	f000 f84f 	bl	80011c4 <funcion_adelante>
		}
		if(valor_entrada_1==PASO_ATRAS)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112e:	d104      	bne.n	800113a <update_leds_acel+0x6e>
		{
			Estado_actual=ATRAS;
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <update_leds_acel+0xf4>)
 8001132:	2202      	movs	r2, #2
 8001134:	701a      	strb	r2, [r3, #0]
			funcion_atras();
 8001136:	f000 f859 	bl	80011ec <funcion_atras>
		}
		if(valor_entrada_2==PASO_IZQUIERDA)
 800113a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800113e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001142:	d104      	bne.n	800114e <update_leds_acel+0x82>
		{
			Estado_actual=IZQUIERDA;
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <update_leds_acel+0xf4>)
 8001146:	2203      	movs	r2, #3
 8001148:	701a      	strb	r2, [r3, #0]
			funcion_izquierda();
 800114a:	f000 f856 	bl	80011fa <funcion_izquierda>
		}
		if(valor_entrada_2==PASO_DERECHA)
 800114e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d128      	bne.n	80011a8 <update_leds_acel+0xdc>
		{
			Estado_actual=DERECHA;
 8001156:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <update_leds_acel+0xf4>)
 8001158:	2204      	movs	r2, #4
 800115a:	701a      	strb	r2, [r3, #0]
			funcion_derecha();
 800115c:	f000 f854 	bl	8001208 <funcion_derecha>
		}
		break;
 8001160:	e022      	b.n	80011a8 <update_leds_acel+0xdc>
	case ATRAS:
		if(valor_entrada_1==PASO_BASE)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d120      	bne.n	80011ac <update_leds_acel+0xe0>
		{
			Estado_actual=BASE;
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <update_leds_acel+0xf4>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
			funcion_base();
 8001170:	f000 f82f 	bl	80011d2 <funcion_base>
		}
		break;
 8001174:	e01a      	b.n	80011ac <update_leds_acel+0xe0>
	case IZQUIERDA:
		if(valor_entrada_2==PASO_BASE)
 8001176:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d118      	bne.n	80011b0 <update_leds_acel+0xe4>
		{
			Estado_actual=BASE;
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <update_leds_acel+0xf4>)
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
			funcion_base();
 8001184:	f000 f825 	bl	80011d2 <funcion_base>
		}
		break;
 8001188:	e012      	b.n	80011b0 <update_leds_acel+0xe4>
	case DERECHA:
		if(valor_entrada_2==PASO_BASE)
 800118a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d110      	bne.n	80011b4 <update_leds_acel+0xe8>
		{
			Estado_actual=BASE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <update_leds_acel+0xf4>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
			funcion_base();
 8001198:	f000 f81b 	bl	80011d2 <funcion_base>
		}
		break;
 800119c:	e00a      	b.n	80011b4 <update_leds_acel+0xe8>

	default:
		ctrl_leds_acel_INIT();
 800119e:	f7ff ff89 	bl	80010b4 <ctrl_leds_acel_INIT>
		break;
 80011a2:	e008      	b.n	80011b6 <update_leds_acel+0xea>
		break;
 80011a4:	bf00      	nop
 80011a6:	e006      	b.n	80011b6 <update_leds_acel+0xea>
		break;
 80011a8:	bf00      	nop
 80011aa:	e004      	b.n	80011b6 <update_leds_acel+0xea>
		break;
 80011ac:	bf00      	nop
 80011ae:	e002      	b.n	80011b6 <update_leds_acel+0xea>
		break;
 80011b0:	bf00      	nop
 80011b2:	e000      	b.n	80011b6 <update_leds_acel+0xea>
		break;
 80011b4:	bf00      	nop

	}
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200005f0 	.word	0x200005f0

080011c4 <funcion_adelante>:

//Implementación de funciones privadas

static void funcion_adelante(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	Modificar_LED_2(1);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff fcc7 	bl	8000b5c <Modificar_LED_2>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <funcion_base>:
static void funcion_base(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
	Modificar_LED_1(0);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f7ff fcae 	bl	8000b38 <Modificar_LED_1>
	Modificar_LED_2(0);
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff fcbd 	bl	8000b5c <Modificar_LED_2>
	Modificar_LED_3(0);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff fccc 	bl	8000b80 <Modificar_LED_3>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <funcion_atras>:
static void funcion_atras(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	Modificar_LED_2(1); //cambiar por parpadeante
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff fcb3 	bl	8000b5c <Modificar_LED_2>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}

080011fa <funcion_izquierda>:
static void funcion_izquierda(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
	Modificar_LED_3(1);
 80011fe:	2001      	movs	r0, #1
 8001200:	f7ff fcbe 	bl	8000b80 <Modificar_LED_3>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <funcion_derecha>:
static void funcion_derecha(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	Modificar_LED_1(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff fc93 	bl	8000b38 <Modificar_LED_1>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <HAL_Init+0x40>)
 8001222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_Init+0x40>)
 800122e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_Init+0x40>)
 800123a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	2003      	movs	r0, #3
 8001242:	f000 f931 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f808 	bl	800125c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800124c:	f7ff fa00 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023c00 	.word	0x40023c00

0800125c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_InitTick+0x54>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x58>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001272:	fbb3 f3f1 	udiv	r3, r3, r1
 8001276:	fbb2 f3f3 	udiv	r3, r2, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f93b 	bl	80014f6 <HAL_SYSTICK_Config>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e00e      	b.n	80012a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d80a      	bhi.n	80012a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f000 f911 	bl	80014be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800129c:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <HAL_InitTick+0x5c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e000      	b.n	80012a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000020 	.word	0x20000020
 80012b8:	2000001c 	.word	0x2000001c

080012bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_IncTick+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x24>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_IncTick+0x24>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000020 	.word	0x20000020
 80012e0:	200005f4 	.word	0x200005f4

080012e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200005f4 	.word	0x200005f4

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff ffee 	bl	80012e4 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffde 	bl	80012e4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000020 	.word	0x20000020

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f7ff ff8e 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff47 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff5c 	bl	800138c <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff8e 	bl	80013fc <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffb0 	bl	8001464 <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	e165      	b.n	80017f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	429a      	cmp	r2, r3
 8001546:	f040 8154 	bne.w	80017f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	2b01      	cmp	r3, #1
 8001554:	d005      	beq.n	8001562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155e:	2b02      	cmp	r3, #2
 8001560:	d130      	bne.n	80015c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001598:	2201      	movs	r2, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 0201 	and.w	r2, r3, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d017      	beq.n	8001600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d123      	bne.n	8001654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	08da      	lsrs	r2, r3, #3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3208      	adds	r2, #8
 8001614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	220f      	movs	r2, #15
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	691a      	ldr	r2, [r3, #16]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	08da      	lsrs	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3208      	adds	r2, #8
 800164e:	69b9      	ldr	r1, [r7, #24]
 8001650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0203 	and.w	r2, r3, #3
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80ae 	beq.w	80017f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b5d      	ldr	r3, [pc, #372]	; (8001810 <HAL_GPIO_Init+0x300>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a5c      	ldr	r2, [pc, #368]	; (8001810 <HAL_GPIO_Init+0x300>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b5a      	ldr	r3, [pc, #360]	; (8001810 <HAL_GPIO_Init+0x300>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b2:	4a58      	ldr	r2, [pc, #352]	; (8001814 <HAL_GPIO_Init+0x304>)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	220f      	movs	r2, #15
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4f      	ldr	r2, [pc, #316]	; (8001818 <HAL_GPIO_Init+0x308>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d025      	beq.n	800172a <HAL_GPIO_Init+0x21a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4e      	ldr	r2, [pc, #312]	; (800181c <HAL_GPIO_Init+0x30c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d01f      	beq.n	8001726 <HAL_GPIO_Init+0x216>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4d      	ldr	r2, [pc, #308]	; (8001820 <HAL_GPIO_Init+0x310>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d019      	beq.n	8001722 <HAL_GPIO_Init+0x212>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4c      	ldr	r2, [pc, #304]	; (8001824 <HAL_GPIO_Init+0x314>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d013      	beq.n	800171e <HAL_GPIO_Init+0x20e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4b      	ldr	r2, [pc, #300]	; (8001828 <HAL_GPIO_Init+0x318>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d00d      	beq.n	800171a <HAL_GPIO_Init+0x20a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4a      	ldr	r2, [pc, #296]	; (800182c <HAL_GPIO_Init+0x31c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d007      	beq.n	8001716 <HAL_GPIO_Init+0x206>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a49      	ldr	r2, [pc, #292]	; (8001830 <HAL_GPIO_Init+0x320>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d101      	bne.n	8001712 <HAL_GPIO_Init+0x202>
 800170e:	2306      	movs	r3, #6
 8001710:	e00c      	b.n	800172c <HAL_GPIO_Init+0x21c>
 8001712:	2307      	movs	r3, #7
 8001714:	e00a      	b.n	800172c <HAL_GPIO_Init+0x21c>
 8001716:	2305      	movs	r3, #5
 8001718:	e008      	b.n	800172c <HAL_GPIO_Init+0x21c>
 800171a:	2304      	movs	r3, #4
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x21c>
 800171e:	2303      	movs	r3, #3
 8001720:	e004      	b.n	800172c <HAL_GPIO_Init+0x21c>
 8001722:	2302      	movs	r3, #2
 8001724:	e002      	b.n	800172c <HAL_GPIO_Init+0x21c>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_GPIO_Init+0x21c>
 800172a:	2300      	movs	r3, #0
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	f002 0203 	and.w	r2, r2, #3
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	4093      	lsls	r3, r2
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800173c:	4935      	ldr	r1, [pc, #212]	; (8001814 <HAL_GPIO_Init+0x304>)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	3302      	adds	r3, #2
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174a:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <HAL_GPIO_Init+0x324>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800176e:	4a31      	ldr	r2, [pc, #196]	; (8001834 <HAL_GPIO_Init+0x324>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001774:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <HAL_GPIO_Init+0x324>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001798:	4a26      	ldr	r2, [pc, #152]	; (8001834 <HAL_GPIO_Init+0x324>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_GPIO_Init+0x324>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c2:	4a1c      	ldr	r2, [pc, #112]	; (8001834 <HAL_GPIO_Init+0x324>)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <HAL_GPIO_Init+0x324>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ec:	4a11      	ldr	r2, [pc, #68]	; (8001834 <HAL_GPIO_Init+0x324>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3301      	adds	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	f67f ae96 	bls.w	800152c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800
 8001814:	40013800 	.word	0x40013800
 8001818:	40020000 	.word	0x40020000
 800181c:	40020400 	.word	0x40020400
 8001820:	40020800 	.word	0x40020800
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40021000 	.word	0x40021000
 800182c:	40021400 	.word	0x40021400
 8001830:	40021800 	.word	0x40021800
 8001834:	40013c00 	.word	0x40013c00

08001838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
 8001844:	4613      	mov	r3, r2
 8001846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001848:	787b      	ldrb	r3, [r7, #1]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800184e:	887a      	ldrh	r2, [r7, #2]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001854:	e003      	b.n	800185e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001856:	887b      	ldrh	r3, [r7, #2]
 8001858:	041a      	lsls	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	619a      	str	r2, [r3, #24]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e12b      	b.n	8001ad6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d106      	bne.n	8001898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7fe ff04 	bl	80006a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2224      	movs	r2, #36	; 0x24
 800189c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0201 	bic.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018d0:	f001 f99c 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 80018d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4a81      	ldr	r2, [pc, #516]	; (8001ae0 <HAL_I2C_Init+0x274>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d807      	bhi.n	80018f0 <HAL_I2C_Init+0x84>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4a80      	ldr	r2, [pc, #512]	; (8001ae4 <HAL_I2C_Init+0x278>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	bf94      	ite	ls
 80018e8:	2301      	movls	r3, #1
 80018ea:	2300      	movhi	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	e006      	b.n	80018fe <HAL_I2C_Init+0x92>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4a7d      	ldr	r2, [pc, #500]	; (8001ae8 <HAL_I2C_Init+0x27c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	bf94      	ite	ls
 80018f8:	2301      	movls	r3, #1
 80018fa:	2300      	movhi	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0e7      	b.n	8001ad6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4a78      	ldr	r2, [pc, #480]	; (8001aec <HAL_I2C_Init+0x280>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0c9b      	lsrs	r3, r3, #18
 8001910:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	430a      	orrs	r2, r1
 8001924:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4a6a      	ldr	r2, [pc, #424]	; (8001ae0 <HAL_I2C_Init+0x274>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d802      	bhi.n	8001940 <HAL_I2C_Init+0xd4>
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3301      	adds	r3, #1
 800193e:	e009      	b.n	8001954 <HAL_I2C_Init+0xe8>
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001946:	fb02 f303 	mul.w	r3, r2, r3
 800194a:	4a69      	ldr	r2, [pc, #420]	; (8001af0 <HAL_I2C_Init+0x284>)
 800194c:	fba2 2303 	umull	r2, r3, r2, r3
 8001950:	099b      	lsrs	r3, r3, #6
 8001952:	3301      	adds	r3, #1
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	430b      	orrs	r3, r1
 800195a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001966:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	495c      	ldr	r1, [pc, #368]	; (8001ae0 <HAL_I2C_Init+0x274>)
 8001970:	428b      	cmp	r3, r1
 8001972:	d819      	bhi.n	80019a8 <HAL_I2C_Init+0x13c>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	1e59      	subs	r1, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001982:	1c59      	adds	r1, r3, #1
 8001984:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001988:	400b      	ands	r3, r1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00a      	beq.n	80019a4 <HAL_I2C_Init+0x138>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1e59      	subs	r1, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fbb1 f3f3 	udiv	r3, r1, r3
 800199c:	3301      	adds	r3, #1
 800199e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a2:	e051      	b.n	8001a48 <HAL_I2C_Init+0x1dc>
 80019a4:	2304      	movs	r3, #4
 80019a6:	e04f      	b.n	8001a48 <HAL_I2C_Init+0x1dc>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d111      	bne.n	80019d4 <HAL_I2C_Init+0x168>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1e58      	subs	r0, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6859      	ldr	r1, [r3, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	440b      	add	r3, r1
 80019be:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c2:	3301      	adds	r3, #1
 80019c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	e012      	b.n	80019fa <HAL_I2C_Init+0x18e>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1e58      	subs	r0, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6859      	ldr	r1, [r3, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	0099      	lsls	r1, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ea:	3301      	adds	r3, #1
 80019ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_Init+0x196>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e022      	b.n	8001a48 <HAL_I2C_Init+0x1dc>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10e      	bne.n	8001a28 <HAL_I2C_Init+0x1bc>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1e58      	subs	r0, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6859      	ldr	r1, [r3, #4]
 8001a12:	460b      	mov	r3, r1
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	440b      	add	r3, r1
 8001a18:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a26:	e00f      	b.n	8001a48 <HAL_I2C_Init+0x1dc>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1e58      	subs	r0, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	0099      	lsls	r1, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	6809      	ldr	r1, [r1, #0]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69da      	ldr	r2, [r3, #28]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6911      	ldr	r1, [r2, #16]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68d2      	ldr	r2, [r2, #12]
 8001a82:	4311      	orrs	r1, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	000186a0 	.word	0x000186a0
 8001ae4:	001e847f 	.word	0x001e847f
 8001ae8:	003d08ff 	.word	0x003d08ff
 8001aec:	431bde83 	.word	0x431bde83
 8001af0:	10624dd3 	.word	0x10624dd3

08001af4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	461a      	mov	r2, r3
 8001b00:	460b      	mov	r3, r1
 8001b02:	817b      	strh	r3, [r7, #10]
 8001b04:	4613      	mov	r3, r2
 8001b06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff fbec 	bl	80012e4 <HAL_GetTick>
 8001b0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b20      	cmp	r3, #32
 8001b18:	f040 80e0 	bne.w	8001cdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2319      	movs	r3, #25
 8001b22:	2201      	movs	r2, #1
 8001b24:	4970      	ldr	r1, [pc, #448]	; (8001ce8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 fc58 	bl	80023dc <I2C_WaitOnFlagUntilTimeout>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b32:	2302      	movs	r3, #2
 8001b34:	e0d3      	b.n	8001cde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_I2C_Master_Transmit+0x50>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e0cc      	b.n	8001cde <HAL_I2C_Master_Transmit+0x1ea>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d007      	beq.n	8001b6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 0201 	orr.w	r2, r2, #1
 8001b68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2221      	movs	r2, #33	; 0x21
 8001b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2210      	movs	r2, #16
 8001b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	893a      	ldrh	r2, [r7, #8]
 8001b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4a50      	ldr	r2, [pc, #320]	; (8001cec <HAL_I2C_Master_Transmit+0x1f8>)
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bac:	8979      	ldrh	r1, [r7, #10]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	6a3a      	ldr	r2, [r7, #32]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 fac2 	bl	800213c <I2C_MasterRequestWrite>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e08d      	b.n	8001cde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001bd8:	e066      	b.n	8001ca8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	6a39      	ldr	r1, [r7, #32]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fcd2 	bl	8002588 <I2C_WaitOnTXEFlagUntilTimeout>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00d      	beq.n	8001c06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d107      	bne.n	8001c02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e06b      	b.n	8001cde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	781a      	ldrb	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d11b      	bne.n	8001c7c <HAL_I2C_Master_Transmit+0x188>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d017      	beq.n	8001c7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	6a39      	ldr	r1, [r7, #32]
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 fcc2 	bl	800260a <I2C_WaitOnBTFFlagUntilTimeout>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d107      	bne.n	8001ca4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ca2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e01a      	b.n	8001cde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d194      	bne.n	8001bda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e000      	b.n	8001cde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cdc:	2302      	movs	r3, #2
  }
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	00100002 	.word	0x00100002
 8001cec:	ffff0000 	.word	0xffff0000

08001cf0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	; 0x30
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	817b      	strh	r3, [r7, #10]
 8001d00:	4613      	mov	r3, r2
 8001d02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff faee 	bl	80012e4 <HAL_GetTick>
 8001d08:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	f040 820b 	bne.w	800212e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2319      	movs	r3, #25
 8001d1e:	2201      	movs	r2, #1
 8001d20:	497c      	ldr	r1, [pc, #496]	; (8001f14 <HAL_I2C_Master_Receive+0x224>)
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 fb5a 	bl	80023dc <I2C_WaitOnFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e1fe      	b.n	8002130 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_I2C_Master_Receive+0x50>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e1f7      	b.n	8002130 <HAL_I2C_Master_Receive+0x440>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d007      	beq.n	8001d66 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2222      	movs	r2, #34	; 0x22
 8001d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2210      	movs	r2, #16
 8001d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	893a      	ldrh	r2, [r7, #8]
 8001d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4a5c      	ldr	r2, [pc, #368]	; (8001f18 <HAL_I2C_Master_Receive+0x228>)
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001da8:	8979      	ldrh	r1, [r7, #10]
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 fa46 	bl	8002240 <I2C_MasterRequestRead>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e1b8      	b.n	8002130 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d113      	bne.n	8001dee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	623b      	str	r3, [r7, #32]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	623b      	str	r3, [r7, #32]
 8001dda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e18c      	b.n	8002108 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d11b      	bne.n	8001e2e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	61fb      	str	r3, [r7, #28]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e16c      	b.n	8002108 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d11b      	bne.n	8001e6e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	e14c      	b.n	8002108 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e94:	e138      	b.n	8002108 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	f200 80f1 	bhi.w	8002082 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d123      	bne.n	8001ef0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 fbed 	bl	800268c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e139      	b.n	8002130 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001eee:	e10b      	b.n	8002108 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d14e      	bne.n	8001f96 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efe:	2200      	movs	r2, #0
 8001f00:	4906      	ldr	r1, [pc, #24]	; (8001f1c <HAL_I2C_Master_Receive+0x22c>)
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 fa6a 	bl	80023dc <I2C_WaitOnFlagUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d008      	beq.n	8001f20 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e10e      	b.n	8002130 <HAL_I2C_Master_Receive+0x440>
 8001f12:	bf00      	nop
 8001f14:	00100002 	.word	0x00100002
 8001f18:	ffff0000 	.word	0xffff0000
 8001f1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f94:	e0b8      	b.n	8002108 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4966      	ldr	r1, [pc, #408]	; (8002138 <HAL_I2C_Master_Receive+0x448>)
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 fa1b 	bl	80023dc <I2C_WaitOnFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0bf      	b.n	8002130 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	494f      	ldr	r1, [pc, #316]	; (8002138 <HAL_I2C_Master_Receive+0x448>)
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f9ed 	bl	80023dc <I2C_WaitOnFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e091      	b.n	8002130 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002044:	b29b      	uxth	r3, r3
 8002046:	3b01      	subs	r3, #1
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206a:	3b01      	subs	r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002076:	b29b      	uxth	r3, r3
 8002078:	3b01      	subs	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002080:	e042      	b.n	8002108 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fb00 	bl	800268c <I2C_WaitOnRXNEFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e04c      	b.n	8002130 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020be:	b29b      	uxth	r3, r3
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d118      	bne.n	8002108 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	b29a      	uxth	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	2b00      	cmp	r3, #0
 800210e:	f47f aec2 	bne.w	8001e96 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	e000      	b.n	8002130 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800212e:	2302      	movs	r3, #2
  }
}
 8002130:	4618      	mov	r0, r3
 8002132:	3728      	adds	r7, #40	; 0x28
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	00010004 	.word	0x00010004

0800213c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af02      	add	r7, sp, #8
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	460b      	mov	r3, r1
 800214a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d006      	beq.n	8002166 <I2C_MasterRequestWrite+0x2a>
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d003      	beq.n	8002166 <I2C_MasterRequestWrite+0x2a>
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002164:	d108      	bne.n	8002178 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e00b      	b.n	8002190 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	2b12      	cmp	r3, #18
 800217e:	d107      	bne.n	8002190 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800218e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f91d 	bl	80023dc <I2C_WaitOnFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00d      	beq.n	80021c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021b6:	d103      	bne.n	80021c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e035      	b.n	8002230 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021cc:	d108      	bne.n	80021e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021ce:	897b      	ldrh	r3, [r7, #10]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021dc:	611a      	str	r2, [r3, #16]
 80021de:	e01b      	b.n	8002218 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021e0:	897b      	ldrh	r3, [r7, #10]
 80021e2:	11db      	asrs	r3, r3, #7
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f003 0306 	and.w	r3, r3, #6
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f063 030f 	orn	r3, r3, #15
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	490e      	ldr	r1, [pc, #56]	; (8002238 <I2C_MasterRequestWrite+0xfc>)
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f943 	bl	800248a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e010      	b.n	8002230 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800220e:	897b      	ldrh	r3, [r7, #10]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	4907      	ldr	r1, [pc, #28]	; (800223c <I2C_MasterRequestWrite+0x100>)
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f933 	bl	800248a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	00010008 	.word	0x00010008
 800223c:	00010002 	.word	0x00010002

08002240 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	460b      	mov	r3, r1
 800224e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002264:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2b08      	cmp	r3, #8
 800226a:	d006      	beq.n	800227a <I2C_MasterRequestRead+0x3a>
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d003      	beq.n	800227a <I2C_MasterRequestRead+0x3a>
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002278:	d108      	bne.n	800228c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e00b      	b.n	80022a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	2b11      	cmp	r3, #17
 8002292:	d107      	bne.n	80022a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f893 	bl	80023dc <I2C_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00d      	beq.n	80022d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ca:	d103      	bne.n	80022d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e079      	b.n	80023cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022e0:	d108      	bne.n	80022f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022e2:	897b      	ldrh	r3, [r7, #10]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	611a      	str	r2, [r3, #16]
 80022f2:	e05f      	b.n	80023b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022f4:	897b      	ldrh	r3, [r7, #10]
 80022f6:	11db      	asrs	r3, r3, #7
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f003 0306 	and.w	r3, r3, #6
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f063 030f 	orn	r3, r3, #15
 8002304:	b2da      	uxtb	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4930      	ldr	r1, [pc, #192]	; (80023d4 <I2C_MasterRequestRead+0x194>)
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f8b9 	bl	800248a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e054      	b.n	80023cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002322:	897b      	ldrh	r3, [r7, #10]
 8002324:	b2da      	uxtb	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4929      	ldr	r1, [pc, #164]	; (80023d8 <I2C_MasterRequestRead+0x198>)
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f8a9 	bl	800248a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e044      	b.n	80023cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002366:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f831 	bl	80023dc <I2C_WaitOnFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00d      	beq.n	800239c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800238e:	d103      	bne.n	8002398 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002396:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e017      	b.n	80023cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800239c:	897b      	ldrh	r3, [r7, #10]
 800239e:	11db      	asrs	r3, r3, #7
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f003 0306 	and.w	r3, r3, #6
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f063 030e 	orn	r3, r3, #14
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	4907      	ldr	r1, [pc, #28]	; (80023d8 <I2C_MasterRequestRead+0x198>)
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f865 	bl	800248a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	00010008 	.word	0x00010008
 80023d8:	00010002 	.word	0x00010002

080023dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023ec:	e025      	b.n	800243a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d021      	beq.n	800243a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f6:	f7fe ff75 	bl	80012e4 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d302      	bcc.n	800240c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d116      	bne.n	800243a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2220      	movs	r2, #32
 8002416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f043 0220 	orr.w	r2, r3, #32
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e023      	b.n	8002482 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d10d      	bne.n	8002460 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4013      	ands	r3, r2
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	bf0c      	ite	eq
 8002456:	2301      	moveq	r3, #1
 8002458:	2300      	movne	r3, #0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	e00c      	b.n	800247a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4013      	ands	r3, r2
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	429a      	cmp	r2, r3
 800247e:	d0b6      	beq.n	80023ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b084      	sub	sp, #16
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002498:	e051      	b.n	800253e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a8:	d123      	bne.n	80024f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2220      	movs	r2, #32
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f043 0204 	orr.w	r2, r3, #4
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e046      	b.n	8002580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d021      	beq.n	800253e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fa:	f7fe fef3 	bl	80012e4 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	429a      	cmp	r2, r3
 8002508:	d302      	bcc.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d116      	bne.n	800253e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f043 0220 	orr.w	r2, r3, #32
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e020      	b.n	8002580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	0c1b      	lsrs	r3, r3, #16
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b01      	cmp	r3, #1
 8002546:	d10c      	bne.n	8002562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	43da      	mvns	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4013      	ands	r3, r2
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	bf14      	ite	ne
 800255a:	2301      	movne	r3, #1
 800255c:	2300      	moveq	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	e00b      	b.n	800257a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	43da      	mvns	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	4013      	ands	r3, r2
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d18d      	bne.n	800249a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002594:	e02d      	b.n	80025f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f8ce 	bl	8002738 <I2C_IsAcknowledgeFailed>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e02d      	b.n	8002602 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ac:	d021      	beq.n	80025f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ae:	f7fe fe99 	bl	80012e4 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d302      	bcc.n	80025c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d116      	bne.n	80025f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f043 0220 	orr.w	r2, r3, #32
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e007      	b.n	8002602 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fc:	2b80      	cmp	r3, #128	; 0x80
 80025fe:	d1ca      	bne.n	8002596 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002616:	e02d      	b.n	8002674 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f88d 	bl	8002738 <I2C_IsAcknowledgeFailed>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e02d      	b.n	8002684 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262e:	d021      	beq.n	8002674 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002630:	f7fe fe58 	bl	80012e4 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	429a      	cmp	r2, r3
 800263e:	d302      	bcc.n	8002646 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d116      	bne.n	8002674 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e007      	b.n	8002684 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b04      	cmp	r3, #4
 8002680:	d1ca      	bne.n	8002618 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002698:	e042      	b.n	8002720 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d119      	bne.n	80026dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0210 	mvn.w	r2, #16
 80026b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e029      	b.n	8002730 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026dc:	f7fe fe02 	bl	80012e4 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d302      	bcc.n	80026f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d116      	bne.n	8002720 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e007      	b.n	8002730 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272a:	2b40      	cmp	r3, #64	; 0x40
 800272c:	d1b5      	bne.n	800269a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274e:	d11b      	bne.n	8002788 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002758:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	f043 0204 	orr.w	r2, r3, #4
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002798:	b08f      	sub	sp, #60	; 0x3c
 800279a:	af0a      	add	r7, sp, #40	; 0x28
 800279c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e116      	b.n	80029d6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fd fffc 	bl	80007c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2203      	movs	r2, #3
 80027cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f001 fe53 	bl	8004492 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	603b      	str	r3, [r7, #0]
 80027f2:	687e      	ldr	r6, [r7, #4]
 80027f4:	466d      	mov	r5, sp
 80027f6:	f106 0410 	add.w	r4, r6, #16
 80027fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002802:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002806:	e885 0003 	stmia.w	r5, {r0, r1}
 800280a:	1d33      	adds	r3, r6, #4
 800280c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800280e:	6838      	ldr	r0, [r7, #0]
 8002810:	f001 fdde 	bl	80043d0 <USB_CoreInit>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0d7      	b.n	80029d6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f001 fe41 	bl	80044b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002832:	2300      	movs	r3, #0
 8002834:	73fb      	strb	r3, [r7, #15]
 8002836:	e04a      	b.n	80028ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	333d      	adds	r3, #61	; 0x3d
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	333c      	adds	r3, #60	; 0x3c
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	b298      	uxth	r0, r3
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	3344      	adds	r3, #68	; 0x44
 8002874:	4602      	mov	r2, r0
 8002876:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	3340      	adds	r3, #64	; 0x40
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	3348      	adds	r3, #72	; 0x48
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	334c      	adds	r3, #76	; 0x4c
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3354      	adds	r3, #84	; 0x54
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	3301      	adds	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d3af      	bcc.n	8002838 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]
 80028dc:	e044      	b.n	8002968 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028f4:	7bfa      	ldrb	r2, [r7, #15]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	3301      	adds	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	429a      	cmp	r2, r3
 8002970:	d3b5      	bcc.n	80028de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	687e      	ldr	r6, [r7, #4]
 800297a:	466d      	mov	r5, sp
 800297c:	f106 0410 	add.w	r4, r6, #16
 8002980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002988:	e894 0003 	ldmia.w	r4, {r0, r1}
 800298c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002990:	1d33      	adds	r3, r6, #4
 8002992:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002994:	6838      	ldr	r0, [r7, #0]
 8002996:	f001 fdd9 	bl	800454c <USB_DevInit>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e014      	b.n	80029d6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d102      	bne.n	80029ca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f80a 	bl	80029de <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f001 ff97 	bl	8004902 <USB_DevDisconnect>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029de <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a10:	f043 0303 	orr.w	r3, r3, #3
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0cc      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b68      	ldr	r3, [pc, #416]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d90c      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b65      	ldr	r3, [pc, #404]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b63      	ldr	r3, [pc, #396]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0b8      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a7c:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a58      	ldr	r2, [pc, #352]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a94:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a52      	ldr	r2, [pc, #328]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa0:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	494d      	ldr	r1, [pc, #308]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d044      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d119      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e07f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae6:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e067      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f023 0203 	bic.w	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4934      	ldr	r1, [pc, #208]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b18:	f7fe fbe4 	bl	80012e4 <HAL_GetTick>
 8002b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b20:	f7fe fbe0 	bl	80012e4 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e04f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 020c 	and.w	r2, r3, #12
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d1eb      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d20c      	bcs.n	8002b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e032      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4916      	ldr	r1, [pc, #88]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	490e      	ldr	r1, [pc, #56]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bae:	f000 fb7f 	bl	80032b0 <HAL_RCC_GetSysClockFreq>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	490a      	ldr	r1, [pc, #40]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc0:	5ccb      	ldrb	r3, [r1, r3]
 8002bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fb44 	bl	800125c <HAL_InitTick>

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40023c00 	.word	0x40023c00
 8002be4:	40023800 	.word	0x40023800
 8002be8:	08004b10 	.word	0x08004b10
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	2000001c 	.word	0x2000001c

08002bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000000 	.word	0x20000000

08002c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c10:	f7ff fff0 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	0a9b      	lsrs	r3, r3, #10
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	4903      	ldr	r1, [pc, #12]	; (8002c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c22:	5ccb      	ldrb	r3, [r1, r3]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	08004b20 	.word	0x08004b20

08002c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c38:	f7ff ffdc 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0b5b      	lsrs	r3, r3, #13
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4903      	ldr	r1, [pc, #12]	; (8002c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	08004b20 	.word	0x08004b20

08002c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08c      	sub	sp, #48	; 0x30
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d010      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002c94:	4b6f      	ldr	r3, [pc, #444]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c9a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	496c      	ldr	r1, [pc, #432]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002cc2:	4b64      	ldr	r3, [pc, #400]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	4960      	ldr	r1, [pc, #384]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d017      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cf0:	4b58      	ldr	r3, [pc, #352]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4955      	ldr	r1, [pc, #340]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002d10:	2301      	movs	r3, #1
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d017      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d2c:	4b49      	ldr	r3, [pc, #292]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3a:	4946      	ldr	r1, [pc, #280]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 808a 	beq.w	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	4b39      	ldr	r3, [pc, #228]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4a38      	ldr	r2, [pc, #224]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d78:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7a:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d86:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a33      	ldr	r2, [pc, #204]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d92:	f7fe faa7 	bl	80012e4 <HAL_GetTick>
 8002d96:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d9a:	f7fe faa3 	bl	80012e4 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e278      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002dac:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002db8:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d02f      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d028      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dd6:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dde:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002de0:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002de6:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002dec:	4a19      	ldr	r2, [pc, #100]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002df2:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d114      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002dfe:	f7fe fa71 	bl	80012e4 <HAL_GetTick>
 8002e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fe fa6d 	bl	80012e4 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e240      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ee      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e34:	d114      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4a:	4902      	ldr	r1, [pc, #8]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	608b      	str	r3, [r1, #8]
 8002e50:	e00c      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	42470e40 	.word	0x42470e40
 8002e60:	4b4a      	ldr	r3, [pc, #296]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4a49      	ldr	r2, [pc, #292]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e6a:	6093      	str	r3, [r2, #8]
 8002e6c:	4b47      	ldr	r3, [pc, #284]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e78:	4944      	ldr	r1, [pc, #272]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d004      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002e90:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002e92:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002ea0:	4b3a      	ldr	r3, [pc, #232]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	4937      	ldr	r1, [pc, #220]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ec2:	4b32      	ldr	r3, [pc, #200]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed0:	492e      	ldr	r1, [pc, #184]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d011      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ee4:	4b29      	ldr	r3, [pc, #164]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eea:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef2:	4926      	ldr	r1, [pc, #152]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f02:	d101      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002f04:	2301      	movs	r3, #1
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	491a      	ldr	r1, [pc, #104]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d011      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f3c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f44:	4911      	ldr	r1, [pc, #68]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f54:	d101      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002f56:	2301      	movs	r3, #1
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f68:	f040 80ff 	bne.w	800316a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f72:	f7fe f9b7 	bl	80012e4 <HAL_GetTick>
 8002f76:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f78:	e00e      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f7a:	f7fe f9b3 	bl	80012e4 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d907      	bls.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e188      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	424711e0 	.word	0x424711e0
 8002f94:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f98:	4b7e      	ldr	r3, [pc, #504]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1ea      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d009      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d028      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d124      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002fcc:	4b71      	ldr	r3, [pc, #452]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	3301      	adds	r3, #1
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fde:	4b6d      	ldr	r3, [pc, #436]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fe4:	0e1b      	lsrs	r3, r3, #24
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	019b      	lsls	r3, r3, #6
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	085b      	lsrs	r3, r3, #1
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	041b      	lsls	r3, r3, #16
 8003000:	431a      	orrs	r2, r3
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	061b      	lsls	r3, r3, #24
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	071b      	lsls	r3, r3, #28
 800300e:	4961      	ldr	r1, [pc, #388]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d004      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800302a:	d00a      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003034:	2b00      	cmp	r3, #0
 8003036:	d035      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003040:	d130      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003042:	4b54      	ldr	r3, [pc, #336]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	3301      	adds	r3, #1
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003054:	4b4f      	ldr	r3, [pc, #316]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305a:	0f1b      	lsrs	r3, r3, #28
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	019b      	lsls	r3, r3, #6
 800306c:	431a      	orrs	r2, r3
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	085b      	lsrs	r3, r3, #1
 8003072:	3b01      	subs	r3, #1
 8003074:	041b      	lsls	r3, r3, #16
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	061b      	lsls	r3, r3, #24
 800307e:	431a      	orrs	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	071b      	lsls	r3, r3, #28
 8003084:	4943      	ldr	r1, [pc, #268]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800308c:	4b41      	ldr	r3, [pc, #260]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800308e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003092:	f023 021f 	bic.w	r2, r3, #31
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	493d      	ldr	r1, [pc, #244]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d029      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030b8:	d124      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80030ba:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	3301      	adds	r3, #1
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030cc:	4b31      	ldr	r3, [pc, #196]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d2:	0f1b      	lsrs	r3, r3, #28
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	019b      	lsls	r3, r3, #6
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	3b01      	subs	r3, #1
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	431a      	orrs	r2, r3
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	431a      	orrs	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	071b      	lsls	r3, r3, #28
 80030fc:	4925      	ldr	r1, [pc, #148]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310c:	2b00      	cmp	r3, #0
 800310e:	d016      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	019b      	lsls	r3, r3, #6
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	085b      	lsrs	r3, r3, #1
 8003122:	3b01      	subs	r3, #1
 8003124:	041b      	lsls	r3, r3, #16
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	071b      	lsls	r3, r3, #28
 8003136:	4917      	ldr	r1, [pc, #92]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800313e:	4b16      	ldr	r3, [pc, #88]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003140:	2201      	movs	r2, #1
 8003142:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003144:	f7fe f8ce 	bl	80012e4 <HAL_GetTick>
 8003148:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800314a:	e008      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800314c:	f7fe f8ca 	bl	80012e4 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e09f      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800315e:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	2b01      	cmp	r3, #1
 800316e:	f040 8095 	bne.w	800329c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003178:	f7fe f8b4 	bl	80012e4 <HAL_GetTick>
 800317c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800317e:	e00f      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003180:	f7fe f8b0 	bl	80012e4 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d908      	bls.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e085      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800
 8003198:	42470068 	.word	0x42470068
 800319c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031a0:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031ac:	d0e8      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d02b      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d127      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80031d6:	4b34      	ldr	r3, [pc, #208]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031dc:	0c1b      	lsrs	r3, r3, #16
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	3301      	adds	r3, #1
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699a      	ldr	r2, [r3, #24]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	019b      	lsls	r3, r3, #6
 80031f2:	431a      	orrs	r2, r3
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	3b01      	subs	r3, #1
 80031fa:	041b      	lsls	r3, r3, #16
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	061b      	lsls	r3, r3, #24
 8003204:	4928      	ldr	r1, [pc, #160]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800320c:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800320e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003212:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	3b01      	subs	r3, #1
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	4922      	ldr	r1, [pc, #136]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01d      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800323a:	d118      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	0e1b      	lsrs	r3, r3, #24
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	019b      	lsls	r3, r3, #6
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	3b01      	subs	r3, #1
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	431a      	orrs	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	061b      	lsls	r3, r3, #24
 8003266:	4910      	ldr	r1, [pc, #64]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800326e:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003274:	f7fe f836 	bl	80012e4 <HAL_GetTick>
 8003278:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800327c:	f7fe f832 	bl	80012e4 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e007      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800329a:	d1ef      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3730      	adds	r7, #48	; 0x30
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
 80032ac:	42470070 	.word	0x42470070

080032b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b4:	b0ae      	sub	sp, #184	; 0xb8
 80032b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032d6:	4bcb      	ldr	r3, [pc, #812]	; (8003604 <HAL_RCC_GetSysClockFreq+0x354>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	f200 8206 	bhi.w	80036f0 <HAL_RCC_GetSysClockFreq+0x440>
 80032e4:	a201      	add	r2, pc, #4	; (adr r2, 80032ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80032e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ea:	bf00      	nop
 80032ec:	08003321 	.word	0x08003321
 80032f0:	080036f1 	.word	0x080036f1
 80032f4:	080036f1 	.word	0x080036f1
 80032f8:	080036f1 	.word	0x080036f1
 80032fc:	08003329 	.word	0x08003329
 8003300:	080036f1 	.word	0x080036f1
 8003304:	080036f1 	.word	0x080036f1
 8003308:	080036f1 	.word	0x080036f1
 800330c:	08003331 	.word	0x08003331
 8003310:	080036f1 	.word	0x080036f1
 8003314:	080036f1 	.word	0x080036f1
 8003318:	080036f1 	.word	0x080036f1
 800331c:	08003521 	.word	0x08003521
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003320:	4bb9      	ldr	r3, [pc, #740]	; (8003608 <HAL_RCC_GetSysClockFreq+0x358>)
 8003322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003326:	e1e7      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003328:	4bb8      	ldr	r3, [pc, #736]	; (800360c <HAL_RCC_GetSysClockFreq+0x35c>)
 800332a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800332e:	e1e3      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003330:	4bb4      	ldr	r3, [pc, #720]	; (8003604 <HAL_RCC_GetSysClockFreq+0x354>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800333c:	4bb1      	ldr	r3, [pc, #708]	; (8003604 <HAL_RCC_GetSysClockFreq+0x354>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d071      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003348:	4bae      	ldr	r3, [pc, #696]	; (8003604 <HAL_RCC_GetSysClockFreq+0x354>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	099b      	lsrs	r3, r3, #6
 800334e:	2200      	movs	r2, #0
 8003350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003354:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800335c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003360:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003364:	2300      	movs	r3, #0
 8003366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800336a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800336e:	4622      	mov	r2, r4
 8003370:	462b      	mov	r3, r5
 8003372:	f04f 0000 	mov.w	r0, #0
 8003376:	f04f 0100 	mov.w	r1, #0
 800337a:	0159      	lsls	r1, r3, #5
 800337c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003380:	0150      	lsls	r0, r2, #5
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4621      	mov	r1, r4
 8003388:	1a51      	subs	r1, r2, r1
 800338a:	6439      	str	r1, [r7, #64]	; 0x40
 800338c:	4629      	mov	r1, r5
 800338e:	eb63 0301 	sbc.w	r3, r3, r1
 8003392:	647b      	str	r3, [r7, #68]	; 0x44
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80033a0:	4649      	mov	r1, r9
 80033a2:	018b      	lsls	r3, r1, #6
 80033a4:	4641      	mov	r1, r8
 80033a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033aa:	4641      	mov	r1, r8
 80033ac:	018a      	lsls	r2, r1, #6
 80033ae:	4641      	mov	r1, r8
 80033b0:	1a51      	subs	r1, r2, r1
 80033b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80033b4:	4649      	mov	r1, r9
 80033b6:	eb63 0301 	sbc.w	r3, r3, r1
 80033ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80033c8:	4649      	mov	r1, r9
 80033ca:	00cb      	lsls	r3, r1, #3
 80033cc:	4641      	mov	r1, r8
 80033ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033d2:	4641      	mov	r1, r8
 80033d4:	00ca      	lsls	r2, r1, #3
 80033d6:	4610      	mov	r0, r2
 80033d8:	4619      	mov	r1, r3
 80033da:	4603      	mov	r3, r0
 80033dc:	4622      	mov	r2, r4
 80033de:	189b      	adds	r3, r3, r2
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
 80033e2:	462b      	mov	r3, r5
 80033e4:	460a      	mov	r2, r1
 80033e6:	eb42 0303 	adc.w	r3, r2, r3
 80033ea:	637b      	str	r3, [r7, #52]	; 0x34
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033f8:	4629      	mov	r1, r5
 80033fa:	024b      	lsls	r3, r1, #9
 80033fc:	4621      	mov	r1, r4
 80033fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003402:	4621      	mov	r1, r4
 8003404:	024a      	lsls	r2, r1, #9
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800340e:	2200      	movs	r2, #0
 8003410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003414:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003418:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800341c:	f7fc fef2 	bl	8000204 <__aeabi_uldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4613      	mov	r3, r2
 8003426:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800342a:	e067      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342c:	4b75      	ldr	r3, [pc, #468]	; (8003604 <HAL_RCC_GetSysClockFreq+0x354>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	2200      	movs	r2, #0
 8003434:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003438:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800343c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003444:	67bb      	str	r3, [r7, #120]	; 0x78
 8003446:	2300      	movs	r3, #0
 8003448:	67fb      	str	r3, [r7, #124]	; 0x7c
 800344a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800344e:	4622      	mov	r2, r4
 8003450:	462b      	mov	r3, r5
 8003452:	f04f 0000 	mov.w	r0, #0
 8003456:	f04f 0100 	mov.w	r1, #0
 800345a:	0159      	lsls	r1, r3, #5
 800345c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003460:	0150      	lsls	r0, r2, #5
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4621      	mov	r1, r4
 8003468:	1a51      	subs	r1, r2, r1
 800346a:	62b9      	str	r1, [r7, #40]	; 0x28
 800346c:	4629      	mov	r1, r5
 800346e:	eb63 0301 	sbc.w	r3, r3, r1
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003480:	4649      	mov	r1, r9
 8003482:	018b      	lsls	r3, r1, #6
 8003484:	4641      	mov	r1, r8
 8003486:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800348a:	4641      	mov	r1, r8
 800348c:	018a      	lsls	r2, r1, #6
 800348e:	4641      	mov	r1, r8
 8003490:	ebb2 0a01 	subs.w	sl, r2, r1
 8003494:	4649      	mov	r1, r9
 8003496:	eb63 0b01 	sbc.w	fp, r3, r1
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034ae:	4692      	mov	sl, r2
 80034b0:	469b      	mov	fp, r3
 80034b2:	4623      	mov	r3, r4
 80034b4:	eb1a 0303 	adds.w	r3, sl, r3
 80034b8:	623b      	str	r3, [r7, #32]
 80034ba:	462b      	mov	r3, r5
 80034bc:	eb4b 0303 	adc.w	r3, fp, r3
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80034ce:	4629      	mov	r1, r5
 80034d0:	028b      	lsls	r3, r1, #10
 80034d2:	4621      	mov	r1, r4
 80034d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034d8:	4621      	mov	r1, r4
 80034da:	028a      	lsls	r2, r1, #10
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034e4:	2200      	movs	r2, #0
 80034e6:	673b      	str	r3, [r7, #112]	; 0x70
 80034e8:	677a      	str	r2, [r7, #116]	; 0x74
 80034ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80034ee:	f7fc fe89 	bl	8000204 <__aeabi_uldivmod>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4613      	mov	r3, r2
 80034f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034fc:	4b41      	ldr	r3, [pc, #260]	; (8003604 <HAL_RCC_GetSysClockFreq+0x354>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	3301      	adds	r3, #1
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800350e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003512:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003516:	fbb2 f3f3 	udiv	r3, r2, r3
 800351a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800351e:	e0eb      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003520:	4b38      	ldr	r3, [pc, #224]	; (8003604 <HAL_RCC_GetSysClockFreq+0x354>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352c:	4b35      	ldr	r3, [pc, #212]	; (8003604 <HAL_RCC_GetSysClockFreq+0x354>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d06b      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003538:	4b32      	ldr	r3, [pc, #200]	; (8003604 <HAL_RCC_GetSysClockFreq+0x354>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	099b      	lsrs	r3, r3, #6
 800353e:	2200      	movs	r2, #0
 8003540:	66bb      	str	r3, [r7, #104]	; 0x68
 8003542:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800354a:	663b      	str	r3, [r7, #96]	; 0x60
 800354c:	2300      	movs	r3, #0
 800354e:	667b      	str	r3, [r7, #100]	; 0x64
 8003550:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003554:	4622      	mov	r2, r4
 8003556:	462b      	mov	r3, r5
 8003558:	f04f 0000 	mov.w	r0, #0
 800355c:	f04f 0100 	mov.w	r1, #0
 8003560:	0159      	lsls	r1, r3, #5
 8003562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003566:	0150      	lsls	r0, r2, #5
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4621      	mov	r1, r4
 800356e:	1a51      	subs	r1, r2, r1
 8003570:	61b9      	str	r1, [r7, #24]
 8003572:	4629      	mov	r1, r5
 8003574:	eb63 0301 	sbc.w	r3, r3, r1
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003586:	4659      	mov	r1, fp
 8003588:	018b      	lsls	r3, r1, #6
 800358a:	4651      	mov	r1, sl
 800358c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003590:	4651      	mov	r1, sl
 8003592:	018a      	lsls	r2, r1, #6
 8003594:	4651      	mov	r1, sl
 8003596:	ebb2 0801 	subs.w	r8, r2, r1
 800359a:	4659      	mov	r1, fp
 800359c:	eb63 0901 	sbc.w	r9, r3, r1
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035b4:	4690      	mov	r8, r2
 80035b6:	4699      	mov	r9, r3
 80035b8:	4623      	mov	r3, r4
 80035ba:	eb18 0303 	adds.w	r3, r8, r3
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	462b      	mov	r3, r5
 80035c2:	eb49 0303 	adc.w	r3, r9, r3
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80035d4:	4629      	mov	r1, r5
 80035d6:	024b      	lsls	r3, r1, #9
 80035d8:	4621      	mov	r1, r4
 80035da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035de:	4621      	mov	r1, r4
 80035e0:	024a      	lsls	r2, r1, #9
 80035e2:	4610      	mov	r0, r2
 80035e4:	4619      	mov	r1, r3
 80035e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035ea:	2200      	movs	r2, #0
 80035ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80035ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80035f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035f4:	f7fc fe06 	bl	8000204 <__aeabi_uldivmod>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4613      	mov	r3, r2
 80035fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003602:	e065      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x420>
 8003604:	40023800 	.word	0x40023800
 8003608:	00f42400 	.word	0x00f42400
 800360c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003610:	4b3d      	ldr	r3, [pc, #244]	; (8003708 <HAL_RCC_GetSysClockFreq+0x458>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	099b      	lsrs	r3, r3, #6
 8003616:	2200      	movs	r2, #0
 8003618:	4618      	mov	r0, r3
 800361a:	4611      	mov	r1, r2
 800361c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003620:	653b      	str	r3, [r7, #80]	; 0x50
 8003622:	2300      	movs	r3, #0
 8003624:	657b      	str	r3, [r7, #84]	; 0x54
 8003626:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800362a:	4642      	mov	r2, r8
 800362c:	464b      	mov	r3, r9
 800362e:	f04f 0000 	mov.w	r0, #0
 8003632:	f04f 0100 	mov.w	r1, #0
 8003636:	0159      	lsls	r1, r3, #5
 8003638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800363c:	0150      	lsls	r0, r2, #5
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4641      	mov	r1, r8
 8003644:	1a51      	subs	r1, r2, r1
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	4649      	mov	r1, r9
 800364a:	eb63 0301 	sbc.w	r3, r3, r1
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800365c:	4659      	mov	r1, fp
 800365e:	018b      	lsls	r3, r1, #6
 8003660:	4651      	mov	r1, sl
 8003662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003666:	4651      	mov	r1, sl
 8003668:	018a      	lsls	r2, r1, #6
 800366a:	4651      	mov	r1, sl
 800366c:	1a54      	subs	r4, r2, r1
 800366e:	4659      	mov	r1, fp
 8003670:	eb63 0501 	sbc.w	r5, r3, r1
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	00eb      	lsls	r3, r5, #3
 800367e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003682:	00e2      	lsls	r2, r4, #3
 8003684:	4614      	mov	r4, r2
 8003686:	461d      	mov	r5, r3
 8003688:	4643      	mov	r3, r8
 800368a:	18e3      	adds	r3, r4, r3
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	464b      	mov	r3, r9
 8003690:	eb45 0303 	adc.w	r3, r5, r3
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036a2:	4629      	mov	r1, r5
 80036a4:	028b      	lsls	r3, r1, #10
 80036a6:	4621      	mov	r1, r4
 80036a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036ac:	4621      	mov	r1, r4
 80036ae:	028a      	lsls	r2, r1, #10
 80036b0:	4610      	mov	r0, r2
 80036b2:	4619      	mov	r1, r3
 80036b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036b8:	2200      	movs	r2, #0
 80036ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80036bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80036be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036c2:	f7fc fd9f 	bl	8000204 <__aeabi_uldivmod>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4613      	mov	r3, r2
 80036cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036d0:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <HAL_RCC_GetSysClockFreq+0x458>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	0f1b      	lsrs	r3, r3, #28
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80036de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036ee:	e003      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <HAL_RCC_GetSysClockFreq+0x45c>)
 80036f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	37b8      	adds	r7, #184	; 0xb8
 8003700:	46bd      	mov	sp, r7
 8003702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800
 800370c:	00f42400 	.word	0x00f42400

08003710 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e28d      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8083 	beq.w	8003836 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003730:	4b94      	ldr	r3, [pc, #592]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b04      	cmp	r3, #4
 800373a:	d019      	beq.n	8003770 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800373c:	4b91      	ldr	r3, [pc, #580]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003744:	2b08      	cmp	r3, #8
 8003746:	d106      	bne.n	8003756 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003748:	4b8e      	ldr	r3, [pc, #568]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003754:	d00c      	beq.n	8003770 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4b8b      	ldr	r3, [pc, #556]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800375e:	2b0c      	cmp	r3, #12
 8003760:	d112      	bne.n	8003788 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003762:	4b88      	ldr	r3, [pc, #544]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376e:	d10b      	bne.n	8003788 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	4b84      	ldr	r3, [pc, #528]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d05b      	beq.n	8003834 <HAL_RCC_OscConfig+0x124>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d157      	bne.n	8003834 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e25a      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003790:	d106      	bne.n	80037a0 <HAL_RCC_OscConfig+0x90>
 8003792:	4b7c      	ldr	r3, [pc, #496]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a7b      	ldr	r2, [pc, #492]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e01d      	b.n	80037dc <HAL_RCC_OscConfig+0xcc>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0xb4>
 80037aa:	4b76      	ldr	r3, [pc, #472]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a75      	ldr	r2, [pc, #468]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 80037b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b73      	ldr	r3, [pc, #460]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a72      	ldr	r2, [pc, #456]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0xcc>
 80037c4:	4b6f      	ldr	r3, [pc, #444]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a6e      	ldr	r2, [pc, #440]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b6c      	ldr	r3, [pc, #432]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a6b      	ldr	r2, [pc, #428]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 80037d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fd fd7e 	bl	80012e4 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fd fd7a 	bl	80012e4 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e21f      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	4b61      	ldr	r3, [pc, #388]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0xdc>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd fd6a 	bl	80012e4 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003814:	f7fd fd66 	bl	80012e4 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e20b      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	4b57      	ldr	r3, [pc, #348]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x104>
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d06f      	beq.n	8003922 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003842:	4b50      	ldr	r3, [pc, #320]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b00      	cmp	r3, #0
 800384c:	d017      	beq.n	800387e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800384e:	4b4d      	ldr	r3, [pc, #308]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003856:	2b08      	cmp	r3, #8
 8003858:	d105      	bne.n	8003866 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800385a:	4b4a      	ldr	r3, [pc, #296]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00b      	beq.n	800387e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003866:	4b47      	ldr	r3, [pc, #284]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800386e:	2b0c      	cmp	r3, #12
 8003870:	d11c      	bne.n	80038ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003872:	4b44      	ldr	r3, [pc, #272]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d116      	bne.n	80038ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387e:	4b41      	ldr	r3, [pc, #260]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d005      	beq.n	8003896 <HAL_RCC_OscConfig+0x186>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d001      	beq.n	8003896 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e1d3      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003896:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4937      	ldr	r1, [pc, #220]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038aa:	e03a      	b.n	8003922 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d020      	beq.n	80038f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b4:	4b34      	ldr	r3, [pc, #208]	; (8003988 <HAL_RCC_OscConfig+0x278>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ba:	f7fd fd13 	bl	80012e4 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c2:	f7fd fd0f 	bl	80012e4 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e1b4      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d4:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e0:	4b28      	ldr	r3, [pc, #160]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4925      	ldr	r1, [pc, #148]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	600b      	str	r3, [r1, #0]
 80038f4:	e015      	b.n	8003922 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f6:	4b24      	ldr	r3, [pc, #144]	; (8003988 <HAL_RCC_OscConfig+0x278>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd fcf2 	bl	80012e4 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003904:	f7fd fcee 	bl	80012e4 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e193      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003916:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d036      	beq.n	800399c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d016      	beq.n	8003964 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <HAL_RCC_OscConfig+0x27c>)
 8003938:	2201      	movs	r2, #1
 800393a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393c:	f7fd fcd2 	bl	80012e4 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003944:	f7fd fcce 	bl	80012e4 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e173      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x234>
 8003962:	e01b      	b.n	800399c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_OscConfig+0x27c>)
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396a:	f7fd fcbb 	bl	80012e4 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003970:	e00e      	b.n	8003990 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003972:	f7fd fcb7 	bl	80012e4 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d907      	bls.n	8003990 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e15c      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
 8003984:	40023800 	.word	0x40023800
 8003988:	42470000 	.word	0x42470000
 800398c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003990:	4b8a      	ldr	r3, [pc, #552]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1ea      	bne.n	8003972 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8097 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039aa:	2300      	movs	r3, #0
 80039ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ae:	4b83      	ldr	r3, [pc, #524]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10f      	bne.n	80039da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	4b7f      	ldr	r3, [pc, #508]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	4a7e      	ldr	r2, [pc, #504]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 80039c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ca:	4b7c      	ldr	r3, [pc, #496]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d6:	2301      	movs	r3, #1
 80039d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039da:	4b79      	ldr	r3, [pc, #484]	; (8003bc0 <HAL_RCC_OscConfig+0x4b0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d118      	bne.n	8003a18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e6:	4b76      	ldr	r3, [pc, #472]	; (8003bc0 <HAL_RCC_OscConfig+0x4b0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a75      	ldr	r2, [pc, #468]	; (8003bc0 <HAL_RCC_OscConfig+0x4b0>)
 80039ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f2:	f7fd fc77 	bl	80012e4 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fa:	f7fd fc73 	bl	80012e4 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e118      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0c:	4b6c      	ldr	r3, [pc, #432]	; (8003bc0 <HAL_RCC_OscConfig+0x4b0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCC_OscConfig+0x31e>
 8003a20:	4b66      	ldr	r3, [pc, #408]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	4a65      	ldr	r2, [pc, #404]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2c:	e01c      	b.n	8003a68 <HAL_RCC_OscConfig+0x358>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b05      	cmp	r3, #5
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x340>
 8003a36:	4b61      	ldr	r3, [pc, #388]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a60      	ldr	r2, [pc, #384]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003a3c:	f043 0304 	orr.w	r3, r3, #4
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
 8003a42:	4b5e      	ldr	r3, [pc, #376]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	4a5d      	ldr	r2, [pc, #372]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCC_OscConfig+0x358>
 8003a50:	4b5a      	ldr	r3, [pc, #360]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	4a59      	ldr	r2, [pc, #356]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5c:	4b57      	ldr	r3, [pc, #348]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	4a56      	ldr	r2, [pc, #344]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003a62:	f023 0304 	bic.w	r3, r3, #4
 8003a66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d015      	beq.n	8003a9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a70:	f7fd fc38 	bl	80012e4 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a78:	f7fd fc34 	bl	80012e4 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e0d7      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8e:	4b4b      	ldr	r3, [pc, #300]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0ee      	beq.n	8003a78 <HAL_RCC_OscConfig+0x368>
 8003a9a:	e014      	b.n	8003ac6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9c:	f7fd fc22 	bl	80012e4 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa4:	f7fd fc1e 	bl	80012e4 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e0c1      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aba:	4b40      	ldr	r3, [pc, #256]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1ee      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003acc:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	4a3a      	ldr	r2, [pc, #232]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80ad 	beq.w	8003c3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ae2:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d060      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d145      	bne.n	8003b82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af6:	4b33      	ldr	r3, [pc, #204]	; (8003bc4 <HAL_RCC_OscConfig+0x4b4>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fd fbf2 	bl	80012e4 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b04:	f7fd fbee 	bl	80012e4 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e093      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b16:	4b29      	ldr	r3, [pc, #164]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	019b      	lsls	r3, r3, #6
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	041b      	lsls	r3, r3, #16
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	061b      	lsls	r3, r3, #24
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	071b      	lsls	r3, r3, #28
 8003b4e:	491b      	ldr	r1, [pc, #108]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b54:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <HAL_RCC_OscConfig+0x4b4>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7fd fbc3 	bl	80012e4 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fd fbbf 	bl	80012e4 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e064      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b74:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x452>
 8003b80:	e05c      	b.n	8003c3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <HAL_RCC_OscConfig+0x4b4>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fd fbac 	bl	80012e4 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fd fba8 	bl	80012e4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e04d      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <HAL_RCC_OscConfig+0x4ac>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x480>
 8003bae:	e045      	b.n	8003c3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d107      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e040      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40007000 	.word	0x40007000
 8003bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bc8:	4b1f      	ldr	r3, [pc, #124]	; (8003c48 <HAL_RCC_OscConfig+0x538>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d030      	beq.n	8003c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d129      	bne.n	8003c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d122      	bne.n	8003c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d119      	bne.n	8003c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	3b01      	subs	r3, #1
 8003c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d10f      	bne.n	8003c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d107      	bne.n	8003c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800

08003c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e03f      	b.n	8003cde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fc fd5c 	bl	8000730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2224      	movs	r2, #36	; 0x24
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f929 	bl	8003ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695a      	ldr	r2, [r3, #20]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b08a      	sub	sp, #40	; 0x28
 8003cea:	af02      	add	r7, sp, #8
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	603b      	str	r3, [r7, #0]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d17c      	bne.n	8003e00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <HAL_UART_Transmit+0x2c>
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e075      	b.n	8003e02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_UART_Transmit+0x3e>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e06e      	b.n	8003e02 <HAL_UART_Transmit+0x11c>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2221      	movs	r2, #33	; 0x21
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d3a:	f7fd fad3 	bl	80012e4 <HAL_GetTick>
 8003d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	88fa      	ldrh	r2, [r7, #6]
 8003d44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d54:	d108      	bne.n	8003d68 <HAL_UART_Transmit+0x82>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d104      	bne.n	8003d68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	e003      	b.n	8003d70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d78:	e02a      	b.n	8003dd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2200      	movs	r2, #0
 8003d82:	2180      	movs	r1, #128	; 0x80
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f840 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e036      	b.n	8003e02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10b      	bne.n	8003db2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	3302      	adds	r3, #2
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	e007      	b.n	8003dc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	781a      	ldrb	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1cf      	bne.n	8003d7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	2140      	movs	r1, #64	; 0x40
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f810 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e006      	b.n	8003e02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e000      	b.n	8003e02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e00:	2302      	movs	r3, #2
  }
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b090      	sub	sp, #64	; 0x40
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	603b      	str	r3, [r7, #0]
 8003e16:	4613      	mov	r3, r2
 8003e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1a:	e050      	b.n	8003ebe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d04c      	beq.n	8003ebe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e2a:	f7fd fa5b 	bl	80012e4 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d241      	bcs.n	8003ebe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	330c      	adds	r3, #12
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e5a:	637a      	str	r2, [r7, #52]	; 0x34
 8003e5c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e5      	bne.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3314      	adds	r3, #20
 8003e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e8e:	623a      	str	r2, [r7, #32]
 8003e90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	69f9      	ldr	r1, [r7, #28]
 8003e94:	6a3a      	ldr	r2, [r7, #32]
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e5      	bne.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e00f      	b.n	8003ede <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	bf0c      	ite	eq
 8003ece:	2301      	moveq	r3, #1
 8003ed0:	2300      	movne	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d09f      	beq.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3740      	adds	r7, #64	; 0x40
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eec:	b0c0      	sub	sp, #256	; 0x100
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	68d9      	ldr	r1, [r3, #12]
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	ea40 0301 	orr.w	r3, r0, r1
 8003f10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f40:	f021 010c 	bic.w	r1, r1, #12
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f62:	6999      	ldr	r1, [r3, #24]
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	ea40 0301 	orr.w	r3, r0, r1
 8003f6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4b8f      	ldr	r3, [pc, #572]	; (80041b4 <UART_SetConfig+0x2cc>)
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d005      	beq.n	8003f88 <UART_SetConfig+0xa0>
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b8d      	ldr	r3, [pc, #564]	; (80041b8 <UART_SetConfig+0x2d0>)
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d104      	bne.n	8003f92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f88:	f7fe fe54 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 8003f8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f90:	e003      	b.n	8003f9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f92:	f7fe fe3b 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 8003f96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa4:	f040 810c 	bne.w	80041c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fac:	2200      	movs	r2, #0
 8003fae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fba:	4622      	mov	r2, r4
 8003fbc:	462b      	mov	r3, r5
 8003fbe:	1891      	adds	r1, r2, r2
 8003fc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fc2:	415b      	adcs	r3, r3
 8003fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fca:	4621      	mov	r1, r4
 8003fcc:	eb12 0801 	adds.w	r8, r2, r1
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	eb43 0901 	adc.w	r9, r3, r1
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fea:	4690      	mov	r8, r2
 8003fec:	4699      	mov	r9, r3
 8003fee:	4623      	mov	r3, r4
 8003ff0:	eb18 0303 	adds.w	r3, r8, r3
 8003ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ff8:	462b      	mov	r3, r5
 8003ffa:	eb49 0303 	adc.w	r3, r9, r3
 8003ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800400e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004012:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004016:	460b      	mov	r3, r1
 8004018:	18db      	adds	r3, r3, r3
 800401a:	653b      	str	r3, [r7, #80]	; 0x50
 800401c:	4613      	mov	r3, r2
 800401e:	eb42 0303 	adc.w	r3, r2, r3
 8004022:	657b      	str	r3, [r7, #84]	; 0x54
 8004024:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004028:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800402c:	f7fc f8ea 	bl	8000204 <__aeabi_uldivmod>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4b61      	ldr	r3, [pc, #388]	; (80041bc <UART_SetConfig+0x2d4>)
 8004036:	fba3 2302 	umull	r2, r3, r3, r2
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	011c      	lsls	r4, r3, #4
 800403e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004042:	2200      	movs	r2, #0
 8004044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004048:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800404c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004050:	4642      	mov	r2, r8
 8004052:	464b      	mov	r3, r9
 8004054:	1891      	adds	r1, r2, r2
 8004056:	64b9      	str	r1, [r7, #72]	; 0x48
 8004058:	415b      	adcs	r3, r3
 800405a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800405c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004060:	4641      	mov	r1, r8
 8004062:	eb12 0a01 	adds.w	sl, r2, r1
 8004066:	4649      	mov	r1, r9
 8004068:	eb43 0b01 	adc.w	fp, r3, r1
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004078:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800407c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004080:	4692      	mov	sl, r2
 8004082:	469b      	mov	fp, r3
 8004084:	4643      	mov	r3, r8
 8004086:	eb1a 0303 	adds.w	r3, sl, r3
 800408a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800408e:	464b      	mov	r3, r9
 8004090:	eb4b 0303 	adc.w	r3, fp, r3
 8004094:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040ac:	460b      	mov	r3, r1
 80040ae:	18db      	adds	r3, r3, r3
 80040b0:	643b      	str	r3, [r7, #64]	; 0x40
 80040b2:	4613      	mov	r3, r2
 80040b4:	eb42 0303 	adc.w	r3, r2, r3
 80040b8:	647b      	str	r3, [r7, #68]	; 0x44
 80040ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040c2:	f7fc f89f 	bl	8000204 <__aeabi_uldivmod>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4611      	mov	r1, r2
 80040cc:	4b3b      	ldr	r3, [pc, #236]	; (80041bc <UART_SetConfig+0x2d4>)
 80040ce:	fba3 2301 	umull	r2, r3, r3, r1
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	2264      	movs	r2, #100	; 0x64
 80040d6:	fb02 f303 	mul.w	r3, r2, r3
 80040da:	1acb      	subs	r3, r1, r3
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040e2:	4b36      	ldr	r3, [pc, #216]	; (80041bc <UART_SetConfig+0x2d4>)
 80040e4:	fba3 2302 	umull	r2, r3, r3, r2
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040f0:	441c      	add	r4, r3
 80040f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040f6:	2200      	movs	r2, #0
 80040f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004100:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004104:	4642      	mov	r2, r8
 8004106:	464b      	mov	r3, r9
 8004108:	1891      	adds	r1, r2, r2
 800410a:	63b9      	str	r1, [r7, #56]	; 0x38
 800410c:	415b      	adcs	r3, r3
 800410e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004110:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004114:	4641      	mov	r1, r8
 8004116:	1851      	adds	r1, r2, r1
 8004118:	6339      	str	r1, [r7, #48]	; 0x30
 800411a:	4649      	mov	r1, r9
 800411c:	414b      	adcs	r3, r1
 800411e:	637b      	str	r3, [r7, #52]	; 0x34
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800412c:	4659      	mov	r1, fp
 800412e:	00cb      	lsls	r3, r1, #3
 8004130:	4651      	mov	r1, sl
 8004132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004136:	4651      	mov	r1, sl
 8004138:	00ca      	lsls	r2, r1, #3
 800413a:	4610      	mov	r0, r2
 800413c:	4619      	mov	r1, r3
 800413e:	4603      	mov	r3, r0
 8004140:	4642      	mov	r2, r8
 8004142:	189b      	adds	r3, r3, r2
 8004144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004148:	464b      	mov	r3, r9
 800414a:	460a      	mov	r2, r1
 800414c:	eb42 0303 	adc.w	r3, r2, r3
 8004150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004160:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004164:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004168:	460b      	mov	r3, r1
 800416a:	18db      	adds	r3, r3, r3
 800416c:	62bb      	str	r3, [r7, #40]	; 0x28
 800416e:	4613      	mov	r3, r2
 8004170:	eb42 0303 	adc.w	r3, r2, r3
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800417a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800417e:	f7fc f841 	bl	8000204 <__aeabi_uldivmod>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <UART_SetConfig+0x2d4>)
 8004188:	fba3 1302 	umull	r1, r3, r3, r2
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	2164      	movs	r1, #100	; 0x64
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	3332      	adds	r3, #50	; 0x32
 800419a:	4a08      	ldr	r2, [pc, #32]	; (80041bc <UART_SetConfig+0x2d4>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	f003 0207 	and.w	r2, r3, #7
 80041a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4422      	add	r2, r4
 80041ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041b0:	e105      	b.n	80043be <UART_SetConfig+0x4d6>
 80041b2:	bf00      	nop
 80041b4:	40011000 	.word	0x40011000
 80041b8:	40011400 	.word	0x40011400
 80041bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041d2:	4642      	mov	r2, r8
 80041d4:	464b      	mov	r3, r9
 80041d6:	1891      	adds	r1, r2, r2
 80041d8:	6239      	str	r1, [r7, #32]
 80041da:	415b      	adcs	r3, r3
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
 80041de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041e2:	4641      	mov	r1, r8
 80041e4:	1854      	adds	r4, r2, r1
 80041e6:	4649      	mov	r1, r9
 80041e8:	eb43 0501 	adc.w	r5, r3, r1
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	00eb      	lsls	r3, r5, #3
 80041f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041fa:	00e2      	lsls	r2, r4, #3
 80041fc:	4614      	mov	r4, r2
 80041fe:	461d      	mov	r5, r3
 8004200:	4643      	mov	r3, r8
 8004202:	18e3      	adds	r3, r4, r3
 8004204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004208:	464b      	mov	r3, r9
 800420a:	eb45 0303 	adc.w	r3, r5, r3
 800420e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800421e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800422e:	4629      	mov	r1, r5
 8004230:	008b      	lsls	r3, r1, #2
 8004232:	4621      	mov	r1, r4
 8004234:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004238:	4621      	mov	r1, r4
 800423a:	008a      	lsls	r2, r1, #2
 800423c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004240:	f7fb ffe0 	bl	8000204 <__aeabi_uldivmod>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4b60      	ldr	r3, [pc, #384]	; (80043cc <UART_SetConfig+0x4e4>)
 800424a:	fba3 2302 	umull	r2, r3, r3, r2
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	011c      	lsls	r4, r3, #4
 8004252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004256:	2200      	movs	r2, #0
 8004258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800425c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004260:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004264:	4642      	mov	r2, r8
 8004266:	464b      	mov	r3, r9
 8004268:	1891      	adds	r1, r2, r2
 800426a:	61b9      	str	r1, [r7, #24]
 800426c:	415b      	adcs	r3, r3
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004274:	4641      	mov	r1, r8
 8004276:	1851      	adds	r1, r2, r1
 8004278:	6139      	str	r1, [r7, #16]
 800427a:	4649      	mov	r1, r9
 800427c:	414b      	adcs	r3, r1
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800428c:	4659      	mov	r1, fp
 800428e:	00cb      	lsls	r3, r1, #3
 8004290:	4651      	mov	r1, sl
 8004292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004296:	4651      	mov	r1, sl
 8004298:	00ca      	lsls	r2, r1, #3
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	4642      	mov	r2, r8
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042a8:	464b      	mov	r3, r9
 80042aa:	460a      	mov	r2, r1
 80042ac:	eb42 0303 	adc.w	r3, r2, r3
 80042b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80042be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042cc:	4649      	mov	r1, r9
 80042ce:	008b      	lsls	r3, r1, #2
 80042d0:	4641      	mov	r1, r8
 80042d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d6:	4641      	mov	r1, r8
 80042d8:	008a      	lsls	r2, r1, #2
 80042da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042de:	f7fb ff91 	bl	8000204 <__aeabi_uldivmod>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4b39      	ldr	r3, [pc, #228]	; (80043cc <UART_SetConfig+0x4e4>)
 80042e8:	fba3 1302 	umull	r1, r3, r3, r2
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	2164      	movs	r1, #100	; 0x64
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	3332      	adds	r3, #50	; 0x32
 80042fa:	4a34      	ldr	r2, [pc, #208]	; (80043cc <UART_SetConfig+0x4e4>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004306:	441c      	add	r4, r3
 8004308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800430c:	2200      	movs	r2, #0
 800430e:	673b      	str	r3, [r7, #112]	; 0x70
 8004310:	677a      	str	r2, [r7, #116]	; 0x74
 8004312:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004316:	4642      	mov	r2, r8
 8004318:	464b      	mov	r3, r9
 800431a:	1891      	adds	r1, r2, r2
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	415b      	adcs	r3, r3
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004326:	4641      	mov	r1, r8
 8004328:	1851      	adds	r1, r2, r1
 800432a:	6039      	str	r1, [r7, #0]
 800432c:	4649      	mov	r1, r9
 800432e:	414b      	adcs	r3, r1
 8004330:	607b      	str	r3, [r7, #4]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800433e:	4659      	mov	r1, fp
 8004340:	00cb      	lsls	r3, r1, #3
 8004342:	4651      	mov	r1, sl
 8004344:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004348:	4651      	mov	r1, sl
 800434a:	00ca      	lsls	r2, r1, #3
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	4603      	mov	r3, r0
 8004352:	4642      	mov	r2, r8
 8004354:	189b      	adds	r3, r3, r2
 8004356:	66bb      	str	r3, [r7, #104]	; 0x68
 8004358:	464b      	mov	r3, r9
 800435a:	460a      	mov	r2, r1
 800435c:	eb42 0303 	adc.w	r3, r2, r3
 8004360:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	663b      	str	r3, [r7, #96]	; 0x60
 800436c:	667a      	str	r2, [r7, #100]	; 0x64
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800437a:	4649      	mov	r1, r9
 800437c:	008b      	lsls	r3, r1, #2
 800437e:	4641      	mov	r1, r8
 8004380:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004384:	4641      	mov	r1, r8
 8004386:	008a      	lsls	r2, r1, #2
 8004388:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800438c:	f7fb ff3a 	bl	8000204 <__aeabi_uldivmod>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <UART_SetConfig+0x4e4>)
 8004396:	fba3 1302 	umull	r1, r3, r3, r2
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2164      	movs	r1, #100	; 0x64
 800439e:	fb01 f303 	mul.w	r3, r1, r3
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	3332      	adds	r3, #50	; 0x32
 80043a8:	4a08      	ldr	r2, [pc, #32]	; (80043cc <UART_SetConfig+0x4e4>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	f003 020f 	and.w	r2, r3, #15
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4422      	add	r2, r4
 80043bc:	609a      	str	r2, [r3, #8]
}
 80043be:	bf00      	nop
 80043c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043c4:	46bd      	mov	sp, r7
 80043c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ca:	bf00      	nop
 80043cc:	51eb851f 	.word	0x51eb851f

080043d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043d0:	b084      	sub	sp, #16
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	f107 001c 	add.w	r0, r7, #28
 80043de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d122      	bne.n	800442e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80043fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004412:	2b01      	cmp	r3, #1
 8004414:	d105      	bne.n	8004422 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fa9c 	bl	8004960 <USB_CoreReset>
 8004428:	4603      	mov	r3, r0
 800442a:	73fb      	strb	r3, [r7, #15]
 800442c:	e01a      	b.n	8004464 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fa90 	bl	8004960 <USB_CoreReset>
 8004440:	4603      	mov	r3, r0
 8004442:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
 8004456:	e005      	b.n	8004464 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004466:	2b01      	cmp	r3, #1
 8004468:	d10b      	bne.n	8004482 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f043 0206 	orr.w	r2, r3, #6
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f043 0220 	orr.w	r2, r3, #32
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004482:	7bfb      	ldrb	r3, [r7, #15]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800448e:	b004      	add	sp, #16
 8004490:	4770      	bx	lr

08004492 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f023 0201 	bic.w	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d115      	bne.n	8004502 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044e2:	2001      	movs	r0, #1
 80044e4:	f7fc ff0a 	bl	80012fc <HAL_Delay>
      ms++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3301      	adds	r3, #1
 80044ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fa28 	bl	8004944 <USB_GetMode>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d01e      	beq.n	8004538 <USB_SetCurrentMode+0x84>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b31      	cmp	r3, #49	; 0x31
 80044fe:	d9f0      	bls.n	80044e2 <USB_SetCurrentMode+0x2e>
 8004500:	e01a      	b.n	8004538 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d115      	bne.n	8004534 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004514:	2001      	movs	r0, #1
 8004516:	f7fc fef1 	bl	80012fc <HAL_Delay>
      ms++;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3301      	adds	r3, #1
 800451e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fa0f 	bl	8004944 <USB_GetMode>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <USB_SetCurrentMode+0x84>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b31      	cmp	r3, #49	; 0x31
 8004530:	d9f0      	bls.n	8004514 <USB_SetCurrentMode+0x60>
 8004532:	e001      	b.n	8004538 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e005      	b.n	8004544 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b32      	cmp	r3, #50	; 0x32
 800453c:	d101      	bne.n	8004542 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800454c:	b084      	sub	sp, #16
 800454e:	b580      	push	{r7, lr}
 8004550:	b086      	sub	sp, #24
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800455a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	e009      	b.n	8004580 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	3340      	adds	r3, #64	; 0x40
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	2200      	movs	r2, #0
 8004578:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	3301      	adds	r3, #1
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b0e      	cmp	r3, #14
 8004584:	d9f2      	bls.n	800456c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004588:	2b00      	cmp	r3, #0
 800458a:	d11c      	bne.n	80045c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800459a:	f043 0302 	orr.w	r3, r3, #2
 800459e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	e005      	b.n	80045d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045d8:	461a      	mov	r2, r3
 80045da:	2300      	movs	r3, #0
 80045dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e4:	4619      	mov	r1, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ec:	461a      	mov	r2, r3
 80045ee:	680b      	ldr	r3, [r1, #0]
 80045f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d10c      	bne.n	8004612 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d104      	bne.n	8004608 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045fe:	2100      	movs	r1, #0
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f965 	bl	80048d0 <USB_SetDevSpeed>
 8004606:	e008      	b.n	800461a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004608:	2101      	movs	r1, #1
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f960 	bl	80048d0 <USB_SetDevSpeed>
 8004610:	e003      	b.n	800461a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004612:	2103      	movs	r1, #3
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f95b 	bl	80048d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800461a:	2110      	movs	r1, #16
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f8f3 	bl	8004808 <USB_FlushTxFifo>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f91f 	bl	8004870 <USB_FlushRxFifo>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004642:	461a      	mov	r2, r3
 8004644:	2300      	movs	r3, #0
 8004646:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464e:	461a      	mov	r2, r3
 8004650:	2300      	movs	r3, #0
 8004652:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465a:	461a      	mov	r2, r3
 800465c:	2300      	movs	r3, #0
 800465e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004660:	2300      	movs	r3, #0
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	e043      	b.n	80046ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800467c:	d118      	bne.n	80046b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004690:	461a      	mov	r2, r3
 8004692:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	e013      	b.n	80046c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a6:	461a      	mov	r2, r3
 80046a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	e008      	b.n	80046c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046bc:	461a      	mov	r2, r3
 80046be:	2300      	movs	r3, #0
 80046c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ce:	461a      	mov	r2, r3
 80046d0:	2300      	movs	r3, #0
 80046d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e0:	461a      	mov	r2, r3
 80046e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	3301      	adds	r3, #1
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d3b7      	bcc.n	8004666 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046f6:	2300      	movs	r3, #0
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	e043      	b.n	8004784 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800470e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004712:	d118      	bne.n	8004746 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10a      	bne.n	8004730 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004726:	461a      	mov	r2, r3
 8004728:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	e013      	b.n	8004758 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473c:	461a      	mov	r2, r3
 800473e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e008      	b.n	8004758 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004752:	461a      	mov	r2, r3
 8004754:	2300      	movs	r3, #0
 8004756:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004764:	461a      	mov	r2, r3
 8004766:	2300      	movs	r3, #0
 8004768:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004776:	461a      	mov	r2, r3
 8004778:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800477c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	3301      	adds	r3, #1
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	429a      	cmp	r2, r3
 800478a:	d3b7      	bcc.n	80046fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800479a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800479e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d105      	bne.n	80047c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f043 0210 	orr.w	r2, r3, #16
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699a      	ldr	r2, [r3, #24]
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <USB_DevInit+0x2b8>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f043 0208 	orr.w	r2, r3, #8
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d107      	bne.n	80047f4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047ec:	f043 0304 	orr.w	r3, r3, #4
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80047f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004800:	b004      	add	sp, #16
 8004802:	4770      	bx	lr
 8004804:	803c3800 	.word	0x803c3800

08004808 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3301      	adds	r3, #1
 800481a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a13      	ldr	r2, [pc, #76]	; (800486c <USB_FlushTxFifo+0x64>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e01b      	b.n	8004860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	daf2      	bge.n	8004816 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	019b      	lsls	r3, r3, #6
 8004838:	f043 0220 	orr.w	r2, r3, #32
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3301      	adds	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4a08      	ldr	r2, [pc, #32]	; (800486c <USB_FlushTxFifo+0x64>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d901      	bls.n	8004852 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e006      	b.n	8004860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b20      	cmp	r3, #32
 800485c:	d0f0      	beq.n	8004840 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	00030d40 	.word	0x00030d40

08004870 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3301      	adds	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4a11      	ldr	r2, [pc, #68]	; (80048cc <USB_FlushRxFifo+0x5c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e018      	b.n	80048c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	daf2      	bge.n	800487c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2210      	movs	r2, #16
 800489e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4a08      	ldr	r2, [pc, #32]	; (80048cc <USB_FlushRxFifo+0x5c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e006      	b.n	80048c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	2b10      	cmp	r3, #16
 80048bc:	d0f0      	beq.n	80048a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	00030d40 	.word	0x00030d40

080048d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	460b      	mov	r3, r1
 80048da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	68f9      	ldr	r1, [r7, #12]
 80048ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048f0:	4313      	orrs	r3, r2
 80048f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800491c:	f023 0303 	bic.w	r3, r3, #3
 8004920:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004930:	f043 0302 	orr.w	r3, r3, #2
 8004934:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f003 0301 	and.w	r3, r3, #1
}
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4a13      	ldr	r2, [pc, #76]	; (80049c4 <USB_CoreReset+0x64>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e01b      	b.n	80049b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	daf2      	bge.n	800496c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f043 0201 	orr.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3301      	adds	r3, #1
 800499a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a09      	ldr	r2, [pc, #36]	; (80049c4 <USB_CoreReset+0x64>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d901      	bls.n	80049a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e006      	b.n	80049b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d0f0      	beq.n	8004996 <USB_CoreReset+0x36>

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	00030d40 	.word	0x00030d40

080049c8 <__libc_init_array>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	4d0d      	ldr	r5, [pc, #52]	; (8004a00 <__libc_init_array+0x38>)
 80049cc:	4c0d      	ldr	r4, [pc, #52]	; (8004a04 <__libc_init_array+0x3c>)
 80049ce:	1b64      	subs	r4, r4, r5
 80049d0:	10a4      	asrs	r4, r4, #2
 80049d2:	2600      	movs	r6, #0
 80049d4:	42a6      	cmp	r6, r4
 80049d6:	d109      	bne.n	80049ec <__libc_init_array+0x24>
 80049d8:	4d0b      	ldr	r5, [pc, #44]	; (8004a08 <__libc_init_array+0x40>)
 80049da:	4c0c      	ldr	r4, [pc, #48]	; (8004a0c <__libc_init_array+0x44>)
 80049dc:	f000 f820 	bl	8004a20 <_init>
 80049e0:	1b64      	subs	r4, r4, r5
 80049e2:	10a4      	asrs	r4, r4, #2
 80049e4:	2600      	movs	r6, #0
 80049e6:	42a6      	cmp	r6, r4
 80049e8:	d105      	bne.n	80049f6 <__libc_init_array+0x2e>
 80049ea:	bd70      	pop	{r4, r5, r6, pc}
 80049ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f0:	4798      	blx	r3
 80049f2:	3601      	adds	r6, #1
 80049f4:	e7ee      	b.n	80049d4 <__libc_init_array+0xc>
 80049f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fa:	4798      	blx	r3
 80049fc:	3601      	adds	r6, #1
 80049fe:	e7f2      	b.n	80049e6 <__libc_init_array+0x1e>
 8004a00:	08004b30 	.word	0x08004b30
 8004a04:	08004b30 	.word	0x08004b30
 8004a08:	08004b30 	.word	0x08004b30
 8004a0c:	08004b34 	.word	0x08004b34

08004a10 <memset>:
 8004a10:	4402      	add	r2, r0
 8004a12:	4603      	mov	r3, r0
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d100      	bne.n	8004a1a <memset+0xa>
 8004a18:	4770      	bx	lr
 8004a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a1e:	e7f9      	b.n	8004a14 <memset+0x4>

08004a20 <_init>:
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	bf00      	nop
 8004a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a26:	bc08      	pop	{r3}
 8004a28:	469e      	mov	lr, r3
 8004a2a:	4770      	bx	lr

08004a2c <_fini>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	bf00      	nop
 8004a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a32:	bc08      	pop	{r3}
 8004a34:	469e      	mov	lr, r3
 8004a36:	4770      	bx	lr

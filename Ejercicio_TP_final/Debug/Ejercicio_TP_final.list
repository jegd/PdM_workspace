
Ejercicio_TP_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fb0  08005fb0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb8  08005fb8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb8  08005fb8  00015fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fbc  08005fbc  00015fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  20000088  08006048  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  08006048  00020680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011666  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a91  00000000  00000000  0003171e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  000341b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00035068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024264  00000000  00000000  00035e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a05  00000000  00000000  0005a064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf376  00000000  00000000  0006ea69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013dddf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004558  00000000  00000000  0013de30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005d8c 	.word	0x08005d8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08005d8c 	.word	0x08005d8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 ffeb 	bl	8001594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f82b 	bl	8000618 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  uartInit();
 80005c2:	f000 fddb 	bl	800117c <uartInit>
  MX_I2C1_Init();
 80005c6:	f000 faed 	bl	8000ba4 <MX_I2C1_Init>
  ctrl_leds_acel_INIT();
 80005ca:	f000 fef5 	bl	80013b8 <ctrl_leds_acel_INIT>
  /* USER CODE BEGIN 2 */
  init_adxl(DIRECCION_ADXL);
 80005ce:	20a6      	movs	r0, #166	; 0xa6
 80005d0:	f000 fc04 	bl	8000ddc <init_adxl>


  int8_t X,Y;
  /* USER CODE END 2 */
  X=estadoX();
 80005d4:	f000 fce2 	bl	8000f9c <estadoX>
 80005d8:	4603      	mov	r3, r0
 80005da:	71fb      	strb	r3, [r7, #7]
  Y=estadoY();
 80005dc:	f000 fcf0 	bl	8000fc0 <estadoY>
 80005e0:	4603      	mov	r3, r0
 80005e2:	71bb      	strb	r3, [r7, #6]
  update_leds_acel(X,Y);
 80005e4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80005e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ec:	4611      	mov	r1, r2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 fef6 	bl	80013e0 <update_leds_acel>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  X=estadoX();
 80005f4:	f000 fcd2 	bl	8000f9c <estadoX>
 80005f8:	4603      	mov	r3, r0
 80005fa:	71fb      	strb	r3, [r7, #7]
	  Y=estadoY();
 80005fc:	f000 fce0 	bl	8000fc0 <estadoY>
 8000600:	4603      	mov	r3, r0
 8000602:	71bb      	strb	r3, [r7, #6]
	  update_leds_acel(X,Y);
 8000604:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060c:	4611      	mov	r1, r2
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fee6 	bl	80013e0 <update_leds_acel>
	  X=estadoX();
 8000614:	e7ee      	b.n	80005f4 <main+0x40>
	...

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2234      	movs	r2, #52	; 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fbe6 	bl	8004df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <SystemClock_Config+0xd0>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <SystemClock_Config+0xd0>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <SystemClock_Config+0xd4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a22      	ldr	r2, [pc, #136]	; (80006ec <SystemClock_Config+0xd4>)
 8000662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <SystemClock_Config+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800068c:	23a8      	movs	r3, #168	; 0xa8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000694:	2307      	movs	r3, #7
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000698:	2302      	movs	r3, #2
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 f9f3 	bl	8003a8c <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ac:	f000 f820 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2105      	movs	r1, #5
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fb68 	bl	8002da4 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006da:	f000 f809 	bl	80006f0 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <HAL_MspInit+0x4c>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070a:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <HAL_MspInit+0x4c>)
 800070c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000710:	6453      	str	r3, [r2, #68]	; 0x44
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <HAL_MspInit+0x4c>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_MspInit+0x4c>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	4a08      	ldr	r2, [pc, #32]	; (8000748 <HAL_MspInit+0x4c>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	6413      	str	r3, [r2, #64]	; 0x40
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_MspInit+0x4c>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a19      	ldr	r2, [pc, #100]	; (80007d0 <HAL_I2C_MspInit+0x84>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d12c      	bne.n	80007c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <HAL_I2C_MspInit+0x88>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <HAL_I2C_MspInit+0x88>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_I2C_MspInit+0x88>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800078a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000790:	2312      	movs	r3, #18
 8000792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800079c:	2304      	movs	r3, #4
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <HAL_I2C_MspInit+0x8c>)
 80007a8:	f001 f870 	bl	800188c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HAL_I2C_MspInit+0x88>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <HAL_I2C_MspInit+0x88>)
 80007b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_I2C_MspInit+0x88>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40005400 	.word	0x40005400
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020400 	.word	0x40020400

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a19      	ldr	r2, [pc, #100]	; (8000860 <HAL_UART_MspInit+0x84>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d12c      	bne.n	8000858 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_UART_MspInit+0x88>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000836:	f44f 7340 	mov.w	r3, #768	; 0x300
 800083a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000848:	2307      	movs	r3, #7
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <HAL_UART_MspInit+0x8c>)
 8000854:	f001 f81a 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40004800 	.word	0x40004800
 8000864:	40023800 	.word	0x40023800
 8000868:	40020c00 	.word	0x40020c00

0800086c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b0a0      	sub	sp, #128	; 0x80
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	225c      	movs	r2, #92	; 0x5c
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f004 fab3 	bl	8004df8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800089a:	d14e      	bne.n	800093a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800089c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80008a2:	2300      	movs	r3, #0
 80008a4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 fb94 	bl	8002fd8 <HAL_RCCEx_PeriphCLKConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80008b6:	f7ff ff1b 	bl	80006f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <HAL_PCD_MspInit+0xd8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a20      	ldr	r2, [pc, #128]	; (8000944 <HAL_PCD_MspInit+0xd8>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <HAL_PCD_MspInit+0xd8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008d6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008e8:	230a      	movs	r3, #10
 80008ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008f0:	4619      	mov	r1, r3
 80008f2:	4815      	ldr	r0, [pc, #84]	; (8000948 <HAL_PCD_MspInit+0xdc>)
 80008f4:	f000 ffca 	bl	800188c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800090a:	4619      	mov	r1, r3
 800090c:	480e      	ldr	r0, [pc, #56]	; (8000948 <HAL_PCD_MspInit+0xdc>)
 800090e:	f000 ffbd 	bl	800188c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_PCD_MspInit+0xd8>)
 8000914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <HAL_PCD_MspInit+0xd8>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6353      	str	r3, [r2, #52]	; 0x34
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_PCD_MspInit+0xd8>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	4a07      	ldr	r2, [pc, #28]	; (8000944 <HAL_PCD_MspInit+0xd8>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092c:	6453      	str	r3, [r2, #68]	; 0x44
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_PCD_MspInit+0xd8>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800093a:	bf00      	nop
 800093c:	3780      	adds	r7, #128	; 0x80
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 fe4e 	bl	8001638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return 1;
 80009a4:	2301      	movs	r3, #1
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_kill>:

int _kill(int pid, int sig)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009ba:	f004 f9e1 	bl	8004d80 <__errno>
 80009be:	4603      	mov	r3, r0
 80009c0:	2216      	movs	r2, #22
 80009c2:	601a      	str	r2, [r3, #0]
  return -1;
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <_exit>:

void _exit (int status)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ffe7 	bl	80009b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80009e2:	e7fe      	b.n	80009e2 <_exit+0x12>

080009e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	e00a      	b.n	8000a0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009f6:	f3af 8000 	nop.w
 80009fa:	4601      	mov	r1, r0
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	60ba      	str	r2, [r7, #8]
 8000a02:	b2ca      	uxtb	r2, r1
 8000a04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	dbf0      	blt.n	80009f6 <_read+0x12>
  }

  return len;
 8000a14:	687b      	ldr	r3, [r7, #4]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	e009      	b.n	8000a44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	60ba      	str	r2, [r7, #8]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	3301      	adds	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dbf1      	blt.n	8000a30 <_write+0x12>
  }
  return len;
 8000a4c:	687b      	ldr	r3, [r7, #4]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_close>:

int _close(int file)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_isatty>:

int _isatty(int file)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f004 f946 	bl	8004d80 <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20020000 	.word	0x20020000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	200000a4 	.word	0x200000a4
 8000b28:	20000680 	.word	0x20000680

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b6c:	4c0b      	ldr	r4, [pc, #44]	; (8000b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b7a:	f7ff ffd7 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f004 f917 	bl	8004db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fd17 	bl	80005b4 <main>
  bx  lr    
 8000b86:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000b94:	08005fc0 	.word	0x08005fc0
  ldr r2, =_sbss
 8000b98:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000b9c:	20000680 	.word	0x20000680

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init()
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000baa:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <MX_I2C1_Init+0x54>)
 8000bac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bb0:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <MX_I2C1_Init+0x58>)
 8000bb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000be2:	f001 f801 	bl	8001be8 <HAL_I2C_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bec:	f7ff fd80 	bl	80006f0 <Error_Handler>


  	  */
  /* USER CODE END I2C1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200000a8 	.word	0x200000a8
 8000bf8:	40005400 	.word	0x40005400
 8000bfc:	000186a0 	.word	0x000186a0

08000c00 <enviar_handle_i2c>:
I2C_HandleTypeDef * enviar_handle_i2c()
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
	return &hi2c1;
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <enviar_handle_i2c+0x10>)
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	200000a8 	.word	0x200000a8

08000c14 <INIT_GPIO_LEDS>:
#include "main.h"

//Implementación de funciones públicas

void INIT_GPIO_LEDS(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	; 0x30
 8000c18:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	4b4c      	ldr	r3, [pc, #304]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a4b      	ldr	r2, [pc, #300]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b49      	ldr	r3, [pc, #292]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	4b45      	ldr	r3, [pc, #276]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a44      	ldr	r2, [pc, #272]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a3d      	ldr	r2, [pc, #244]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b3b      	ldr	r3, [pc, #236]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a36      	ldr	r2, [pc, #216]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000c88:	f043 0308 	orr.w	r3, r3, #8
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a2f      	ldr	r2, [pc, #188]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <INIT_GPIO_LEDS+0x14c>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cd8:	4822      	ldr	r0, [pc, #136]	; (8000d64 <INIT_GPIO_LEDS+0x150>)
 8000cda:	f000 ff6b 	bl	8001bb4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2140      	movs	r1, #64	; 0x40
 8000ce2:	4821      	ldr	r0, [pc, #132]	; (8000d68 <INIT_GPIO_LEDS+0x154>)
 8000ce4:	f000 ff66 	bl	8001bb4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : USER_Btn_Pin */
	  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cec:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cf2:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	481b      	ldr	r0, [pc, #108]	; (8000d6c <INIT_GPIO_LEDS+0x158>)
 8000d00:	f000 fdc4 	bl	800188c <HAL_GPIO_Init>

	  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d04:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d08:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4811      	ldr	r0, [pc, #68]	; (8000d64 <INIT_GPIO_LEDS+0x150>)
 8000d1e:	f000 fdb5 	bl	800188c <HAL_GPIO_Init>

	  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d22:	2340      	movs	r3, #64	; 0x40
 8000d24:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	480b      	ldr	r0, [pc, #44]	; (8000d68 <INIT_GPIO_LEDS+0x154>)
 8000d3a:	f000 fda7 	bl	800188c <HAL_GPIO_Init>

	  /*Configure GPIO pin : USB_OverCurrent_Pin */
	  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <INIT_GPIO_LEDS+0x154>)
 8000d52:	f000 fd9b 	bl	800188c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d56:	bf00      	nop
 8000d58:	3730      	adds	r7, #48	; 0x30
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020400 	.word	0x40020400
 8000d68:	40021800 	.word	0x40021800
 8000d6c:	40020800 	.word	0x40020800

08000d70 <Modificar_LED_1>:
void Modificar_LED_1(bool_t valor)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB,LD1_Pin,valor);
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <Modificar_LED_1+0x20>)
 8000d82:	f000 ff17 	bl	8001bb4 <HAL_GPIO_WritePin>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40020400 	.word	0x40020400

08000d94 <Modificar_LED_2>:
void Modificar_LED_2(bool_t valor)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB,LD2_Pin,valor);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	461a      	mov	r2, r3
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <Modificar_LED_2+0x20>)
 8000da6:	f000 ff05 	bl	8001bb4 <HAL_GPIO_WritePin>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40020400 	.word	0x40020400

08000db8 <Modificar_LED_3>:
void Modificar_LED_3(bool_t valor)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB,LD3_Pin,valor);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <Modificar_LED_3+0x20>)
 8000dcc:	f000 fef2 	bl	8001bb4 <HAL_GPIO_WritePin>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40020400 	.word	0x40020400

08000ddc <init_adxl>:
 };
 static eje_t	Eje_Y;
//I2C_HandleTypeDef hi2c1;
//Implementación funciones públicas
 bool_t init_adxl(uint16_t direccion)
 {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af02      	add	r7, sp, #8
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
	 assert(&direccion!=NULL);
	 direccion_I2C_ADXL = direccion;
 8000de6:	88fa      	ldrh	r2, [r7, #6]
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <init_adxl+0x8c>)
 8000dea:	801a      	strh	r2, [r3, #0]
	 Modulo_I2C=enviar_handle_i2c();
 8000dec:	f7ff ff08 	bl	8000c00 <enviar_handle_i2c>
 8000df0:	4603      	mov	r3, r0
 8000df2:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <init_adxl+0x90>)
 8000df4:	6013      	str	r3, [r2, #0]
	 MEF_estado_eje_INIT(&Eje_X);
 8000df6:	481e      	ldr	r0, [pc, #120]	; (8000e70 <init_adxl+0x94>)
 8000df8:	f000 f8f6 	bl	8000fe8 <MEF_estado_eje_INIT>
	 MEF_estado_eje_INIT(&Eje_Y);
 8000dfc:	481d      	ldr	r0, [pc, #116]	; (8000e74 <init_adxl+0x98>)
 8000dfe:	f000 f8f3 	bl	8000fe8 <MEF_estado_eje_INIT>
	  //Seteo del acelerómetro para que empiece a mandar datos
	 // Mandamos a 1 el bit 4 (0x08) del registro 0x2D—POWER_CTL del acelerómetro
	 // para que despierte y empiece a mandar datos
	  uint8_t vec[2]={0x2D,0x08};
 8000e02:	f640 032d 	movw	r3, #2093	; 0x82d
 8000e06:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(Modulo_I2C,direccion_I2C_ADXL,(uint8_t *)vec, sizeof(vec), TIMEOUT);
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <init_adxl+0x90>)
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <init_adxl+0x8c>)
 8000e0e:	8819      	ldrh	r1, [r3, #0]
 8000e10:	f107 020c 	add.w	r2, r7, #12
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	f001 f828 	bl	8001e70 <HAL_I2C_Master_Transmit>
	  //Tomamos las muestras de desfase
	  desfaseX=(float)(obtenerX())*256;
 8000e20:	f000 f830 	bl	8000e84 <obtenerX>
 8000e24:	eef0 7a40 	vmov.f32	s15, s0
 8000e28:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000e78 <init_adxl+0x9c>
 8000e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e34:	ee17 3a90 	vmov	r3, s15
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <init_adxl+0xa0>)
 8000e3c:	801a      	strh	r2, [r3, #0]
	  desfaseY=(float)(obtenerY())*256;
 8000e3e:	f000 f867 	bl	8000f10 <obtenerY>
 8000e42:	eef0 7a40 	vmov.f32	s15, s0
 8000e46:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000e78 <init_adxl+0x9c>
 8000e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e52:	ee17 3a90 	vmov	r3, s15
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <init_adxl+0xa4>)
 8000e5a:	801a      	strh	r2, [r3, #0]
	  return 1;
 8000e5c:	2301      	movs	r3, #1
 }
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000104 	.word	0x20000104
 8000e6c:	200000fc 	.word	0x200000fc
 8000e70:	20000004 	.word	0x20000004
 8000e74:	20000010 	.word	0x20000010
 8000e78:	43800000 	.word	0x43800000
 8000e7c:	20000100 	.word	0x20000100
 8000e80:	20000102 	.word	0x20000102

08000e84 <obtenerX>:

 float obtenerX(void)
 {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af02      	add	r7, sp, #8
	 uint8_t a=0x32;				//Registro que se debe consultar en el acelerómetro para tener el primer byte de datos X
 8000e8a:	2332      	movs	r3, #50	; 0x32
 8000e8c:	71fb      	strb	r3, [r7, #7]
	 float dato_X;
	 HAL_I2C_Master_Transmit(Modulo_I2C, direccion_I2C_ADXL,(uint8_t *)&a, sizeof(a), TIMEOUT);
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <obtenerX+0x7c>)
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <obtenerX+0x80>)
 8000e94:	8819      	ldrh	r1, [r3, #0]
 8000e96:	1dfa      	adds	r2, r7, #7
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	f000 ffe6 	bl	8001e70 <HAL_I2C_Master_Transmit>
	 uint8_t b[2];
	 int16_t ext;
	 HAL_I2C_Master_Receive(enviar_handle_i2c(), direccion_I2C_ADXL, b, sizeof(b), TIMEOUT);
 8000ea4:	f7ff feac 	bl	8000c00 <enviar_handle_i2c>
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <obtenerX+0x80>)
 8000eaa:	8819      	ldrh	r1, [r3, #0]
 8000eac:	1d3a      	adds	r2, r7, #4
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	f001 f8d9 	bl	800206c <HAL_I2C_Master_Receive>
	 ext=(b[1]<<8|b[0])-desfaseX;
 8000eba:	797b      	ldrb	r3, [r7, #5]
 8000ebc:	021b      	lsls	r3, r3, #8
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	793b      	ldrb	r3, [r7, #4]
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <obtenerX+0x84>)
 8000ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	81fb      	strh	r3, [r7, #14]
	 dato_X=(float)ext/256;
 8000ed8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee4:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000f0c <obtenerX+0x88>
 8000ee8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eec:	edc7 7a02 	vstr	s15, [r7, #8]
	 return dato_X;
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	ee07 3a90 	vmov	s15, r3
 }
 8000ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200000fc 	.word	0x200000fc
 8000f04:	20000104 	.word	0x20000104
 8000f08:	20000100 	.word	0x20000100
 8000f0c:	43800000 	.word	0x43800000

08000f10 <obtenerY>:
 float obtenerY(void)
 {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af02      	add	r7, sp, #8
	 uint8_t a=0x34;				//Registro que se debe consultar en el acelerómetro para tener el primer byte de datos Y
 8000f16:	2334      	movs	r3, #52	; 0x34
 8000f18:	71fb      	strb	r3, [r7, #7]
	 float dato_Y;
	 HAL_I2C_Master_Transmit(Modulo_I2C, direccion_I2C_ADXL,(uint8_t *)&a, sizeof(a), TIMEOUT);
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <obtenerY+0x7c>)
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <obtenerY+0x80>)
 8000f20:	8819      	ldrh	r1, [r3, #0]
 8000f22:	1dfa      	adds	r2, r7, #7
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f000 ffa0 	bl	8001e70 <HAL_I2C_Master_Transmit>
	 uint8_t b[2];
	 int16_t ext;
	 HAL_I2C_Master_Receive(enviar_handle_i2c(), direccion_I2C_ADXL, b, sizeof(b), TIMEOUT);
 8000f30:	f7ff fe66 	bl	8000c00 <enviar_handle_i2c>
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <obtenerY+0x80>)
 8000f36:	8819      	ldrh	r1, [r3, #0]
 8000f38:	1d3a      	adds	r2, r7, #4
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2302      	movs	r3, #2
 8000f42:	f001 f893 	bl	800206c <HAL_I2C_Master_Receive>
	 ext=(b[1]<<8|b[0])-desfaseY;
 8000f46:	797b      	ldrb	r3, [r7, #5]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	793b      	ldrb	r3, [r7, #4]
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <obtenerY+0x84>)
 8000f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	81fb      	strh	r3, [r7, #14]
	 dato_Y=(float)ext/256;
 8000f64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f70:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000f98 <obtenerY+0x88>
 8000f74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f78:	edc7 7a02 	vstr	s15, [r7, #8]
	 return dato_Y;
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	ee07 3a90 	vmov	s15, r3
 }
 8000f82:	eeb0 0a67 	vmov.f32	s0, s15
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200000fc 	.word	0x200000fc
 8000f90:	20000104 	.word	0x20000104
 8000f94:	20000102 	.word	0x20000102
 8000f98:	43800000 	.word	0x43800000

08000f9c <estadoX>:

 int8_t estadoX(void)
 {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
	 uint8_obtener_estado_MEF_eje(&Eje_X);
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <estadoX+0x20>)
 8000fa4:	f000 f82e 	bl	8001004 <uint8_obtener_estado_MEF_eje>
	 int8_t valor_del_eje_X = Eje_X.estadoAcel;
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <estadoX+0x20>)
 8000faa:	7a1b      	ldrb	r3, [r3, #8]
 8000fac:	71fb      	strb	r3, [r7, #7]
	 return valor_del_eje_X;
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 }
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <estadoY>:
 int8_t estadoY(void)
  {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
	uint8_obtener_estado_MEF_eje(&Eje_Y);
 8000fc6:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <estadoY+0x24>)
 8000fc8:	f000 f81c 	bl	8001004 <uint8_obtener_estado_MEF_eje>
	int8_t valor_del_eje_Y = Eje_Y.estadoAcel;
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <estadoY+0x24>)
 8000fce:	7a1b      	ldrb	r3, [r3, #8]
 8000fd0:	71fb      	strb	r3, [r7, #7]
	return -valor_del_eje_Y;
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	b25b      	sxtb	r3, r3
  }
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000010 	.word	0x20000010

08000fe8 <MEF_estado_eje_INIT>:


 //Implementación funciones privadas
 static void MEF_estado_eje_INIT(eje_t * Eje_a_evaluar)
 {
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	 assert(&Eje_a_evaluar!=NULL);
	 *(Eje_a_evaluar->MEF_eje) = ESTADO_0;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
 }
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <uint8_obtener_estado_MEF_eje>:


 static void uint8_obtener_estado_MEF_eje(eje_t * Eje_a_evaluar)
 {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	 assert(&Eje_a_evaluar!=NULL);
	 switch(*(Eje_a_evaluar->MEF_eje))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f993 3000 	ldrsb.w	r3, [r3]
 8001014:	3302      	adds	r3, #2
 8001016:	2b04      	cmp	r3, #4
 8001018:	f200 809e 	bhi.w	8001158 <uint8_obtener_estado_MEF_eje+0x154>
 800101c:	a201      	add	r2, pc, #4	; (adr r2, 8001024 <uint8_obtener_estado_MEF_eje+0x20>)
 800101e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001022:	bf00      	nop
 8001024:	080010ed 	.word	0x080010ed
 8001028:	08001131 	.word	0x08001131
 800102c:	080010a5 	.word	0x080010a5
 8001030:	08001039 	.word	0x08001039
 8001034:	08001061 	.word	0x08001061
	 {
	 case ESTADO_1:
		 // Se realiza cuando estamos en el estado 1
		 if(Eje_a_evaluar->obtener_valor_eje() < LIMIT_SUP)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4798      	blx	r3
 800103e:	eef0 7a40 	vmov.f32	s15, s0
 8001042:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800116c <uint8_obtener_estado_MEF_eje+0x168>
 8001046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800104a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104e:	d503      	bpl.n	8001058 <uint8_obtener_estado_MEF_eje+0x54>
			 *(Eje_a_evaluar->MEF_eje)=ESTADO_NADA_1;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2202      	movs	r2, #2
 8001056:	701a      	strb	r2, [r3, #0]

		 Eje_a_evaluar->estadoAcel=1;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	721a      	strb	r2, [r3, #8]
		 break;
 800105e:	e080      	b.n	8001162 <uint8_obtener_estado_MEF_eje+0x15e>
	 case ESTADO_NADA_1:
		 // Se realiza cuando estamos en un limbo entre saber si es 1 o 0
		 if(Eje_a_evaluar->obtener_valor_eje() > LIMIT_SUP)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4798      	blx	r3
 8001066:	eef0 7a40 	vmov.f32	s15, s0
 800106a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800116c <uint8_obtener_estado_MEF_eje+0x168>
 800106e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001076:	dd03      	ble.n	8001080 <uint8_obtener_estado_MEF_eje+0x7c>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_1;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]

		 if(Eje_a_evaluar->obtener_valor_eje() < LIMIT_INF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	4798      	blx	r3
 8001086:	eef0 7a40 	vmov.f32	s15, s0
 800108a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001170 <uint8_obtener_estado_MEF_eje+0x16c>
 800108e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001096:	d400      	bmi.n	800109a <uint8_obtener_estado_MEF_eje+0x96>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_0;
	 		 break;
 8001098:	e063      	b.n	8001162 <uint8_obtener_estado_MEF_eje+0x15e>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_0;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
	 		 break;
 80010a2:	e05e      	b.n	8001162 <uint8_obtener_estado_MEF_eje+0x15e>
	 case ESTADO_0:
		 // Se realiza cuando estamos en el estado 0
		 if(Eje_a_evaluar->obtener_valor_eje() > LIMIT_INF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	4798      	blx	r3
 80010aa:	eef0 7a40 	vmov.f32	s15, s0
 80010ae:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001170 <uint8_obtener_estado_MEF_eje+0x16c>
 80010b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	dd03      	ble.n	80010c4 <uint8_obtener_estado_MEF_eje+0xc0>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_NADA_1;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2202      	movs	r2, #2
 80010c2:	701a      	strb	r2, [r3, #0]

		 if(Eje_a_evaluar->obtener_valor_eje() < (-LIMIT_INF))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	4798      	blx	r3
 80010ca:	eef0 7a40 	vmov.f32	s15, s0
 80010ce:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001174 <uint8_obtener_estado_MEF_eje+0x170>
 80010d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010da:	d503      	bpl.n	80010e4 <uint8_obtener_estado_MEF_eje+0xe0>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_NADA_M1;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	22fe      	movs	r2, #254	; 0xfe
 80010e2:	701a      	strb	r2, [r3, #0]

		 Eje_a_evaluar->estadoAcel=0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	721a      	strb	r2, [r3, #8]
	 		 break;
 80010ea:	e03a      	b.n	8001162 <uint8_obtener_estado_MEF_eje+0x15e>
	 case ESTADO_NADA_M1:
		 // Se realiza cuando estamos en un limbo entre saber si es 0 o -1
		 if(Eje_a_evaluar->obtener_valor_eje() > (-LIMIT_INF))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	4798      	blx	r3
 80010f2:	eef0 7a40 	vmov.f32	s15, s0
 80010f6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001174 <uint8_obtener_estado_MEF_eje+0x170>
 80010fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001102:	dd03      	ble.n	800110c <uint8_obtener_estado_MEF_eje+0x108>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]

		 if(Eje_a_evaluar->obtener_valor_eje() < (-LIMIT_SUP))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4798      	blx	r3
 8001112:	eef0 7a40 	vmov.f32	s15, s0
 8001116:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001178 <uint8_obtener_estado_MEF_eje+0x174>
 800111a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001122:	d400      	bmi.n	8001126 <uint8_obtener_estado_MEF_eje+0x122>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_M1;
	 		 break;
 8001124:	e01d      	b.n	8001162 <uint8_obtener_estado_MEF_eje+0x15e>
			*(Eje_a_evaluar->MEF_eje)=ESTADO_M1;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	22ff      	movs	r2, #255	; 0xff
 800112c:	701a      	strb	r2, [r3, #0]
	 		 break;
 800112e:	e018      	b.n	8001162 <uint8_obtener_estado_MEF_eje+0x15e>
	 case ESTADO_M1:
		 // Se realiza cuando estamos en el estado -1

		 if(Eje_a_evaluar->obtener_valor_eje() > (-LIMIT_SUP))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4798      	blx	r3
 8001136:	eef0 7a40 	vmov.f32	s15, s0
 800113a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001178 <uint8_obtener_estado_MEF_eje+0x174>
 800113e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	dd03      	ble.n	8001150 <uint8_obtener_estado_MEF_eje+0x14c>
		 { *(Eje_a_evaluar->MEF_eje)=ESTADO_NADA_M1;}
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	22fe      	movs	r2, #254	; 0xfe
 800114e:	701a      	strb	r2, [r3, #0]

		 Eje_a_evaluar->estadoAcel=-1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	22ff      	movs	r2, #255	; 0xff
 8001154:	721a      	strb	r2, [r3, #8]

	 		 break;
 8001156:	e004      	b.n	8001162 <uint8_obtener_estado_MEF_eje+0x15e>
	 default:
		 MEF_estado_eje_INIT(Eje_a_evaluar);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff44 	bl	8000fe8 <MEF_estado_eje_INIT>
		 break;
 8001160:	bf00      	nop


	 }
 }
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	3f4ccccd 	.word	0x3f4ccccd
 8001170:	3e4ccccd 	.word	0x3e4ccccd
 8001174:	be4ccccd 	.word	0xbe4ccccd
 8001178:	bf4ccccd 	.word	0xbf4ccccd

0800117c <uartInit>:
static void Error_Handler(void);						//Función para manejo de errores

//Implementación de funciones

bool_t uartInit(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	bool_t Estado_uart = false;
 8001182:	2300      	movs	r3, #0
 8001184:	71fb      	strb	r3, [r7, #7]
	 MX_USART3_UART_Init();
 8001186:	f000 f853 	bl	8001230 <MX_USART3_UART_Init>
	 MX_USB_OTG_FS_PCD_Init();
 800118a:	f000 f87b 	bl	8001284 <MX_USB_OTG_FS_PCD_Init>
	 if (HAL_UART_Init(&huart3) == HAL_OK)
 800118e:	4812      	ldr	r0, [pc, #72]	; (80011d8 <uartInit+0x5c>)
 8001190:	f002 ff1a 	bl	8003fc8 <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <uartInit+0x22>
	 Estado_uart = true;
 800119a:	2301      	movs	r3, #1
 800119c:	71fb      	strb	r3, [r7, #7]
	 // Mensaje de inicialización y parámetros de
	 uartSendString((const uint8_t *) "\n\rInicializacion de UART exitosa \n\r");
 800119e:	480f      	ldr	r0, [pc, #60]	; (80011dc <uartInit+0x60>)
 80011a0:	f000 f82c 	bl	80011fc <uartSendString>
	 uartSendString((const uint8_t *) "Parametros de UART \n\r ");
 80011a4:	480e      	ldr	r0, [pc, #56]	; (80011e0 <uartInit+0x64>)
 80011a6:	f000 f829 	bl	80011fc <uartSendString>
	 uartSendString((const uint8_t *) "- Baudios: 9600 \n\r ");
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <uartInit+0x68>)
 80011ac:	f000 f826 	bl	80011fc <uartSendString>
	 uartSendString((const uint8_t *) "- Palabra(incluyendo pariedad): 8 \n\r ");
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <uartInit+0x6c>)
 80011b2:	f000 f823 	bl	80011fc <uartSendString>
	 uartSendString((const uint8_t *) "- Stop bits: 1 \n\r ");
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <uartInit+0x70>)
 80011b8:	f000 f820 	bl	80011fc <uartSendString>
	 uartSendString((const uint8_t *) "- Pariedad: Impar \n\r ");
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <uartInit+0x74>)
 80011be:	f000 f81d 	bl	80011fc <uartSendString>
	 uartSendString((const uint8_t *) "- Modo: Transmisor receptor \n\r ");
 80011c2:	480c      	ldr	r0, [pc, #48]	; (80011f4 <uartInit+0x78>)
 80011c4:	f000 f81a 	bl	80011fc <uartSendString>
	 uartSendString((const uint8_t *) "- Flow: Ninguno \n\r ");
 80011c8:	480b      	ldr	r0, [pc, #44]	; (80011f8 <uartInit+0x7c>)
 80011ca:	f000 f817 	bl	80011fc <uartSendString>


	 return Estado_uart;
 80011ce:	79fb      	ldrb	r3, [r7, #7]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000108 	.word	0x20000108
 80011dc:	08005da4 	.word	0x08005da4
 80011e0:	08005dc8 	.word	0x08005dc8
 80011e4:	08005de0 	.word	0x08005de0
 80011e8:	08005df4 	.word	0x08005df4
 80011ec:	08005e1c 	.word	0x08005e1c
 80011f0:	08005e30 	.word	0x08005e30
 80011f4:	08005e48 	.word	0x08005e48
 80011f8:	08005e68 	.word	0x08005e68

080011fc <uartSendString>:

void uartSendString(const uint8_t *  pstring)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	 const uint8_t *puntero=pstring;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	60fb      	str	r3, [r7, #12]
	 while(*puntero)
 8001208:	e007      	b.n	800121a <uartSendString+0x1e>
	 {
		 HAL_UART_Transmit(&huart3,(const uint8_t *)puntero++,1,200);
 800120a:	68f9      	ldr	r1, [r7, #12]
 800120c:	1c4b      	adds	r3, r1, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	23c8      	movs	r3, #200	; 0xc8
 8001212:	2201      	movs	r2, #1
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <uartSendString+0x30>)
 8001216:	f002 ff24 	bl	8004062 <HAL_UART_Transmit>
	 while(*puntero)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f3      	bne.n	800120a <uartSendString+0xe>
	 }
}
 8001222:	bf00      	nop
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000108 	.word	0x20000108

08001230 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_USART3_UART_Init+0x4c>)
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <MX_USART3_UART_Init+0x50>)
 8001238:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = BAUDIOS;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <MX_USART3_UART_Init+0x4c>)
 800123c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001240:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = PALABRA;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_USART3_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = STOP;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_USART3_UART_Init+0x4c>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = PARI;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_USART3_UART_Init+0x4c>)
 8001250:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001254:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = MODO;
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_USART3_UART_Init+0x4c>)
 8001258:	220c      	movs	r2, #12
 800125a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = FLOW;
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <MX_USART3_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = TIME;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_USART3_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <MX_USART3_UART_Init+0x4c>)
 800126a:	f002 fead 	bl	8003fc8 <HAL_UART_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8001274:	f000 f834 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000108 	.word	0x20000108
 8001280:	40004800 	.word	0x40004800

08001284 <MX_USB_OTG_FS_PCD_Init>:

static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800128a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800128e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001292:	2206      	movs	r2, #6
 8001294:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001298:	2202      	movs	r2, #2
 800129a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a4:	2202      	movs	r2, #2
 80012a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012bc:	2201      	movs	r2, #1
 80012be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c8:	f001 fc23 	bl	8002b12 <HAL_PCD_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012d2:	f000 f805 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2000014c 	.word	0x2000014c

080012e0 <Error_Handler>:

static void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <Error_Handler+0x8>
	...

080012ec <delayInit>:

#include "Api_delay.h"
void delayInit( delay_t * delay, tick_t duration ){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	assert(delay!= NULL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d105      	bne.n	8001308 <delayInit+0x1c>
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <delayInit+0x30>)
 80012fe:	4a08      	ldr	r2, [pc, #32]	; (8001320 <delayInit+0x34>)
 8001300:	2104      	movs	r1, #4
 8001302:	4808      	ldr	r0, [pc, #32]	; (8001324 <delayInit+0x38>)
 8001304:	f003 fd1e 	bl	8004d44 <__assert_func>
 delay->duration= duration;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	605a      	str	r2, [r3, #4]
 delay->running=false;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	721a      	strb	r2, [r3, #8]
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	08005e7c 	.word	0x08005e7c
 8001320:	08005ec4 	.word	0x08005ec4
 8001324:	08005e8c 	.word	0x08005e8c

08001328 <delayRead>:

bool_t delayRead( delay_t * delay ){
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	assert(delay!= NULL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d105      	bne.n	8001342 <delayRead+0x1a>
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <delayRead+0x68>)
 8001338:	4a16      	ldr	r2, [pc, #88]	; (8001394 <delayRead+0x6c>)
 800133a:	210a      	movs	r1, #10
 800133c:	4816      	ldr	r0, [pc, #88]	; (8001398 <delayRead+0x70>)
 800133e:	f003 fd01 	bl	8004d44 <__assert_func>
	if((delay->running)==false ){
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7a1b      	ldrb	r3, [r3, #8]
 8001346:	f083 0301 	eor.w	r3, r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d007      	beq.n	8001360 <delayRead+0x38>
		delay->startTime = HAL_GetTick();
 8001350:	f000 f986 	bl	8001660 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	601a      	str	r2, [r3, #0]
		delay->running = true;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	721a      	strb	r2, [r3, #8]
	}

	if(delay->running){
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7a1b      	ldrb	r3, [r3, #8]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00c      	beq.n	8001382 <delayRead+0x5a>
		if((HAL_GetTick()-(delay->startTime))>=delay->duration){
 8001368:	f000 f97a 	bl	8001660 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	1ad2      	subs	r2, r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	429a      	cmp	r2, r3
 800137a:	d302      	bcc.n	8001382 <delayRead+0x5a>
			delay->running = false;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	721a      	strb	r2, [r3, #8]
		}
	}
return delay->running;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7a1b      	ldrb	r3, [r3, #8]

}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	08005e7c 	.word	0x08005e7c
 8001394:	08005ed0 	.word	0x08005ed0
 8001398:	08005e8c 	.word	0x08005e8c

0800139c <nueva_cuenta>:
void delayWrite( delay_t * delay, tick_t duration ){
	assert(delay!= NULL);
	delay->duration = duration;
}
void nueva_cuenta(delay_t * delay)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	delay->startTime = HAL_GetTick();
 80013a4:	f000 f95c 	bl	8001660 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	601a      	str	r2, [r3, #0]
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <ctrl_leds_acel_INIT>:
static bool_t estado_led_2;

//Implentación de funciones públicas

bool_t ctrl_leds_acel_INIT(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	assert(&Estado_actual!=NULL);
	INIT_GPIO_LEDS();
 80013bc:	f7ff fc2a 	bl	8000c14 <INIT_GPIO_LEDS>
	Estado_actual=BASE;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <ctrl_leds_acel_INIT+0x20>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
	delayInit(&retraso_parpadeo,TIEMPO_PARP_ATRAS);
 80013c6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80013ca:	4804      	ldr	r0, [pc, #16]	; (80013dc <ctrl_leds_acel_INIT+0x24>)
 80013cc:	f7ff ff8e 	bl	80012ec <delayInit>
	return 1;
 80013d0:	2301      	movs	r3, #1
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000658 	.word	0x20000658
 80013dc:	2000065c 	.word	0x2000065c

080013e0 <update_leds_acel>:

//Función para indentificar en que estado se debe encontrar la máquina
void update_leds_acel(int8_t valor_entrada_1, int8_t valor_entrada_2)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	460a      	mov	r2, r1
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	4613      	mov	r3, r2
 80013ee:	71bb      	strb	r3, [r7, #6]
	switch(Estado_actual)
 80013f0:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <update_leds_acel+0xfc>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d860      	bhi.n	80014ba <update_leds_acel+0xda>
 80013f8:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <update_leds_acel+0x20>)
 80013fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fe:	bf00      	nop
 8001400:	08001415 	.word	0x08001415
 8001404:	08001429 	.word	0x08001429
 8001408:	08001473 	.word	0x08001473
 800140c:	08001493 	.word	0x08001493
 8001410:	080014a7 	.word	0x080014a7
	{
	case ADELANTE:
		if(valor_entrada_1<=PASO_BASE)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	dc51      	bgt.n	80014c0 <update_leds_acel+0xe0>
		{
			Estado_actual=BASE;
 800141c:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <update_leds_acel+0xfc>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
			funcion_base();
 8001422:	f000 f864 	bl	80014ee <funcion_base>
		}
		break;
 8001426:	e04b      	b.n	80014c0 <update_leds_acel+0xe0>
	case BASE:
		if(valor_entrada_1>=PASO_ADELANTE)
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	dd04      	ble.n	800143a <update_leds_acel+0x5a>
		{
			Estado_actual=ADELANTE;
 8001430:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <update_leds_acel+0xfc>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
			funcion_adelante();
 8001436:	f000 f853 	bl	80014e0 <funcion_adelante>
		}
		if(valor_entrada_1<=PASO_ATRAS)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	da04      	bge.n	800144c <update_leds_acel+0x6c>
		{
			Estado_actual=ATRAS;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <update_leds_acel+0xfc>)
 8001444:	2202      	movs	r2, #2
 8001446:	701a      	strb	r2, [r3, #0]
			funcion_atras();
 8001448:	f000 f85e 	bl	8001508 <funcion_atras>
		}
		if(valor_entrada_2<=PASO_IZQUIERDA)
 800144c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001450:	2b00      	cmp	r3, #0
 8001452:	da04      	bge.n	800145e <update_leds_acel+0x7e>
		{
			Estado_actual=IZQUIERDA;
 8001454:	4b21      	ldr	r3, [pc, #132]	; (80014dc <update_leds_acel+0xfc>)
 8001456:	2203      	movs	r2, #3
 8001458:	701a      	strb	r2, [r3, #0]
			funcion_izquierda();
 800145a:	f000 f867 	bl	800152c <funcion_izquierda>
		}
		if(valor_entrada_2>=PASO_DERECHA)
 800145e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001462:	2b00      	cmp	r3, #0
 8001464:	dd2e      	ble.n	80014c4 <update_leds_acel+0xe4>
		{
			Estado_actual=DERECHA;
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <update_leds_acel+0xfc>)
 8001468:	2204      	movs	r2, #4
 800146a:	701a      	strb	r2, [r3, #0]
			funcion_derecha();
 800146c:	f000 f865 	bl	800153a <funcion_derecha>
		}
		break;
 8001470:	e028      	b.n	80014c4 <update_leds_acel+0xe4>
	case ATRAS:
		if(valor_entrada_1>=PASO_BASE)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db04      	blt.n	8001484 <update_leds_acel+0xa4>
		{
			Estado_actual=BASE;
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <update_leds_acel+0xfc>)
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
			funcion_base();
 8001480:	f000 f835 	bl	80014ee <funcion_base>
		}
		if(valor_entrada_1<=PASO_ATRAS)
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	2b00      	cmp	r3, #0
 800148a:	da1d      	bge.n	80014c8 <update_leds_acel+0xe8>
		funcion_parpadeo_led_2();
 800148c:	f000 f85c 	bl	8001548 <funcion_parpadeo_led_2>

		break;
 8001490:	e01a      	b.n	80014c8 <update_leds_acel+0xe8>
	case IZQUIERDA:
		if(valor_entrada_2>=PASO_BASE)
 8001492:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db18      	blt.n	80014cc <update_leds_acel+0xec>
		{
			Estado_actual=BASE;
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <update_leds_acel+0xfc>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
			funcion_base();
 80014a0:	f000 f825 	bl	80014ee <funcion_base>
		}
		break;
 80014a4:	e012      	b.n	80014cc <update_leds_acel+0xec>
	case DERECHA:
		if(valor_entrada_2<=PASO_BASE)
 80014a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	dc10      	bgt.n	80014d0 <update_leds_acel+0xf0>
		{
			Estado_actual=BASE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <update_leds_acel+0xfc>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
			funcion_base();
 80014b4:	f000 f81b 	bl	80014ee <funcion_base>
		}
		break;
 80014b8:	e00a      	b.n	80014d0 <update_leds_acel+0xf0>

	default:
		ctrl_leds_acel_INIT();
 80014ba:	f7ff ff7d 	bl	80013b8 <ctrl_leds_acel_INIT>
		break;
 80014be:	e008      	b.n	80014d2 <update_leds_acel+0xf2>
		break;
 80014c0:	bf00      	nop
 80014c2:	e006      	b.n	80014d2 <update_leds_acel+0xf2>
		break;
 80014c4:	bf00      	nop
 80014c6:	e004      	b.n	80014d2 <update_leds_acel+0xf2>
		break;
 80014c8:	bf00      	nop
 80014ca:	e002      	b.n	80014d2 <update_leds_acel+0xf2>
		break;
 80014cc:	bf00      	nop
 80014ce:	e000      	b.n	80014d2 <update_leds_acel+0xf2>
		break;
 80014d0:	bf00      	nop

	}
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000658 	.word	0x20000658

080014e0 <funcion_adelante>:

//Implementación de funciones privadas

static void funcion_adelante(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	Modificar_LED_2(1);
 80014e4:	2001      	movs	r0, #1
 80014e6:	f7ff fc55 	bl	8000d94 <Modificar_LED_2>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}

080014ee <funcion_base>:
static void funcion_base(void)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	af00      	add	r7, sp, #0
	Modificar_LED_1(0);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff fc3c 	bl	8000d70 <Modificar_LED_1>
	Modificar_LED_2(0);
 80014f8:	2000      	movs	r0, #0
 80014fa:	f7ff fc4b 	bl	8000d94 <Modificar_LED_2>
	Modificar_LED_3(0);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff fc5a 	bl	8000db8 <Modificar_LED_3>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <funcion_atras>:
static void funcion_atras(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

		Modificar_LED_2(1); //cambiar por parpadeante
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff fc41 	bl	8000d94 <Modificar_LED_2>
		estado_led_2=1;
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <funcion_atras+0x1c>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
		nueva_cuenta(&retraso_parpadeo);
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <funcion_atras+0x20>)
 800151a:	f7ff ff3f 	bl	800139c <nueva_cuenta>
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000668 	.word	0x20000668
 8001528:	2000065c 	.word	0x2000065c

0800152c <funcion_izquierda>:
static void funcion_izquierda(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	Modificar_LED_3(1);
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff fc41 	bl	8000db8 <Modificar_LED_3>
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}

0800153a <funcion_derecha>:
static void funcion_derecha(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
	Modificar_LED_1(1);
 800153e:	2001      	movs	r0, #1
 8001540:	f7ff fc16 	bl	8000d70 <Modificar_LED_1>
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <funcion_parpadeo_led_2>:
static void funcion_parpadeo_led_2(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	if(!delayRead(&retraso_parpadeo))
 800154c:	480f      	ldr	r0, [pc, #60]	; (800158c <funcion_parpadeo_led_2+0x44>)
 800154e:	f7ff feeb 	bl	8001328 <delayRead>
 8001552:	4603      	mov	r3, r0
 8001554:	f083 0301 	eor.w	r3, r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d013      	beq.n	8001586 <funcion_parpadeo_led_2+0x3e>
	{
		estado_led_2=!estado_led_2;
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <funcion_parpadeo_led_2+0x48>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	bf14      	ite	ne
 8001566:	2301      	movne	r3, #1
 8001568:	2300      	moveq	r3, #0
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f083 0301 	eor.w	r3, r3, #1
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <funcion_parpadeo_led_2+0x48>)
 800157a:	701a      	strb	r2, [r3, #0]
		Modificar_LED_2(estado_led_2);
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <funcion_parpadeo_led_2+0x48>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fc07 	bl	8000d94 <Modificar_LED_2>
	}


}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000065c 	.word	0x2000065c
 8001590:	20000668 	.word	0x20000668

08001594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <HAL_Init+0x40>)
 800159e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_Init+0x40>)
 80015aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_Init+0x40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <HAL_Init+0x40>)
 80015b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 f931 	bl	8001824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c2:	2000      	movs	r0, #0
 80015c4:	f000 f808 	bl	80015d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c8:	f7ff f898 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023c00 	.word	0x40023c00

080015d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x54>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_InitTick+0x58>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f93b 	bl	8001872 <HAL_SYSTICK_Config>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e00e      	b.n	8001624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d80a      	bhi.n	8001622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f000 f911 	bl	800183a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001618:	4a06      	ldr	r2, [pc, #24]	; (8001634 <HAL_InitTick+0x5c>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e000      	b.n	8001624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000000 	.word	0x20000000
 8001630:	20000020 	.word	0x20000020
 8001634:	2000001c 	.word	0x2000001c

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000020 	.word	0x20000020
 800165c:	2000066c 	.word	0x2000066c

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	2000066c 	.word	0x2000066c

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff ffee 	bl	8001660 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffde 	bl	8001660 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000020 	.word	0x20000020

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f0:	d301      	bcc.n	80017f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00f      	b.n	8001816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <SysTick_Config+0x40>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fe:	210f      	movs	r1, #15
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f7ff ff8e 	bl	8001724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <SysTick_Config+0x40>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <SysTick_Config+0x40>)
 8001810:	2207      	movs	r2, #7
 8001812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	e000e010 	.word	0xe000e010

08001824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ff47 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184c:	f7ff ff5c 	bl	8001708 <__NVIC_GetPriorityGrouping>
 8001850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	6978      	ldr	r0, [r7, #20]
 8001858:	f7ff ff8e 	bl	8001778 <NVIC_EncodePriority>
 800185c:	4602      	mov	r2, r0
 800185e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff5d 	bl	8001724 <__NVIC_SetPriority>
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffb0 	bl	80017e0 <SysTick_Config>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	e165      	b.n	8001b74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8154 	bne.w	8001b6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d005      	beq.n	80018de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d130      	bne.n	8001940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	2203      	movs	r2, #3
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001914:	2201      	movs	r2, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 0201 	and.w	r2, r3, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b03      	cmp	r3, #3
 800194a:	d017      	beq.n	800197c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d123      	bne.n	80019d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	69b9      	ldr	r1, [r7, #24]
 80019cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0203 	and.w	r2, r3, #3
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80ae 	beq.w	8001b6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b5d      	ldr	r3, [pc, #372]	; (8001b8c <HAL_GPIO_Init+0x300>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a5c      	ldr	r2, [pc, #368]	; (8001b8c <HAL_GPIO_Init+0x300>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b5a      	ldr	r3, [pc, #360]	; (8001b8c <HAL_GPIO_Init+0x300>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2e:	4a58      	ldr	r2, [pc, #352]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4f      	ldr	r2, [pc, #316]	; (8001b94 <HAL_GPIO_Init+0x308>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d025      	beq.n	8001aa6 <HAL_GPIO_Init+0x21a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4e      	ldr	r2, [pc, #312]	; (8001b98 <HAL_GPIO_Init+0x30c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01f      	beq.n	8001aa2 <HAL_GPIO_Init+0x216>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4d      	ldr	r2, [pc, #308]	; (8001b9c <HAL_GPIO_Init+0x310>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d019      	beq.n	8001a9e <HAL_GPIO_Init+0x212>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ba0 <HAL_GPIO_Init+0x314>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d013      	beq.n	8001a9a <HAL_GPIO_Init+0x20e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4b      	ldr	r2, [pc, #300]	; (8001ba4 <HAL_GPIO_Init+0x318>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00d      	beq.n	8001a96 <HAL_GPIO_Init+0x20a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4a      	ldr	r2, [pc, #296]	; (8001ba8 <HAL_GPIO_Init+0x31c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x206>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a49      	ldr	r2, [pc, #292]	; (8001bac <HAL_GPIO_Init+0x320>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_GPIO_Init+0x202>
 8001a8a:	2306      	movs	r3, #6
 8001a8c:	e00c      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001a8e:	2307      	movs	r3, #7
 8001a90:	e00a      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001a92:	2305      	movs	r3, #5
 8001a94:	e008      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001a96:	2304      	movs	r3, #4
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e004      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e002      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	f002 0203 	and.w	r2, r2, #3
 8001aae:	0092      	lsls	r2, r2, #2
 8001ab0:	4093      	lsls	r3, r2
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab8:	4935      	ldr	r1, [pc, #212]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aea:	4a31      	ldr	r2, [pc, #196]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af0:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b14:	4a26      	ldr	r2, [pc, #152]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b1a:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b68:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3301      	adds	r3, #1
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	2b0f      	cmp	r3, #15
 8001b78:	f67f ae96 	bls.w	80018a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3724      	adds	r7, #36	; 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40013800 	.word	0x40013800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40020c00 	.word	0x40020c00
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40021400 	.word	0x40021400
 8001bac:	40021800 	.word	0x40021800
 8001bb0:	40013c00 	.word	0x40013c00

08001bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc4:	787b      	ldrb	r3, [r7, #1]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bd0:	e003      	b.n	8001bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	041a      	lsls	r2, r3, #16
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	619a      	str	r2, [r3, #24]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e12b      	b.n	8001e52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe fd9c 	bl	800074c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2224      	movs	r2, #36	; 0x24
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c4c:	f001 f99c 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8001c50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	4a81      	ldr	r2, [pc, #516]	; (8001e5c <HAL_I2C_Init+0x274>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d807      	bhi.n	8001c6c <HAL_I2C_Init+0x84>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4a80      	ldr	r2, [pc, #512]	; (8001e60 <HAL_I2C_Init+0x278>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	bf94      	ite	ls
 8001c64:	2301      	movls	r3, #1
 8001c66:	2300      	movhi	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	e006      	b.n	8001c7a <HAL_I2C_Init+0x92>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4a7d      	ldr	r2, [pc, #500]	; (8001e64 <HAL_I2C_Init+0x27c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	bf94      	ite	ls
 8001c74:	2301      	movls	r3, #1
 8001c76:	2300      	movhi	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0e7      	b.n	8001e52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4a78      	ldr	r2, [pc, #480]	; (8001e68 <HAL_I2C_Init+0x280>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	0c9b      	lsrs	r3, r3, #18
 8001c8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a6a      	ldr	r2, [pc, #424]	; (8001e5c <HAL_I2C_Init+0x274>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d802      	bhi.n	8001cbc <HAL_I2C_Init+0xd4>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	e009      	b.n	8001cd0 <HAL_I2C_Init+0xe8>
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	4a69      	ldr	r2, [pc, #420]	; (8001e6c <HAL_I2C_Init+0x284>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	099b      	lsrs	r3, r3, #6
 8001cce:	3301      	adds	r3, #1
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ce2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	495c      	ldr	r1, [pc, #368]	; (8001e5c <HAL_I2C_Init+0x274>)
 8001cec:	428b      	cmp	r3, r1
 8001cee:	d819      	bhi.n	8001d24 <HAL_I2C_Init+0x13c>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1e59      	subs	r1, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cfe:	1c59      	adds	r1, r3, #1
 8001d00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d04:	400b      	ands	r3, r1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00a      	beq.n	8001d20 <HAL_I2C_Init+0x138>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1e59      	subs	r1, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1e:	e051      	b.n	8001dc4 <HAL_I2C_Init+0x1dc>
 8001d20:	2304      	movs	r3, #4
 8001d22:	e04f      	b.n	8001dc4 <HAL_I2C_Init+0x1dc>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d111      	bne.n	8001d50 <HAL_I2C_Init+0x168>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1e58      	subs	r0, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	440b      	add	r3, r1
 8001d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf0c      	ite	eq
 8001d48:	2301      	moveq	r3, #1
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	e012      	b.n	8001d76 <HAL_I2C_Init+0x18e>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1e58      	subs	r0, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6859      	ldr	r1, [r3, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	0099      	lsls	r1, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d66:	3301      	adds	r3, #1
 8001d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_I2C_Init+0x196>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e022      	b.n	8001dc4 <HAL_I2C_Init+0x1dc>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10e      	bne.n	8001da4 <HAL_I2C_Init+0x1bc>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1e58      	subs	r0, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6859      	ldr	r1, [r3, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	440b      	add	r3, r1
 8001d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da2:	e00f      	b.n	8001dc4 <HAL_I2C_Init+0x1dc>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1e58      	subs	r0, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	0099      	lsls	r1, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	6809      	ldr	r1, [r1, #0]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69da      	ldr	r2, [r3, #28]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001df2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6911      	ldr	r1, [r2, #16]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68d2      	ldr	r2, [r2, #12]
 8001dfe:	4311      	orrs	r1, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	000186a0 	.word	0x000186a0
 8001e60:	001e847f 	.word	0x001e847f
 8001e64:	003d08ff 	.word	0x003d08ff
 8001e68:	431bde83 	.word	0x431bde83
 8001e6c:	10624dd3 	.word	0x10624dd3

08001e70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	817b      	strh	r3, [r7, #10]
 8001e80:	4613      	mov	r3, r2
 8001e82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff fbec 	bl	8001660 <HAL_GetTick>
 8001e88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	f040 80e0 	bne.w	8002058 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2319      	movs	r3, #25
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4970      	ldr	r1, [pc, #448]	; (8002064 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 fc58 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e0d3      	b.n	800205a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_I2C_Master_Transmit+0x50>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e0cc      	b.n	800205a <HAL_I2C_Master_Transmit+0x1ea>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d007      	beq.n	8001ee6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ef4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2221      	movs	r2, #33	; 0x21
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2210      	movs	r2, #16
 8001f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	893a      	ldrh	r2, [r7, #8]
 8001f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4a50      	ldr	r2, [pc, #320]	; (8002068 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f28:	8979      	ldrh	r1, [r7, #10]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	6a3a      	ldr	r2, [r7, #32]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 fac2 	bl	80024b8 <I2C_MasterRequestWrite>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e08d      	b.n	800205a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f54:	e066      	b.n	8002024 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	6a39      	ldr	r1, [r7, #32]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 fcd2 	bl	8002904 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00d      	beq.n	8001f82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d107      	bne.n	8001f7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e06b      	b.n	800205a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	781a      	ldrb	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d11b      	bne.n	8001ff8 <HAL_I2C_Master_Transmit+0x188>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d017      	beq.n	8001ff8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	6a39      	ldr	r1, [r7, #32]
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 fcc2 	bl	8002986 <I2C_WaitOnBTFFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00d      	beq.n	8002024 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	2b04      	cmp	r3, #4
 800200e:	d107      	bne.n	8002020 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e01a      	b.n	800205a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002028:	2b00      	cmp	r3, #0
 800202a:	d194      	bne.n	8001f56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800203a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	e000      	b.n	800205a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002058:	2302      	movs	r3, #2
  }
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	00100002 	.word	0x00100002
 8002068:	ffff0000 	.word	0xffff0000

0800206c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	; 0x30
 8002070:	af02      	add	r7, sp, #8
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	461a      	mov	r2, r3
 8002078:	460b      	mov	r3, r1
 800207a:	817b      	strh	r3, [r7, #10]
 800207c:	4613      	mov	r3, r2
 800207e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff faee 	bl	8001660 <HAL_GetTick>
 8002084:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b20      	cmp	r3, #32
 8002090:	f040 820b 	bne.w	80024aa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	2319      	movs	r3, #25
 800209a:	2201      	movs	r2, #1
 800209c:	497c      	ldr	r1, [pc, #496]	; (8002290 <HAL_I2C_Master_Receive+0x224>)
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 fb5a 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80020aa:	2302      	movs	r3, #2
 80020ac:	e1fe      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2C_Master_Receive+0x50>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e1f7      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d007      	beq.n	80020e2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2222      	movs	r2, #34	; 0x22
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2210      	movs	r2, #16
 80020fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	893a      	ldrh	r2, [r7, #8]
 8002112:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4a5c      	ldr	r2, [pc, #368]	; (8002294 <HAL_I2C_Master_Receive+0x228>)
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002124:	8979      	ldrh	r1, [r7, #10]
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fa46 	bl	80025bc <I2C_MasterRequestRead>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e1b8      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	2b00      	cmp	r3, #0
 8002140:	d113      	bne.n	800216a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	623b      	str	r3, [r7, #32]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	623b      	str	r3, [r7, #32]
 8002156:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e18c      	b.n	8002484 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	2b01      	cmp	r3, #1
 8002170:	d11b      	bne.n	80021aa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002180:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	e16c      	b.n	8002484 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d11b      	bne.n	80021ea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	e14c      	b.n	8002484 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002210:	e138      	b.n	8002484 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002216:	2b03      	cmp	r3, #3
 8002218:	f200 80f1 	bhi.w	80023fe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002220:	2b01      	cmp	r3, #1
 8002222:	d123      	bne.n	800226c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002226:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 fbed 	bl	8002a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e139      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	855a      	strh	r2, [r3, #42]	; 0x2a
 800226a:	e10b      	b.n	8002484 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002270:	2b02      	cmp	r3, #2
 8002272:	d14e      	bne.n	8002312 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	2200      	movs	r2, #0
 800227c:	4906      	ldr	r1, [pc, #24]	; (8002298 <HAL_I2C_Master_Receive+0x22c>)
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fa6a 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e10e      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
 800228e:	bf00      	nop
 8002290:	00100002 	.word	0x00100002
 8002294:	ffff0000 	.word	0xffff0000
 8002298:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002310:	e0b8      	b.n	8002484 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	2200      	movs	r2, #0
 800231a:	4966      	ldr	r1, [pc, #408]	; (80024b4 <HAL_I2C_Master_Receive+0x448>)
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fa1b 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0bf      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800233a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	2200      	movs	r2, #0
 8002376:	494f      	ldr	r1, [pc, #316]	; (80024b4 <HAL_I2C_Master_Receive+0x448>)
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f9ed 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e091      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023fc:	e042      	b.n	8002484 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fb00 	bl	8002a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e04c      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b04      	cmp	r3, #4
 8002450:	d118      	bne.n	8002484 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	2b00      	cmp	r3, #0
 800248a:	f47f aec2 	bne.w	8002212 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e000      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
  }
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3728      	adds	r7, #40	; 0x28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	00010004 	.word	0x00010004

080024b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	460b      	mov	r3, r1
 80024c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d006      	beq.n	80024e2 <I2C_MasterRequestWrite+0x2a>
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d003      	beq.n	80024e2 <I2C_MasterRequestWrite+0x2a>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024e0:	d108      	bne.n	80024f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e00b      	b.n	800250c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	2b12      	cmp	r3, #18
 80024fa:	d107      	bne.n	800250c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800250a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f91d 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00d      	beq.n	8002540 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002532:	d103      	bne.n	800253c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e035      	b.n	80025ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002548:	d108      	bne.n	800255c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800254a:	897b      	ldrh	r3, [r7, #10]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002558:	611a      	str	r2, [r3, #16]
 800255a:	e01b      	b.n	8002594 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800255c:	897b      	ldrh	r3, [r7, #10]
 800255e:	11db      	asrs	r3, r3, #7
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f003 0306 	and.w	r3, r3, #6
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f063 030f 	orn	r3, r3, #15
 800256c:	b2da      	uxtb	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	490e      	ldr	r1, [pc, #56]	; (80025b4 <I2C_MasterRequestWrite+0xfc>)
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f943 	bl	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e010      	b.n	80025ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800258a:	897b      	ldrh	r3, [r7, #10]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4907      	ldr	r1, [pc, #28]	; (80025b8 <I2C_MasterRequestWrite+0x100>)
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f933 	bl	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	00010008 	.word	0x00010008
 80025b8:	00010002 	.word	0x00010002

080025bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	460b      	mov	r3, r1
 80025ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d006      	beq.n	80025f6 <I2C_MasterRequestRead+0x3a>
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d003      	beq.n	80025f6 <I2C_MasterRequestRead+0x3a>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025f4:	d108      	bne.n	8002608 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e00b      	b.n	8002620 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	2b11      	cmp	r3, #17
 800260e:	d107      	bne.n	8002620 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f893 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00d      	beq.n	8002654 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002646:	d103      	bne.n	8002650 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e079      	b.n	8002748 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800265c:	d108      	bne.n	8002670 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800265e:	897b      	ldrh	r3, [r7, #10]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	611a      	str	r2, [r3, #16]
 800266e:	e05f      	b.n	8002730 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002670:	897b      	ldrh	r3, [r7, #10]
 8002672:	11db      	asrs	r3, r3, #7
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f003 0306 	and.w	r3, r3, #6
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f063 030f 	orn	r3, r3, #15
 8002680:	b2da      	uxtb	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4930      	ldr	r1, [pc, #192]	; (8002750 <I2C_MasterRequestRead+0x194>)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f8b9 	bl	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e054      	b.n	8002748 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4929      	ldr	r1, [pc, #164]	; (8002754 <I2C_MasterRequestRead+0x198>)
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f8a9 	bl	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e044      	b.n	8002748 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f831 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00d      	beq.n	8002718 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800270a:	d103      	bne.n	8002714 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e017      	b.n	8002748 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002718:	897b      	ldrh	r3, [r7, #10]
 800271a:	11db      	asrs	r3, r3, #7
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f003 0306 	and.w	r3, r3, #6
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f063 030e 	orn	r3, r3, #14
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4907      	ldr	r1, [pc, #28]	; (8002754 <I2C_MasterRequestRead+0x198>)
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f865 	bl	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	00010008 	.word	0x00010008
 8002754:	00010002 	.word	0x00010002

08002758 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002768:	e025      	b.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d021      	beq.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002772:	f7fe ff75 	bl	8001660 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d116      	bne.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e023      	b.n	80027fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	0c1b      	lsrs	r3, r3, #16
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10d      	bne.n	80027dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4013      	ands	r3, r2
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bf0c      	ite	eq
 80027d2:	2301      	moveq	r3, #1
 80027d4:	2300      	movne	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	e00c      	b.n	80027f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4013      	ands	r3, r2
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf0c      	ite	eq
 80027ee:	2301      	moveq	r3, #1
 80027f0:	2300      	movne	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d0b6      	beq.n	800276a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002814:	e051      	b.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002824:	d123      	bne.n	800286e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002834:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800283e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f043 0204 	orr.w	r2, r3, #4
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e046      	b.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d021      	beq.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002876:	f7fe fef3 	bl	8001660 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	429a      	cmp	r2, r3
 8002884:	d302      	bcc.n	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d116      	bne.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f043 0220 	orr.w	r2, r3, #32
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e020      	b.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d10c      	bne.n	80028de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4013      	ands	r3, r2
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bf14      	ite	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	2300      	moveq	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	e00b      	b.n	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	43da      	mvns	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	4013      	ands	r3, r2
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf14      	ite	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	2300      	moveq	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d18d      	bne.n	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002910:	e02d      	b.n	800296e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f8ce 	bl	8002ab4 <I2C_IsAcknowledgeFailed>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e02d      	b.n	800297e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d021      	beq.n	800296e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7fe fe99 	bl	8001660 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	d302      	bcc.n	8002940 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d116      	bne.n	800296e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e007      	b.n	800297e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d1ca      	bne.n	8002912 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002992:	e02d      	b.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f88d 	bl	8002ab4 <I2C_IsAcknowledgeFailed>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e02d      	b.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029aa:	d021      	beq.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ac:	f7fe fe58 	bl	8001660 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d302      	bcc.n	80029c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d116      	bne.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e007      	b.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d1ca      	bne.n	8002994 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a14:	e042      	b.n	8002a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d119      	bne.n	8002a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0210 	mvn.w	r2, #16
 8002a2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e029      	b.n	8002aac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a58:	f7fe fe02 	bl	8001660 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d302      	bcc.n	8002a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d116      	bne.n	8002a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e007      	b.n	8002aac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	d1b5      	bne.n	8002a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aca:	d11b      	bne.n	8002b04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ad4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f043 0204 	orr.w	r2, r3, #4
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b14:	b08f      	sub	sp, #60	; 0x3c
 8002b16:	af0a      	add	r7, sp, #40	; 0x28
 8002b18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e116      	b.n	8002d52 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fd fe94 	bl	800086c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2203      	movs	r2, #3
 8002b48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 fe53 	bl	800480e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	603b      	str	r3, [r7, #0]
 8002b6e:	687e      	ldr	r6, [r7, #4]
 8002b70:	466d      	mov	r5, sp
 8002b72:	f106 0410 	add.w	r4, r6, #16
 8002b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b82:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b86:	1d33      	adds	r3, r6, #4
 8002b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b8a:	6838      	ldr	r0, [r7, #0]
 8002b8c:	f001 fdde 	bl	800474c <USB_CoreInit>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0d7      	b.n	8002d52 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 fe41 	bl	8004830 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73fb      	strb	r3, [r7, #15]
 8002bb2:	e04a      	b.n	8002c4a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	333d      	adds	r3, #61	; 0x3d
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	333c      	adds	r3, #60	; 0x3c
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	b298      	uxth	r0, r3
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	3344      	adds	r3, #68	; 0x44
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3340      	adds	r3, #64	; 0x40
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3348      	adds	r3, #72	; 0x48
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	334c      	adds	r3, #76	; 0x4c
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3354      	adds	r3, #84	; 0x54
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	3301      	adds	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d3af      	bcc.n	8002bb4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]
 8002c58:	e044      	b.n	8002ce4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d3b5      	bcc.n	8002c5a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	687e      	ldr	r6, [r7, #4]
 8002cf6:	466d      	mov	r5, sp
 8002cf8:	f106 0410 	add.w	r4, r6, #16
 8002cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d08:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d0c:	1d33      	adds	r3, r6, #4
 8002d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d10:	6838      	ldr	r0, [r7, #0]
 8002d12:	f001 fdd9 	bl	80048c8 <USB_DevInit>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e014      	b.n	8002d52 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f80a 	bl	8002d5a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 ff97 	bl	8004c7e <USB_DevDisconnect>

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d5a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	f043 0303 	orr.w	r3, r3, #3
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0cc      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db8:	4b68      	ldr	r3, [pc, #416]	; (8002f5c <HAL_RCC_ClockConfig+0x1b8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d90c      	bls.n	8002de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b65      	ldr	r3, [pc, #404]	; (8002f5c <HAL_RCC_ClockConfig+0x1b8>)
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b63      	ldr	r3, [pc, #396]	; (8002f5c <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0b8      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d020      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df8:	4b59      	ldr	r3, [pc, #356]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	4a58      	ldr	r2, [pc, #352]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e10:	4b53      	ldr	r3, [pc, #332]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	4a52      	ldr	r2, [pc, #328]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e1c:	4b50      	ldr	r3, [pc, #320]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	494d      	ldr	r1, [pc, #308]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d044      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d119      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e07f      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d003      	beq.n	8002e62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e62:	4b3f      	ldr	r3, [pc, #252]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e06f      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e72:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e067      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e82:	4b37      	ldr	r3, [pc, #220]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f023 0203 	bic.w	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4934      	ldr	r1, [pc, #208]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e94:	f7fe fbe4 	bl	8001660 <HAL_GetTick>
 8002e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9a:	e00a      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e9c:	f7fe fbe0 	bl	8001660 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e04f      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb2:	4b2b      	ldr	r3, [pc, #172]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 020c 	and.w	r2, r3, #12
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d1eb      	bne.n	8002e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d20c      	bcs.n	8002eec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b22      	ldr	r3, [pc, #136]	; (8002f5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e032      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4916      	ldr	r1, [pc, #88]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	490e      	ldr	r1, [pc, #56]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f2a:	f000 fb7f 	bl	800362c <HAL_RCC_GetSysClockFreq>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	091b      	lsrs	r3, r3, #4
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	490a      	ldr	r1, [pc, #40]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3c:	5ccb      	ldrb	r3, [r1, r3]
 8002f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f42:	4a09      	ldr	r2, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_RCC_ClockConfig+0x1c8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fb44 	bl	80015d8 <HAL_InitTick>

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023c00 	.word	0x40023c00
 8002f60:	40023800 	.word	0x40023800
 8002f64:	08005eac 	.word	0x08005eac
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	2000001c 	.word	0x2000001c

08002f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000000 	.word	0x20000000

08002f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f8c:	f7ff fff0 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0a9b      	lsrs	r3, r3, #10
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4903      	ldr	r1, [pc, #12]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	08005ebc 	.word	0x08005ebc

08002fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fb4:	f7ff ffdc 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	0b5b      	lsrs	r3, r3, #13
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4903      	ldr	r1, [pc, #12]	; (8002fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	08005ebc 	.word	0x08005ebc

08002fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08c      	sub	sp, #48	; 0x30
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d010      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003010:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003016:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	496c      	ldr	r1, [pc, #432]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800302e:	2301      	movs	r3, #1
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d010      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800303e:	4b64      	ldr	r3, [pc, #400]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003044:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304c:	4960      	ldr	r1, [pc, #384]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800305c:	2301      	movs	r3, #1
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d017      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800306c:	4b58      	ldr	r3, [pc, #352]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800306e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003072:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4955      	ldr	r1, [pc, #340]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800308a:	d101      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800308c:	2301      	movs	r3, #1
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003098:	2301      	movs	r3, #1
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d017      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030a8:	4b49      	ldr	r3, [pc, #292]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b6:	4946      	ldr	r1, [pc, #280]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030c6:	d101      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80030c8:	2301      	movs	r3, #1
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80030d4:	2301      	movs	r3, #1
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 808a 	beq.w	80031fa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	4a38      	ldr	r2, [pc, #224]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f4:	6413      	str	r3, [r2, #64]	; 0x40
 80030f6:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003102:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a33      	ldr	r2, [pc, #204]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800310e:	f7fe faa7 	bl	8001660 <HAL_GetTick>
 8003112:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003116:	f7fe faa3 	bl	8001660 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e278      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003128:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003134:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d02f      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314c:	6a3a      	ldr	r2, [r7, #32]
 800314e:	429a      	cmp	r2, r3
 8003150:	d028      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003152:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800315c:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003162:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003168:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800316e:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d114      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800317a:	f7fe fa71 	bl	8001660 <HAL_GetTick>
 800317e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003180:	e00a      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003182:	f7fe fa6d 	bl	8001660 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003190:	4293      	cmp	r3, r2
 8003192:	d901      	bls.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e240      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003198:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0ee      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031b0:	d114      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80031c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c6:	4902      	ldr	r1, [pc, #8]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	608b      	str	r3, [r1, #8]
 80031cc:	e00c      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40007000 	.word	0x40007000
 80031d8:	42470e40 	.word	0x42470e40
 80031dc:	4b4a      	ldr	r3, [pc, #296]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a49      	ldr	r2, [pc, #292]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80031e6:	6093      	str	r3, [r2, #8]
 80031e8:	4b47      	ldr	r3, [pc, #284]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f4:	4944      	ldr	r1, [pc, #272]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b00      	cmp	r3, #0
 8003204:	d004      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800320c:	4b3f      	ldr	r3, [pc, #252]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800320e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800321c:	4b3a      	ldr	r3, [pc, #232]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800321e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003222:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322a:	4937      	ldr	r1, [pc, #220]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800323e:	4b32      	ldr	r3, [pc, #200]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003244:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324c:	492e      	ldr	r1, [pc, #184]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d011      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003260:	4b29      	ldr	r3, [pc, #164]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003266:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326e:	4926      	ldr	r1, [pc, #152]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800327e:	d101      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003280:	2301      	movs	r3, #1
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003290:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003296:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	491a      	ldr	r1, [pc, #104]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d011      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c0:	4911      	ldr	r1, [pc, #68]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d0:	d101      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80032d2:	2301      	movs	r3, #1
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d005      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e4:	f040 80ff 	bne.w	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032ee:	f7fe f9b7 	bl	8001660 <HAL_GetTick>
 80032f2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032f4:	e00e      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032f6:	f7fe f9b3 	bl	8001660 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d907      	bls.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e188      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003308:	40023800 	.word	0x40023800
 800330c:	424711e0 	.word	0x424711e0
 8003310:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003314:	4b7e      	ldr	r3, [pc, #504]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ea      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	2b00      	cmp	r3, #0
 8003332:	d009      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800333c:	2b00      	cmp	r3, #0
 800333e:	d028      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d124      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003348:	4b71      	ldr	r3, [pc, #452]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800334a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	3301      	adds	r3, #1
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800335a:	4b6d      	ldr	r3, [pc, #436]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800335c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003360:	0e1b      	lsrs	r3, r3, #24
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	019b      	lsls	r3, r3, #6
 8003372:	431a      	orrs	r2, r3
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	3b01      	subs	r3, #1
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	431a      	orrs	r2, r3
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	061b      	lsls	r3, r3, #24
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	071b      	lsls	r3, r3, #28
 800338a:	4961      	ldr	r1, [pc, #388]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d004      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d035      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033bc:	d130      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80033be:	4b54      	ldr	r3, [pc, #336]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	3301      	adds	r3, #1
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033d0:	4b4f      	ldr	r3, [pc, #316]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d6:	0f1b      	lsrs	r3, r3, #28
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	019b      	lsls	r3, r3, #6
 80033e8:	431a      	orrs	r2, r3
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	3b01      	subs	r3, #1
 80033f0:	041b      	lsls	r3, r3, #16
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	431a      	orrs	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	071b      	lsls	r3, r3, #28
 8003400:	4943      	ldr	r1, [pc, #268]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003408:	4b41      	ldr	r3, [pc, #260]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800340a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800340e:	f023 021f 	bic.w	r2, r3, #31
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	3b01      	subs	r3, #1
 8003418:	493d      	ldr	r1, [pc, #244]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003428:	2b00      	cmp	r3, #0
 800342a:	d029      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003434:	d124      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003436:	4b36      	ldr	r3, [pc, #216]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	3301      	adds	r3, #1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003448:	4b31      	ldr	r3, [pc, #196]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800344a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800344e:	0f1b      	lsrs	r3, r3, #28
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	019b      	lsls	r3, r3, #6
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	3b01      	subs	r3, #1
 800346a:	041b      	lsls	r3, r3, #16
 800346c:	431a      	orrs	r2, r3
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	431a      	orrs	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	071b      	lsls	r3, r3, #28
 8003478:	4925      	ldr	r1, [pc, #148]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003488:	2b00      	cmp	r3, #0
 800348a:	d016      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	019b      	lsls	r3, r3, #6
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	3b01      	subs	r3, #1
 80034a0:	041b      	lsls	r3, r3, #16
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	061b      	lsls	r3, r3, #24
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	071b      	lsls	r3, r3, #28
 80034b2:	4917      	ldr	r1, [pc, #92]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034ba:	4b16      	ldr	r3, [pc, #88]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80034bc:	2201      	movs	r2, #1
 80034be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034c0:	f7fe f8ce 	bl	8001660 <HAL_GetTick>
 80034c4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80034c8:	f7fe f8ca 	bl	8001660 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e09f      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	f040 8095 	bne.w	8003618 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034f4:	f7fe f8b4 	bl	8001660 <HAL_GetTick>
 80034f8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034fa:	e00f      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80034fc:	f7fe f8b0 	bl	8001660 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d908      	bls.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e085      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800
 8003514:	42470068 	.word	0x42470068
 8003518:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800351c:	4b41      	ldr	r3, [pc, #260]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003528:	d0e8      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003546:	2b00      	cmp	r3, #0
 8003548:	d02b      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354e:	2b00      	cmp	r3, #0
 8003550:	d127      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003552:	4b34      	ldr	r3, [pc, #208]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	0c1b      	lsrs	r3, r3, #16
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	3301      	adds	r3, #1
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699a      	ldr	r2, [r3, #24]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	019b      	lsls	r3, r3, #6
 800356e:	431a      	orrs	r2, r3
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	3b01      	subs	r3, #1
 8003576:	041b      	lsls	r3, r3, #16
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	4928      	ldr	r1, [pc, #160]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003588:	4b26      	ldr	r3, [pc, #152]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800358a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800358e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	3b01      	subs	r3, #1
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	4922      	ldr	r1, [pc, #136]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d01d      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x612>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035b6:	d118      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035b8:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	0e1b      	lsrs	r3, r3, #24
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	019b      	lsls	r3, r3, #6
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	3b01      	subs	r3, #1
 80035da:	041b      	lsls	r3, r3, #16
 80035dc:	431a      	orrs	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	061b      	lsls	r3, r3, #24
 80035e2:	4910      	ldr	r1, [pc, #64]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035ea:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035f0:	f7fe f836 	bl	8001660 <HAL_GetTick>
 80035f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80035f8:	f7fe f832 	bl	8001660 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e007      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003616:	d1ef      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3730      	adds	r7, #48	; 0x30
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800
 8003628:	42470070 	.word	0x42470070

0800362c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800362c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003630:	b0ae      	sub	sp, #184	; 0xb8
 8003632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003652:	4bcb      	ldr	r3, [pc, #812]	; (8003980 <HAL_RCC_GetSysClockFreq+0x354>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b0c      	cmp	r3, #12
 800365c:	f200 8206 	bhi.w	8003a6c <HAL_RCC_GetSysClockFreq+0x440>
 8003660:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	0800369d 	.word	0x0800369d
 800366c:	08003a6d 	.word	0x08003a6d
 8003670:	08003a6d 	.word	0x08003a6d
 8003674:	08003a6d 	.word	0x08003a6d
 8003678:	080036a5 	.word	0x080036a5
 800367c:	08003a6d 	.word	0x08003a6d
 8003680:	08003a6d 	.word	0x08003a6d
 8003684:	08003a6d 	.word	0x08003a6d
 8003688:	080036ad 	.word	0x080036ad
 800368c:	08003a6d 	.word	0x08003a6d
 8003690:	08003a6d 	.word	0x08003a6d
 8003694:	08003a6d 	.word	0x08003a6d
 8003698:	0800389d 	.word	0x0800389d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800369c:	4bb9      	ldr	r3, [pc, #740]	; (8003984 <HAL_RCC_GetSysClockFreq+0x358>)
 800369e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80036a2:	e1e7      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036a4:	4bb8      	ldr	r3, [pc, #736]	; (8003988 <HAL_RCC_GetSysClockFreq+0x35c>)
 80036a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036aa:	e1e3      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ac:	4bb4      	ldr	r3, [pc, #720]	; (8003980 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b8:	4bb1      	ldr	r3, [pc, #708]	; (8003980 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d071      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c4:	4bae      	ldr	r3, [pc, #696]	; (8003980 <HAL_RCC_GetSysClockFreq+0x354>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	099b      	lsrs	r3, r3, #6
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036d0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80036d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036ea:	4622      	mov	r2, r4
 80036ec:	462b      	mov	r3, r5
 80036ee:	f04f 0000 	mov.w	r0, #0
 80036f2:	f04f 0100 	mov.w	r1, #0
 80036f6:	0159      	lsls	r1, r3, #5
 80036f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036fc:	0150      	lsls	r0, r2, #5
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4621      	mov	r1, r4
 8003704:	1a51      	subs	r1, r2, r1
 8003706:	6439      	str	r1, [r7, #64]	; 0x40
 8003708:	4629      	mov	r1, r5
 800370a:	eb63 0301 	sbc.w	r3, r3, r1
 800370e:	647b      	str	r3, [r7, #68]	; 0x44
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800371c:	4649      	mov	r1, r9
 800371e:	018b      	lsls	r3, r1, #6
 8003720:	4641      	mov	r1, r8
 8003722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003726:	4641      	mov	r1, r8
 8003728:	018a      	lsls	r2, r1, #6
 800372a:	4641      	mov	r1, r8
 800372c:	1a51      	subs	r1, r2, r1
 800372e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003730:	4649      	mov	r1, r9
 8003732:	eb63 0301 	sbc.w	r3, r3, r1
 8003736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003744:	4649      	mov	r1, r9
 8003746:	00cb      	lsls	r3, r1, #3
 8003748:	4641      	mov	r1, r8
 800374a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800374e:	4641      	mov	r1, r8
 8003750:	00ca      	lsls	r2, r1, #3
 8003752:	4610      	mov	r0, r2
 8003754:	4619      	mov	r1, r3
 8003756:	4603      	mov	r3, r0
 8003758:	4622      	mov	r2, r4
 800375a:	189b      	adds	r3, r3, r2
 800375c:	633b      	str	r3, [r7, #48]	; 0x30
 800375e:	462b      	mov	r3, r5
 8003760:	460a      	mov	r2, r1
 8003762:	eb42 0303 	adc.w	r3, r2, r3
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003774:	4629      	mov	r1, r5
 8003776:	024b      	lsls	r3, r1, #9
 8003778:	4621      	mov	r1, r4
 800377a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800377e:	4621      	mov	r1, r4
 8003780:	024a      	lsls	r2, r1, #9
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800378a:	2200      	movs	r2, #0
 800378c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003790:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003794:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003798:	f7fc fd8a 	bl	80002b0 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4613      	mov	r3, r2
 80037a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037a6:	e067      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a8:	4b75      	ldr	r3, [pc, #468]	; (8003980 <HAL_RCC_GetSysClockFreq+0x354>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	099b      	lsrs	r3, r3, #6
 80037ae:	2200      	movs	r2, #0
 80037b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037b4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80037b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80037c2:	2300      	movs	r3, #0
 80037c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80037c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80037ca:	4622      	mov	r2, r4
 80037cc:	462b      	mov	r3, r5
 80037ce:	f04f 0000 	mov.w	r0, #0
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	0159      	lsls	r1, r3, #5
 80037d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037dc:	0150      	lsls	r0, r2, #5
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4621      	mov	r1, r4
 80037e4:	1a51      	subs	r1, r2, r1
 80037e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80037e8:	4629      	mov	r1, r5
 80037ea:	eb63 0301 	sbc.w	r3, r3, r1
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80037fc:	4649      	mov	r1, r9
 80037fe:	018b      	lsls	r3, r1, #6
 8003800:	4641      	mov	r1, r8
 8003802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003806:	4641      	mov	r1, r8
 8003808:	018a      	lsls	r2, r1, #6
 800380a:	4641      	mov	r1, r8
 800380c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003810:	4649      	mov	r1, r9
 8003812:	eb63 0b01 	sbc.w	fp, r3, r1
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003822:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003826:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800382a:	4692      	mov	sl, r2
 800382c:	469b      	mov	fp, r3
 800382e:	4623      	mov	r3, r4
 8003830:	eb1a 0303 	adds.w	r3, sl, r3
 8003834:	623b      	str	r3, [r7, #32]
 8003836:	462b      	mov	r3, r5
 8003838:	eb4b 0303 	adc.w	r3, fp, r3
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800384a:	4629      	mov	r1, r5
 800384c:	028b      	lsls	r3, r1, #10
 800384e:	4621      	mov	r1, r4
 8003850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003854:	4621      	mov	r1, r4
 8003856:	028a      	lsls	r2, r1, #10
 8003858:	4610      	mov	r0, r2
 800385a:	4619      	mov	r1, r3
 800385c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003860:	2200      	movs	r2, #0
 8003862:	673b      	str	r3, [r7, #112]	; 0x70
 8003864:	677a      	str	r2, [r7, #116]	; 0x74
 8003866:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800386a:	f7fc fd21 	bl	80002b0 <__aeabi_uldivmod>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4613      	mov	r3, r2
 8003874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003878:	4b41      	ldr	r3, [pc, #260]	; (8003980 <HAL_RCC_GetSysClockFreq+0x354>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	0c1b      	lsrs	r3, r3, #16
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	3301      	adds	r3, #1
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800388a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800388e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003892:	fbb2 f3f3 	udiv	r3, r2, r3
 8003896:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800389a:	e0eb      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800389c:	4b38      	ldr	r3, [pc, #224]	; (8003980 <HAL_RCC_GetSysClockFreq+0x354>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038a8:	4b35      	ldr	r3, [pc, #212]	; (8003980 <HAL_RCC_GetSysClockFreq+0x354>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d06b      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b4:	4b32      	ldr	r3, [pc, #200]	; (8003980 <HAL_RCC_GetSysClockFreq+0x354>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	099b      	lsrs	r3, r3, #6
 80038ba:	2200      	movs	r2, #0
 80038bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80038be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c6:	663b      	str	r3, [r7, #96]	; 0x60
 80038c8:	2300      	movs	r3, #0
 80038ca:	667b      	str	r3, [r7, #100]	; 0x64
 80038cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80038d0:	4622      	mov	r2, r4
 80038d2:	462b      	mov	r3, r5
 80038d4:	f04f 0000 	mov.w	r0, #0
 80038d8:	f04f 0100 	mov.w	r1, #0
 80038dc:	0159      	lsls	r1, r3, #5
 80038de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e2:	0150      	lsls	r0, r2, #5
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4621      	mov	r1, r4
 80038ea:	1a51      	subs	r1, r2, r1
 80038ec:	61b9      	str	r1, [r7, #24]
 80038ee:	4629      	mov	r1, r5
 80038f0:	eb63 0301 	sbc.w	r3, r3, r1
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003902:	4659      	mov	r1, fp
 8003904:	018b      	lsls	r3, r1, #6
 8003906:	4651      	mov	r1, sl
 8003908:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800390c:	4651      	mov	r1, sl
 800390e:	018a      	lsls	r2, r1, #6
 8003910:	4651      	mov	r1, sl
 8003912:	ebb2 0801 	subs.w	r8, r2, r1
 8003916:	4659      	mov	r1, fp
 8003918:	eb63 0901 	sbc.w	r9, r3, r1
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003928:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800392c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003930:	4690      	mov	r8, r2
 8003932:	4699      	mov	r9, r3
 8003934:	4623      	mov	r3, r4
 8003936:	eb18 0303 	adds.w	r3, r8, r3
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	462b      	mov	r3, r5
 800393e:	eb49 0303 	adc.w	r3, r9, r3
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003950:	4629      	mov	r1, r5
 8003952:	024b      	lsls	r3, r1, #9
 8003954:	4621      	mov	r1, r4
 8003956:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800395a:	4621      	mov	r1, r4
 800395c:	024a      	lsls	r2, r1, #9
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003966:	2200      	movs	r2, #0
 8003968:	65bb      	str	r3, [r7, #88]	; 0x58
 800396a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800396c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003970:	f7fc fc9e 	bl	80002b0 <__aeabi_uldivmod>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4613      	mov	r3, r2
 800397a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800397e:	e065      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x420>
 8003980:	40023800 	.word	0x40023800
 8003984:	00f42400 	.word	0x00f42400
 8003988:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800398c:	4b3d      	ldr	r3, [pc, #244]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x458>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	2200      	movs	r2, #0
 8003994:	4618      	mov	r0, r3
 8003996:	4611      	mov	r1, r2
 8003998:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800399c:	653b      	str	r3, [r7, #80]	; 0x50
 800399e:	2300      	movs	r3, #0
 80039a0:	657b      	str	r3, [r7, #84]	; 0x54
 80039a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80039a6:	4642      	mov	r2, r8
 80039a8:	464b      	mov	r3, r9
 80039aa:	f04f 0000 	mov.w	r0, #0
 80039ae:	f04f 0100 	mov.w	r1, #0
 80039b2:	0159      	lsls	r1, r3, #5
 80039b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039b8:	0150      	lsls	r0, r2, #5
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4641      	mov	r1, r8
 80039c0:	1a51      	subs	r1, r2, r1
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	4649      	mov	r1, r9
 80039c6:	eb63 0301 	sbc.w	r3, r3, r1
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80039d8:	4659      	mov	r1, fp
 80039da:	018b      	lsls	r3, r1, #6
 80039dc:	4651      	mov	r1, sl
 80039de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039e2:	4651      	mov	r1, sl
 80039e4:	018a      	lsls	r2, r1, #6
 80039e6:	4651      	mov	r1, sl
 80039e8:	1a54      	subs	r4, r2, r1
 80039ea:	4659      	mov	r1, fp
 80039ec:	eb63 0501 	sbc.w	r5, r3, r1
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	00eb      	lsls	r3, r5, #3
 80039fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039fe:	00e2      	lsls	r2, r4, #3
 8003a00:	4614      	mov	r4, r2
 8003a02:	461d      	mov	r5, r3
 8003a04:	4643      	mov	r3, r8
 8003a06:	18e3      	adds	r3, r4, r3
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	eb45 0303 	adc.w	r3, r5, r3
 8003a10:	607b      	str	r3, [r7, #4]
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a1e:	4629      	mov	r1, r5
 8003a20:	028b      	lsls	r3, r1, #10
 8003a22:	4621      	mov	r1, r4
 8003a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a28:	4621      	mov	r1, r4
 8003a2a:	028a      	lsls	r2, r1, #10
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4619      	mov	r1, r3
 8003a30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a34:	2200      	movs	r2, #0
 8003a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a38:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003a3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a3e:	f7fc fc37 	bl	80002b0 <__aeabi_uldivmod>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4613      	mov	r3, r2
 8003a48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x458>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	0f1b      	lsrs	r3, r3, #28
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a6a:	e003      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	37b8      	adds	r7, #184	; 0xb8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	00f42400 	.word	0x00f42400

08003a8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e28d      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8083 	beq.w	8003bb2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003aac:	4b94      	ldr	r3, [pc, #592]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d019      	beq.n	8003aec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ab8:	4b91      	ldr	r3, [pc, #580]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d106      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ac4:	4b8e      	ldr	r3, [pc, #568]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad0:	d00c      	beq.n	8003aec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ad2:	4b8b      	ldr	r3, [pc, #556]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ada:	2b0c      	cmp	r3, #12
 8003adc:	d112      	bne.n	8003b04 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ade:	4b88      	ldr	r3, [pc, #544]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aea:	d10b      	bne.n	8003b04 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aec:	4b84      	ldr	r3, [pc, #528]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d05b      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x124>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d157      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e25a      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0c:	d106      	bne.n	8003b1c <HAL_RCC_OscConfig+0x90>
 8003b0e:	4b7c      	ldr	r3, [pc, #496]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a7b      	ldr	r2, [pc, #492]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e01d      	b.n	8003b58 <HAL_RCC_OscConfig+0xcc>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCC_OscConfig+0xb4>
 8003b26:	4b76      	ldr	r3, [pc, #472]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a75      	ldr	r2, [pc, #468]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	4b73      	ldr	r3, [pc, #460]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a72      	ldr	r2, [pc, #456]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e00b      	b.n	8003b58 <HAL_RCC_OscConfig+0xcc>
 8003b40:	4b6f      	ldr	r3, [pc, #444]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a6e      	ldr	r2, [pc, #440]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	4b6c      	ldr	r3, [pc, #432]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a6b      	ldr	r2, [pc, #428]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d013      	beq.n	8003b88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fd fd7e 	bl	8001660 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b68:	f7fd fd7a 	bl	8001660 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e21f      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7a:	4b61      	ldr	r3, [pc, #388]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0xdc>
 8003b86:	e014      	b.n	8003bb2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fd fd6a 	bl	8001660 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b90:	f7fd fd66 	bl	8001660 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	; 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e20b      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba2:	4b57      	ldr	r3, [pc, #348]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x104>
 8003bae:	e000      	b.n	8003bb2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d06f      	beq.n	8003c9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003bbe:	4b50      	ldr	r3, [pc, #320]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d017      	beq.n	8003bfa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003bca:	4b4d      	ldr	r3, [pc, #308]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d105      	bne.n	8003be2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003bd6:	4b4a      	ldr	r3, [pc, #296]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00b      	beq.n	8003bfa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be2:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	d11c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bee:	4b44      	ldr	r3, [pc, #272]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d116      	bne.n	8003c28 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfa:	4b41      	ldr	r3, [pc, #260]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_RCC_OscConfig+0x186>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e1d3      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c12:	4b3b      	ldr	r3, [pc, #236]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4937      	ldr	r1, [pc, #220]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c26:	e03a      	b.n	8003c9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d020      	beq.n	8003c72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c30:	4b34      	ldr	r3, [pc, #208]	; (8003d04 <HAL_RCC_OscConfig+0x278>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fd fd13 	bl	8001660 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c3e:	f7fd fd0f 	bl	8001660 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e1b4      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c50:	4b2b      	ldr	r3, [pc, #172]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0f0      	beq.n	8003c3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5c:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4925      	ldr	r1, [pc, #148]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	600b      	str	r3, [r1, #0]
 8003c70:	e015      	b.n	8003c9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c72:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <HAL_RCC_OscConfig+0x278>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fd fcf2 	bl	8001660 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c80:	f7fd fcee 	bl	8001660 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e193      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c92:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d036      	beq.n	8003d18 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d016      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb2:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fd fcd2 	bl	8001660 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc0:	f7fd fcce 	bl	8001660 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e173      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x234>
 8003cde:	e01b      	b.n	8003d18 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce0:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce6:	f7fd fcbb 	bl	8001660 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cec:	e00e      	b.n	8003d0c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cee:	f7fd fcb7 	bl	8001660 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d907      	bls.n	8003d0c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e15c      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
 8003d00:	40023800 	.word	0x40023800
 8003d04:	42470000 	.word	0x42470000
 8003d08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d0c:	4b8a      	ldr	r3, [pc, #552]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1ea      	bne.n	8003cee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8097 	beq.w	8003e54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d26:	2300      	movs	r3, #0
 8003d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d2a:	4b83      	ldr	r3, [pc, #524]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10f      	bne.n	8003d56 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	4b7f      	ldr	r3, [pc, #508]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	4a7e      	ldr	r2, [pc, #504]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d44:	6413      	str	r3, [r2, #64]	; 0x40
 8003d46:	4b7c      	ldr	r3, [pc, #496]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d52:	2301      	movs	r3, #1
 8003d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d56:	4b79      	ldr	r3, [pc, #484]	; (8003f3c <HAL_RCC_OscConfig+0x4b0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d118      	bne.n	8003d94 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d62:	4b76      	ldr	r3, [pc, #472]	; (8003f3c <HAL_RCC_OscConfig+0x4b0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a75      	ldr	r2, [pc, #468]	; (8003f3c <HAL_RCC_OscConfig+0x4b0>)
 8003d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d6e:	f7fd fc77 	bl	8001660 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d76:	f7fd fc73 	bl	8001660 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e118      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d88:	4b6c      	ldr	r3, [pc, #432]	; (8003f3c <HAL_RCC_OscConfig+0x4b0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d106      	bne.n	8003daa <HAL_RCC_OscConfig+0x31e>
 8003d9c:	4b66      	ldr	r3, [pc, #408]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	4a65      	ldr	r2, [pc, #404]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6713      	str	r3, [r2, #112]	; 0x70
 8003da8:	e01c      	b.n	8003de4 <HAL_RCC_OscConfig+0x358>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b05      	cmp	r3, #5
 8003db0:	d10c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x340>
 8003db2:	4b61      	ldr	r3, [pc, #388]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	4a60      	ldr	r2, [pc, #384]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003db8:	f043 0304 	orr.w	r3, r3, #4
 8003dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbe:	4b5e      	ldr	r3, [pc, #376]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	4a5d      	ldr	r2, [pc, #372]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dca:	e00b      	b.n	8003de4 <HAL_RCC_OscConfig+0x358>
 8003dcc:	4b5a      	ldr	r3, [pc, #360]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	4a59      	ldr	r2, [pc, #356]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003dd2:	f023 0301 	bic.w	r3, r3, #1
 8003dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd8:	4b57      	ldr	r3, [pc, #348]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	4a56      	ldr	r2, [pc, #344]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003dde:	f023 0304 	bic.w	r3, r3, #4
 8003de2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d015      	beq.n	8003e18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dec:	f7fd fc38 	bl	8001660 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df4:	f7fd fc34 	bl	8001660 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e0d7      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0a:	4b4b      	ldr	r3, [pc, #300]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0ee      	beq.n	8003df4 <HAL_RCC_OscConfig+0x368>
 8003e16:	e014      	b.n	8003e42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e18:	f7fd fc22 	bl	8001660 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e1e:	e00a      	b.n	8003e36 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e20:	f7fd fc1e 	bl	8001660 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e0c1      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e36:	4b40      	ldr	r3, [pc, #256]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1ee      	bne.n	8003e20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d105      	bne.n	8003e54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e48:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	4a3a      	ldr	r2, [pc, #232]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80ad 	beq.w	8003fb8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e5e:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d060      	beq.n	8003f2c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d145      	bne.n	8003efe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e72:	4b33      	ldr	r3, [pc, #204]	; (8003f40 <HAL_RCC_OscConfig+0x4b4>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fd fbf2 	bl	8001660 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fd fbee 	bl	8001660 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e093      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e92:	4b29      	ldr	r3, [pc, #164]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69da      	ldr	r2, [r3, #28]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	019b      	lsls	r3, r3, #6
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	085b      	lsrs	r3, r3, #1
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	061b      	lsls	r3, r3, #24
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	071b      	lsls	r3, r3, #28
 8003eca:	491b      	ldr	r1, [pc, #108]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <HAL_RCC_OscConfig+0x4b4>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed6:	f7fd fbc3 	bl	8001660 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ede:	f7fd fbbf 	bl	8001660 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e064      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef0:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x452>
 8003efc:	e05c      	b.n	8003fb8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efe:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <HAL_RCC_OscConfig+0x4b4>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f04:	f7fd fbac 	bl	8001660 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f0c:	f7fd fba8 	bl	8001660 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e04d      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCC_OscConfig+0x4ac>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x480>
 8003f2a:	e045      	b.n	8003fb8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d107      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e040      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	40007000 	.word	0x40007000
 8003f40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f44:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <HAL_RCC_OscConfig+0x538>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d030      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d129      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d122      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f74:	4013      	ands	r3, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d119      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d10f      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d107      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800

08003fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e03f      	b.n	800405a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fc fbf4 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800400a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f929 	bl	8004264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004030:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004040:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b08a      	sub	sp, #40	; 0x28
 8004066:	af02      	add	r7, sp, #8
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	4613      	mov	r3, r2
 8004070:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b20      	cmp	r3, #32
 8004080:	d17c      	bne.n	800417c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_UART_Transmit+0x2c>
 8004088:	88fb      	ldrh	r3, [r7, #6]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e075      	b.n	800417e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_UART_Transmit+0x3e>
 800409c:	2302      	movs	r3, #2
 800409e:	e06e      	b.n	800417e <HAL_UART_Transmit+0x11c>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2221      	movs	r2, #33	; 0x21
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040b6:	f7fd fad3 	bl	8001660 <HAL_GetTick>
 80040ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d0:	d108      	bne.n	80040e4 <HAL_UART_Transmit+0x82>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d104      	bne.n	80040e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	e003      	b.n	80040ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040f4:	e02a      	b.n	800414c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2200      	movs	r2, #0
 80040fe:	2180      	movs	r1, #128	; 0x80
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f840 	bl	8004186 <UART_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e036      	b.n	800417e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10b      	bne.n	800412e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004124:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	3302      	adds	r3, #2
 800412a:	61bb      	str	r3, [r7, #24]
 800412c:	e007      	b.n	800413e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	781a      	ldrb	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	3301      	adds	r3, #1
 800413c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1cf      	bne.n	80040f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2200      	movs	r2, #0
 800415e:	2140      	movs	r1, #64	; 0x40
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f810 	bl	8004186 <UART_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e006      	b.n	800417e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	e000      	b.n	800417e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800417c:	2302      	movs	r3, #2
  }
}
 800417e:	4618      	mov	r0, r3
 8004180:	3720      	adds	r7, #32
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b090      	sub	sp, #64	; 0x40
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	4613      	mov	r3, r2
 8004194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004196:	e050      	b.n	800423a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800419a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419e:	d04c      	beq.n	800423a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80041a6:	f7fd fa5b 	bl	8001660 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d241      	bcs.n	800423a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041d6:	637a      	str	r2, [r7, #52]	; 0x34
 80041d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e5      	bne.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3314      	adds	r3, #20
 80041f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	e853 3f00 	ldrex	r3, [r3]
 80041f8:	613b      	str	r3, [r7, #16]
   return(result);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f023 0301 	bic.w	r3, r3, #1
 8004200:	63bb      	str	r3, [r7, #56]	; 0x38
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3314      	adds	r3, #20
 8004208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800420a:	623a      	str	r2, [r7, #32]
 800420c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	69f9      	ldr	r1, [r7, #28]
 8004210:	6a3a      	ldr	r2, [r7, #32]
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	61bb      	str	r3, [r7, #24]
   return(result);
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e5      	bne.n	80041ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e00f      	b.n	800425a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4013      	ands	r3, r2
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	429a      	cmp	r2, r3
 8004248:	bf0c      	ite	eq
 800424a:	2301      	moveq	r3, #1
 800424c:	2300      	movne	r3, #0
 800424e:	b2db      	uxtb	r3, r3
 8004250:	461a      	mov	r2, r3
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	429a      	cmp	r2, r3
 8004256:	d09f      	beq.n	8004198 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3740      	adds	r7, #64	; 0x40
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004268:	b0c0      	sub	sp, #256	; 0x100
 800426a:	af00      	add	r7, sp, #0
 800426c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004280:	68d9      	ldr	r1, [r3, #12]
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	ea40 0301 	orr.w	r3, r0, r1
 800428c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	431a      	orrs	r2, r3
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042bc:	f021 010c 	bic.w	r1, r1, #12
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042ca:	430b      	orrs	r3, r1
 80042cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042de:	6999      	ldr	r1, [r3, #24]
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	ea40 0301 	orr.w	r3, r0, r1
 80042ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4b8f      	ldr	r3, [pc, #572]	; (8004530 <UART_SetConfig+0x2cc>)
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d005      	beq.n	8004304 <UART_SetConfig+0xa0>
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4b8d      	ldr	r3, [pc, #564]	; (8004534 <UART_SetConfig+0x2d0>)
 8004300:	429a      	cmp	r2, r3
 8004302:	d104      	bne.n	800430e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004304:	f7fe fe54 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 8004308:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800430c:	e003      	b.n	8004316 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800430e:	f7fe fe3b 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8004312:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004320:	f040 810c 	bne.w	800453c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004328:	2200      	movs	r2, #0
 800432a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800432e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004332:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004336:	4622      	mov	r2, r4
 8004338:	462b      	mov	r3, r5
 800433a:	1891      	adds	r1, r2, r2
 800433c:	65b9      	str	r1, [r7, #88]	; 0x58
 800433e:	415b      	adcs	r3, r3
 8004340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004346:	4621      	mov	r1, r4
 8004348:	eb12 0801 	adds.w	r8, r2, r1
 800434c:	4629      	mov	r1, r5
 800434e:	eb43 0901 	adc.w	r9, r3, r1
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800435e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004366:	4690      	mov	r8, r2
 8004368:	4699      	mov	r9, r3
 800436a:	4623      	mov	r3, r4
 800436c:	eb18 0303 	adds.w	r3, r8, r3
 8004370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004374:	462b      	mov	r3, r5
 8004376:	eb49 0303 	adc.w	r3, r9, r3
 800437a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800438a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800438e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004392:	460b      	mov	r3, r1
 8004394:	18db      	adds	r3, r3, r3
 8004396:	653b      	str	r3, [r7, #80]	; 0x50
 8004398:	4613      	mov	r3, r2
 800439a:	eb42 0303 	adc.w	r3, r2, r3
 800439e:	657b      	str	r3, [r7, #84]	; 0x54
 80043a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043a8:	f7fb ff82 	bl	80002b0 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4b61      	ldr	r3, [pc, #388]	; (8004538 <UART_SetConfig+0x2d4>)
 80043b2:	fba3 2302 	umull	r2, r3, r3, r2
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	011c      	lsls	r4, r3, #4
 80043ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	1891      	adds	r1, r2, r2
 80043d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80043d4:	415b      	adcs	r3, r3
 80043d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043dc:	4641      	mov	r1, r8
 80043de:	eb12 0a01 	adds.w	sl, r2, r1
 80043e2:	4649      	mov	r1, r9
 80043e4:	eb43 0b01 	adc.w	fp, r3, r1
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043fc:	4692      	mov	sl, r2
 80043fe:	469b      	mov	fp, r3
 8004400:	4643      	mov	r3, r8
 8004402:	eb1a 0303 	adds.w	r3, sl, r3
 8004406:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800440a:	464b      	mov	r3, r9
 800440c:	eb4b 0303 	adc.w	r3, fp, r3
 8004410:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004420:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004424:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004428:	460b      	mov	r3, r1
 800442a:	18db      	adds	r3, r3, r3
 800442c:	643b      	str	r3, [r7, #64]	; 0x40
 800442e:	4613      	mov	r3, r2
 8004430:	eb42 0303 	adc.w	r3, r2, r3
 8004434:	647b      	str	r3, [r7, #68]	; 0x44
 8004436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800443a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800443e:	f7fb ff37 	bl	80002b0 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4611      	mov	r1, r2
 8004448:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <UART_SetConfig+0x2d4>)
 800444a:	fba3 2301 	umull	r2, r3, r3, r1
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	2264      	movs	r2, #100	; 0x64
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	1acb      	subs	r3, r1, r3
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800445e:	4b36      	ldr	r3, [pc, #216]	; (8004538 <UART_SetConfig+0x2d4>)
 8004460:	fba3 2302 	umull	r2, r3, r3, r2
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800446c:	441c      	add	r4, r3
 800446e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004472:	2200      	movs	r2, #0
 8004474:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004478:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800447c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004480:	4642      	mov	r2, r8
 8004482:	464b      	mov	r3, r9
 8004484:	1891      	adds	r1, r2, r2
 8004486:	63b9      	str	r1, [r7, #56]	; 0x38
 8004488:	415b      	adcs	r3, r3
 800448a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800448c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004490:	4641      	mov	r1, r8
 8004492:	1851      	adds	r1, r2, r1
 8004494:	6339      	str	r1, [r7, #48]	; 0x30
 8004496:	4649      	mov	r1, r9
 8004498:	414b      	adcs	r3, r1
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044a8:	4659      	mov	r1, fp
 80044aa:	00cb      	lsls	r3, r1, #3
 80044ac:	4651      	mov	r1, sl
 80044ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044b2:	4651      	mov	r1, sl
 80044b4:	00ca      	lsls	r2, r1, #3
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	4642      	mov	r2, r8
 80044be:	189b      	adds	r3, r3, r2
 80044c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044c4:	464b      	mov	r3, r9
 80044c6:	460a      	mov	r2, r1
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044e4:	460b      	mov	r3, r1
 80044e6:	18db      	adds	r3, r3, r3
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ea:	4613      	mov	r3, r2
 80044ec:	eb42 0303 	adc.w	r3, r2, r3
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044fa:	f7fb fed9 	bl	80002b0 <__aeabi_uldivmod>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <UART_SetConfig+0x2d4>)
 8004504:	fba3 1302 	umull	r1, r3, r3, r2
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	2164      	movs	r1, #100	; 0x64
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	3332      	adds	r3, #50	; 0x32
 8004516:	4a08      	ldr	r2, [pc, #32]	; (8004538 <UART_SetConfig+0x2d4>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	f003 0207 	and.w	r2, r3, #7
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4422      	add	r2, r4
 800452a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800452c:	e105      	b.n	800473a <UART_SetConfig+0x4d6>
 800452e:	bf00      	nop
 8004530:	40011000 	.word	0x40011000
 8004534:	40011400 	.word	0x40011400
 8004538:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800453c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004540:	2200      	movs	r2, #0
 8004542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004546:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800454a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800454e:	4642      	mov	r2, r8
 8004550:	464b      	mov	r3, r9
 8004552:	1891      	adds	r1, r2, r2
 8004554:	6239      	str	r1, [r7, #32]
 8004556:	415b      	adcs	r3, r3
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
 800455a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800455e:	4641      	mov	r1, r8
 8004560:	1854      	adds	r4, r2, r1
 8004562:	4649      	mov	r1, r9
 8004564:	eb43 0501 	adc.w	r5, r3, r1
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	00eb      	lsls	r3, r5, #3
 8004572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004576:	00e2      	lsls	r2, r4, #3
 8004578:	4614      	mov	r4, r2
 800457a:	461d      	mov	r5, r3
 800457c:	4643      	mov	r3, r8
 800457e:	18e3      	adds	r3, r4, r3
 8004580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004584:	464b      	mov	r3, r9
 8004586:	eb45 0303 	adc.w	r3, r5, r3
 800458a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800459a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045aa:	4629      	mov	r1, r5
 80045ac:	008b      	lsls	r3, r1, #2
 80045ae:	4621      	mov	r1, r4
 80045b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b4:	4621      	mov	r1, r4
 80045b6:	008a      	lsls	r2, r1, #2
 80045b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045bc:	f7fb fe78 	bl	80002b0 <__aeabi_uldivmod>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4b60      	ldr	r3, [pc, #384]	; (8004748 <UART_SetConfig+0x4e4>)
 80045c6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	011c      	lsls	r4, r3, #4
 80045ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	1891      	adds	r1, r2, r2
 80045e6:	61b9      	str	r1, [r7, #24]
 80045e8:	415b      	adcs	r3, r3
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f0:	4641      	mov	r1, r8
 80045f2:	1851      	adds	r1, r2, r1
 80045f4:	6139      	str	r1, [r7, #16]
 80045f6:	4649      	mov	r1, r9
 80045f8:	414b      	adcs	r3, r1
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004608:	4659      	mov	r1, fp
 800460a:	00cb      	lsls	r3, r1, #3
 800460c:	4651      	mov	r1, sl
 800460e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004612:	4651      	mov	r1, sl
 8004614:	00ca      	lsls	r2, r1, #3
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	4603      	mov	r3, r0
 800461c:	4642      	mov	r2, r8
 800461e:	189b      	adds	r3, r3, r2
 8004620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004624:	464b      	mov	r3, r9
 8004626:	460a      	mov	r2, r1
 8004628:	eb42 0303 	adc.w	r3, r2, r3
 800462c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	67bb      	str	r3, [r7, #120]	; 0x78
 800463a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004648:	4649      	mov	r1, r9
 800464a:	008b      	lsls	r3, r1, #2
 800464c:	4641      	mov	r1, r8
 800464e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004652:	4641      	mov	r1, r8
 8004654:	008a      	lsls	r2, r1, #2
 8004656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800465a:	f7fb fe29 	bl	80002b0 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4b39      	ldr	r3, [pc, #228]	; (8004748 <UART_SetConfig+0x4e4>)
 8004664:	fba3 1302 	umull	r1, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	2164      	movs	r1, #100	; 0x64
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	3332      	adds	r3, #50	; 0x32
 8004676:	4a34      	ldr	r2, [pc, #208]	; (8004748 <UART_SetConfig+0x4e4>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004682:	441c      	add	r4, r3
 8004684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004688:	2200      	movs	r2, #0
 800468a:	673b      	str	r3, [r7, #112]	; 0x70
 800468c:	677a      	str	r2, [r7, #116]	; 0x74
 800468e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004692:	4642      	mov	r2, r8
 8004694:	464b      	mov	r3, r9
 8004696:	1891      	adds	r1, r2, r2
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	415b      	adcs	r3, r3
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046a2:	4641      	mov	r1, r8
 80046a4:	1851      	adds	r1, r2, r1
 80046a6:	6039      	str	r1, [r7, #0]
 80046a8:	4649      	mov	r1, r9
 80046aa:	414b      	adcs	r3, r1
 80046ac:	607b      	str	r3, [r7, #4]
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046ba:	4659      	mov	r1, fp
 80046bc:	00cb      	lsls	r3, r1, #3
 80046be:	4651      	mov	r1, sl
 80046c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046c4:	4651      	mov	r1, sl
 80046c6:	00ca      	lsls	r2, r1, #3
 80046c8:	4610      	mov	r0, r2
 80046ca:	4619      	mov	r1, r3
 80046cc:	4603      	mov	r3, r0
 80046ce:	4642      	mov	r2, r8
 80046d0:	189b      	adds	r3, r3, r2
 80046d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046d4:	464b      	mov	r3, r9
 80046d6:	460a      	mov	r2, r1
 80046d8:	eb42 0303 	adc.w	r3, r2, r3
 80046dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	663b      	str	r3, [r7, #96]	; 0x60
 80046e8:	667a      	str	r2, [r7, #100]	; 0x64
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046f6:	4649      	mov	r1, r9
 80046f8:	008b      	lsls	r3, r1, #2
 80046fa:	4641      	mov	r1, r8
 80046fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004700:	4641      	mov	r1, r8
 8004702:	008a      	lsls	r2, r1, #2
 8004704:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004708:	f7fb fdd2 	bl	80002b0 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <UART_SetConfig+0x4e4>)
 8004712:	fba3 1302 	umull	r1, r3, r3, r2
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	2164      	movs	r1, #100	; 0x64
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	3332      	adds	r3, #50	; 0x32
 8004724:	4a08      	ldr	r2, [pc, #32]	; (8004748 <UART_SetConfig+0x4e4>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	f003 020f 	and.w	r2, r3, #15
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4422      	add	r2, r4
 8004738:	609a      	str	r2, [r3, #8]
}
 800473a:	bf00      	nop
 800473c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004740:	46bd      	mov	sp, r7
 8004742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004746:	bf00      	nop
 8004748:	51eb851f 	.word	0x51eb851f

0800474c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800474c:	b084      	sub	sp, #16
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	f107 001c 	add.w	r0, r7, #28
 800475a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	2b01      	cmp	r3, #1
 8004762:	d122      	bne.n	80047aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800478c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d105      	bne.n	800479e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fa9c 	bl	8004cdc <USB_CoreReset>
 80047a4:	4603      	mov	r3, r0
 80047a6:	73fb      	strb	r3, [r7, #15]
 80047a8:	e01a      	b.n	80047e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fa90 	bl	8004cdc <USB_CoreReset>
 80047bc:	4603      	mov	r3, r0
 80047be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
 80047d2:	e005      	b.n	80047e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d10b      	bne.n	80047fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f043 0206 	orr.w	r2, r3, #6
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f043 0220 	orr.w	r2, r3, #32
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800480a:	b004      	add	sp, #16
 800480c:	4770      	bx	lr

0800480e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f023 0201 	bic.w	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d115      	bne.n	800487e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800485e:	2001      	movs	r0, #1
 8004860:	f7fc ff0a 	bl	8001678 <HAL_Delay>
      ms++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3301      	adds	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa28 	bl	8004cc0 <USB_GetMode>
 8004870:	4603      	mov	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d01e      	beq.n	80048b4 <USB_SetCurrentMode+0x84>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b31      	cmp	r3, #49	; 0x31
 800487a:	d9f0      	bls.n	800485e <USB_SetCurrentMode+0x2e>
 800487c:	e01a      	b.n	80048b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d115      	bne.n	80048b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004890:	2001      	movs	r0, #1
 8004892:	f7fc fef1 	bl	8001678 <HAL_Delay>
      ms++;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3301      	adds	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fa0f 	bl	8004cc0 <USB_GetMode>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <USB_SetCurrentMode+0x84>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b31      	cmp	r3, #49	; 0x31
 80048ac:	d9f0      	bls.n	8004890 <USB_SetCurrentMode+0x60>
 80048ae:	e001      	b.n	80048b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e005      	b.n	80048c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b32      	cmp	r3, #50	; 0x32
 80048b8:	d101      	bne.n	80048be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048c8:	b084      	sub	sp, #16
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b086      	sub	sp, #24
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	e009      	b.n	80048fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	3340      	adds	r3, #64	; 0x40
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	2200      	movs	r2, #0
 80048f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	3301      	adds	r3, #1
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b0e      	cmp	r3, #14
 8004900:	d9f2      	bls.n	80048e8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004904:	2b00      	cmp	r3, #0
 8004906:	d11c      	bne.n	8004942 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004916:	f043 0302 	orr.w	r3, r3, #2
 800491a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e005      	b.n	800494e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004946:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004954:	461a      	mov	r2, r3
 8004956:	2300      	movs	r3, #0
 8004958:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004960:	4619      	mov	r1, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004968:	461a      	mov	r2, r3
 800496a:	680b      	ldr	r3, [r1, #0]
 800496c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	2b01      	cmp	r3, #1
 8004972:	d10c      	bne.n	800498e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	2b00      	cmp	r3, #0
 8004978:	d104      	bne.n	8004984 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800497a:	2100      	movs	r1, #0
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f965 	bl	8004c4c <USB_SetDevSpeed>
 8004982:	e008      	b.n	8004996 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004984:	2101      	movs	r1, #1
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f960 	bl	8004c4c <USB_SetDevSpeed>
 800498c:	e003      	b.n	8004996 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800498e:	2103      	movs	r1, #3
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f95b 	bl	8004c4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004996:	2110      	movs	r1, #16
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f8f3 	bl	8004b84 <USB_FlushTxFifo>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f91f 	bl	8004bec <USB_FlushRxFifo>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049be:	461a      	mov	r2, r3
 80049c0:	2300      	movs	r3, #0
 80049c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ca:	461a      	mov	r2, r3
 80049cc:	2300      	movs	r3, #0
 80049ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d6:	461a      	mov	r2, r3
 80049d8:	2300      	movs	r3, #0
 80049da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049dc:	2300      	movs	r3, #0
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	e043      	b.n	8004a6a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049f8:	d118      	bne.n	8004a2c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10a      	bne.n	8004a16 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	e013      	b.n	8004a3e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a22:	461a      	mov	r2, r3
 8004a24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	e008      	b.n	8004a3e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a38:	461a      	mov	r2, r3
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	3301      	adds	r3, #1
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d3b7      	bcc.n	80049e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
 8004a76:	e043      	b.n	8004b00 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a8e:	d118      	bne.n	8004ac2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e013      	b.n	8004ad4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab8:	461a      	mov	r2, r3
 8004aba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	e008      	b.n	8004ad4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af2:	461a      	mov	r2, r3
 8004af4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004af8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	3301      	adds	r3, #1
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d3b7      	bcc.n	8004a78 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d105      	bne.n	8004b3c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	f043 0210 	orr.w	r2, r3, #16
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <USB_DevInit+0x2b8>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d005      	beq.n	8004b5a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f043 0208 	orr.w	r2, r3, #8
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d107      	bne.n	8004b70 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b68:	f043 0304 	orr.w	r3, r3, #4
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b7c:	b004      	add	sp, #16
 8004b7e:	4770      	bx	lr
 8004b80:	803c3800 	.word	0x803c3800

08004b84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3301      	adds	r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4a13      	ldr	r2, [pc, #76]	; (8004be8 <USB_FlushTxFifo+0x64>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d901      	bls.n	8004ba4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e01b      	b.n	8004bdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	daf2      	bge.n	8004b92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	019b      	lsls	r3, r3, #6
 8004bb4:	f043 0220 	orr.w	r2, r3, #32
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <USB_FlushTxFifo+0x64>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e006      	b.n	8004bdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d0f0      	beq.n	8004bbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	00030d40 	.word	0x00030d40

08004bec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <USB_FlushRxFifo+0x5c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e018      	b.n	8004c3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	daf2      	bge.n	8004bf8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2210      	movs	r2, #16
 8004c1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4a08      	ldr	r2, [pc, #32]	; (8004c48 <USB_FlushRxFifo+0x5c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d901      	bls.n	8004c2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e006      	b.n	8004c3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f003 0310 	and.w	r3, r3, #16
 8004c36:	2b10      	cmp	r3, #16
 8004c38:	d0f0      	beq.n	8004c1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	00030d40 	.word	0x00030d40

08004c4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	68f9      	ldr	r1, [r7, #12]
 8004c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c98:	f023 0303 	bic.w	r3, r3, #3
 8004c9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cac:	f043 0302 	orr.w	r3, r3, #2
 8004cb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3301      	adds	r3, #1
 8004cec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4a13      	ldr	r2, [pc, #76]	; (8004d40 <USB_CoreReset+0x64>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e01b      	b.n	8004d32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	daf2      	bge.n	8004ce8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f043 0201 	orr.w	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3301      	adds	r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <USB_CoreReset+0x64>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e006      	b.n	8004d32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d0f0      	beq.n	8004d12 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	00030d40 	.word	0x00030d40

08004d44 <__assert_func>:
 8004d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d46:	4614      	mov	r4, r2
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <__assert_func+0x2c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4605      	mov	r5, r0
 8004d50:	68d8      	ldr	r0, [r3, #12]
 8004d52:	b14c      	cbz	r4, 8004d68 <__assert_func+0x24>
 8004d54:	4b07      	ldr	r3, [pc, #28]	; (8004d74 <__assert_func+0x30>)
 8004d56:	9100      	str	r1, [sp, #0]
 8004d58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d5c:	4906      	ldr	r1, [pc, #24]	; (8004d78 <__assert_func+0x34>)
 8004d5e:	462b      	mov	r3, r5
 8004d60:	f000 f814 	bl	8004d8c <fiprintf>
 8004d64:	f000 fbfe 	bl	8005564 <abort>
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <__assert_func+0x38>)
 8004d6a:	461c      	mov	r4, r3
 8004d6c:	e7f3      	b.n	8004d56 <__assert_func+0x12>
 8004d6e:	bf00      	nop
 8004d70:	20000024 	.word	0x20000024
 8004d74:	08005eda 	.word	0x08005eda
 8004d78:	08005ee7 	.word	0x08005ee7
 8004d7c:	08005f15 	.word	0x08005f15

08004d80 <__errno>:
 8004d80:	4b01      	ldr	r3, [pc, #4]	; (8004d88 <__errno+0x8>)
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20000024 	.word	0x20000024

08004d8c <fiprintf>:
 8004d8c:	b40e      	push	{r1, r2, r3}
 8004d8e:	b503      	push	{r0, r1, lr}
 8004d90:	4601      	mov	r1, r0
 8004d92:	ab03      	add	r3, sp, #12
 8004d94:	4805      	ldr	r0, [pc, #20]	; (8004dac <fiprintf+0x20>)
 8004d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d9a:	6800      	ldr	r0, [r0, #0]
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	f000 f85d 	bl	8004e5c <_vfiprintf_r>
 8004da2:	b002      	add	sp, #8
 8004da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004da8:	b003      	add	sp, #12
 8004daa:	4770      	bx	lr
 8004dac:	20000024 	.word	0x20000024

08004db0 <__libc_init_array>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	4d0d      	ldr	r5, [pc, #52]	; (8004de8 <__libc_init_array+0x38>)
 8004db4:	4c0d      	ldr	r4, [pc, #52]	; (8004dec <__libc_init_array+0x3c>)
 8004db6:	1b64      	subs	r4, r4, r5
 8004db8:	10a4      	asrs	r4, r4, #2
 8004dba:	2600      	movs	r6, #0
 8004dbc:	42a6      	cmp	r6, r4
 8004dbe:	d109      	bne.n	8004dd4 <__libc_init_array+0x24>
 8004dc0:	4d0b      	ldr	r5, [pc, #44]	; (8004df0 <__libc_init_array+0x40>)
 8004dc2:	4c0c      	ldr	r4, [pc, #48]	; (8004df4 <__libc_init_array+0x44>)
 8004dc4:	f000 ffe2 	bl	8005d8c <_init>
 8004dc8:	1b64      	subs	r4, r4, r5
 8004dca:	10a4      	asrs	r4, r4, #2
 8004dcc:	2600      	movs	r6, #0
 8004dce:	42a6      	cmp	r6, r4
 8004dd0:	d105      	bne.n	8004dde <__libc_init_array+0x2e>
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd8:	4798      	blx	r3
 8004dda:	3601      	adds	r6, #1
 8004ddc:	e7ee      	b.n	8004dbc <__libc_init_array+0xc>
 8004dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de2:	4798      	blx	r3
 8004de4:	3601      	adds	r6, #1
 8004de6:	e7f2      	b.n	8004dce <__libc_init_array+0x1e>
 8004de8:	08005fb8 	.word	0x08005fb8
 8004dec:	08005fb8 	.word	0x08005fb8
 8004df0:	08005fb8 	.word	0x08005fb8
 8004df4:	08005fbc 	.word	0x08005fbc

08004df8 <memset>:
 8004df8:	4402      	add	r2, r0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d100      	bne.n	8004e02 <memset+0xa>
 8004e00:	4770      	bx	lr
 8004e02:	f803 1b01 	strb.w	r1, [r3], #1
 8004e06:	e7f9      	b.n	8004dfc <memset+0x4>

08004e08 <__sfputc_r>:
 8004e08:	6893      	ldr	r3, [r2, #8]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	b410      	push	{r4}
 8004e10:	6093      	str	r3, [r2, #8]
 8004e12:	da08      	bge.n	8004e26 <__sfputc_r+0x1e>
 8004e14:	6994      	ldr	r4, [r2, #24]
 8004e16:	42a3      	cmp	r3, r4
 8004e18:	db01      	blt.n	8004e1e <__sfputc_r+0x16>
 8004e1a:	290a      	cmp	r1, #10
 8004e1c:	d103      	bne.n	8004e26 <__sfputc_r+0x1e>
 8004e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e22:	f000 badf 	b.w	80053e4 <__swbuf_r>
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	1c58      	adds	r0, r3, #1
 8004e2a:	6010      	str	r0, [r2, #0]
 8004e2c:	7019      	strb	r1, [r3, #0]
 8004e2e:	4608      	mov	r0, r1
 8004e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <__sfputs_r>:
 8004e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e38:	4606      	mov	r6, r0
 8004e3a:	460f      	mov	r7, r1
 8004e3c:	4614      	mov	r4, r2
 8004e3e:	18d5      	adds	r5, r2, r3
 8004e40:	42ac      	cmp	r4, r5
 8004e42:	d101      	bne.n	8004e48 <__sfputs_r+0x12>
 8004e44:	2000      	movs	r0, #0
 8004e46:	e007      	b.n	8004e58 <__sfputs_r+0x22>
 8004e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e4c:	463a      	mov	r2, r7
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f7ff ffda 	bl	8004e08 <__sfputc_r>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d1f3      	bne.n	8004e40 <__sfputs_r+0xa>
 8004e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e5c <_vfiprintf_r>:
 8004e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e60:	460d      	mov	r5, r1
 8004e62:	b09d      	sub	sp, #116	; 0x74
 8004e64:	4614      	mov	r4, r2
 8004e66:	4698      	mov	r8, r3
 8004e68:	4606      	mov	r6, r0
 8004e6a:	b118      	cbz	r0, 8004e74 <_vfiprintf_r+0x18>
 8004e6c:	6983      	ldr	r3, [r0, #24]
 8004e6e:	b90b      	cbnz	r3, 8004e74 <_vfiprintf_r+0x18>
 8004e70:	f000 fc9a 	bl	80057a8 <__sinit>
 8004e74:	4b89      	ldr	r3, [pc, #548]	; (800509c <_vfiprintf_r+0x240>)
 8004e76:	429d      	cmp	r5, r3
 8004e78:	d11b      	bne.n	8004eb2 <_vfiprintf_r+0x56>
 8004e7a:	6875      	ldr	r5, [r6, #4]
 8004e7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e7e:	07d9      	lsls	r1, r3, #31
 8004e80:	d405      	bmi.n	8004e8e <_vfiprintf_r+0x32>
 8004e82:	89ab      	ldrh	r3, [r5, #12]
 8004e84:	059a      	lsls	r2, r3, #22
 8004e86:	d402      	bmi.n	8004e8e <_vfiprintf_r+0x32>
 8004e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e8a:	f000 fd2b 	bl	80058e4 <__retarget_lock_acquire_recursive>
 8004e8e:	89ab      	ldrh	r3, [r5, #12]
 8004e90:	071b      	lsls	r3, r3, #28
 8004e92:	d501      	bpl.n	8004e98 <_vfiprintf_r+0x3c>
 8004e94:	692b      	ldr	r3, [r5, #16]
 8004e96:	b9eb      	cbnz	r3, 8004ed4 <_vfiprintf_r+0x78>
 8004e98:	4629      	mov	r1, r5
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f000 faf4 	bl	8005488 <__swsetup_r>
 8004ea0:	b1c0      	cbz	r0, 8004ed4 <_vfiprintf_r+0x78>
 8004ea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ea4:	07dc      	lsls	r4, r3, #31
 8004ea6:	d50e      	bpl.n	8004ec6 <_vfiprintf_r+0x6a>
 8004ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eac:	b01d      	add	sp, #116	; 0x74
 8004eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb2:	4b7b      	ldr	r3, [pc, #492]	; (80050a0 <_vfiprintf_r+0x244>)
 8004eb4:	429d      	cmp	r5, r3
 8004eb6:	d101      	bne.n	8004ebc <_vfiprintf_r+0x60>
 8004eb8:	68b5      	ldr	r5, [r6, #8]
 8004eba:	e7df      	b.n	8004e7c <_vfiprintf_r+0x20>
 8004ebc:	4b79      	ldr	r3, [pc, #484]	; (80050a4 <_vfiprintf_r+0x248>)
 8004ebe:	429d      	cmp	r5, r3
 8004ec0:	bf08      	it	eq
 8004ec2:	68f5      	ldreq	r5, [r6, #12]
 8004ec4:	e7da      	b.n	8004e7c <_vfiprintf_r+0x20>
 8004ec6:	89ab      	ldrh	r3, [r5, #12]
 8004ec8:	0598      	lsls	r0, r3, #22
 8004eca:	d4ed      	bmi.n	8004ea8 <_vfiprintf_r+0x4c>
 8004ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ece:	f000 fd0a 	bl	80058e6 <__retarget_lock_release_recursive>
 8004ed2:	e7e9      	b.n	8004ea8 <_vfiprintf_r+0x4c>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ed8:	2320      	movs	r3, #32
 8004eda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ee2:	2330      	movs	r3, #48	; 0x30
 8004ee4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80050a8 <_vfiprintf_r+0x24c>
 8004ee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004eec:	f04f 0901 	mov.w	r9, #1
 8004ef0:	4623      	mov	r3, r4
 8004ef2:	469a      	mov	sl, r3
 8004ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ef8:	b10a      	cbz	r2, 8004efe <_vfiprintf_r+0xa2>
 8004efa:	2a25      	cmp	r2, #37	; 0x25
 8004efc:	d1f9      	bne.n	8004ef2 <_vfiprintf_r+0x96>
 8004efe:	ebba 0b04 	subs.w	fp, sl, r4
 8004f02:	d00b      	beq.n	8004f1c <_vfiprintf_r+0xc0>
 8004f04:	465b      	mov	r3, fp
 8004f06:	4622      	mov	r2, r4
 8004f08:	4629      	mov	r1, r5
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	f7ff ff93 	bl	8004e36 <__sfputs_r>
 8004f10:	3001      	adds	r0, #1
 8004f12:	f000 80aa 	beq.w	800506a <_vfiprintf_r+0x20e>
 8004f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f18:	445a      	add	r2, fp
 8004f1a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80a2 	beq.w	800506a <_vfiprintf_r+0x20e>
 8004f26:	2300      	movs	r3, #0
 8004f28:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f30:	f10a 0a01 	add.w	sl, sl, #1
 8004f34:	9304      	str	r3, [sp, #16]
 8004f36:	9307      	str	r3, [sp, #28]
 8004f38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f3c:	931a      	str	r3, [sp, #104]	; 0x68
 8004f3e:	4654      	mov	r4, sl
 8004f40:	2205      	movs	r2, #5
 8004f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f46:	4858      	ldr	r0, [pc, #352]	; (80050a8 <_vfiprintf_r+0x24c>)
 8004f48:	f7fb f962 	bl	8000210 <memchr>
 8004f4c:	9a04      	ldr	r2, [sp, #16]
 8004f4e:	b9d8      	cbnz	r0, 8004f88 <_vfiprintf_r+0x12c>
 8004f50:	06d1      	lsls	r1, r2, #27
 8004f52:	bf44      	itt	mi
 8004f54:	2320      	movmi	r3, #32
 8004f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f5a:	0713      	lsls	r3, r2, #28
 8004f5c:	bf44      	itt	mi
 8004f5e:	232b      	movmi	r3, #43	; 0x2b
 8004f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f64:	f89a 3000 	ldrb.w	r3, [sl]
 8004f68:	2b2a      	cmp	r3, #42	; 0x2a
 8004f6a:	d015      	beq.n	8004f98 <_vfiprintf_r+0x13c>
 8004f6c:	9a07      	ldr	r2, [sp, #28]
 8004f6e:	4654      	mov	r4, sl
 8004f70:	2000      	movs	r0, #0
 8004f72:	f04f 0c0a 	mov.w	ip, #10
 8004f76:	4621      	mov	r1, r4
 8004f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f7c:	3b30      	subs	r3, #48	; 0x30
 8004f7e:	2b09      	cmp	r3, #9
 8004f80:	d94e      	bls.n	8005020 <_vfiprintf_r+0x1c4>
 8004f82:	b1b0      	cbz	r0, 8004fb2 <_vfiprintf_r+0x156>
 8004f84:	9207      	str	r2, [sp, #28]
 8004f86:	e014      	b.n	8004fb2 <_vfiprintf_r+0x156>
 8004f88:	eba0 0308 	sub.w	r3, r0, r8
 8004f8c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f90:	4313      	orrs	r3, r2
 8004f92:	9304      	str	r3, [sp, #16]
 8004f94:	46a2      	mov	sl, r4
 8004f96:	e7d2      	b.n	8004f3e <_vfiprintf_r+0xe2>
 8004f98:	9b03      	ldr	r3, [sp, #12]
 8004f9a:	1d19      	adds	r1, r3, #4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	9103      	str	r1, [sp, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bfbb      	ittet	lt
 8004fa4:	425b      	neglt	r3, r3
 8004fa6:	f042 0202 	orrlt.w	r2, r2, #2
 8004faa:	9307      	strge	r3, [sp, #28]
 8004fac:	9307      	strlt	r3, [sp, #28]
 8004fae:	bfb8      	it	lt
 8004fb0:	9204      	strlt	r2, [sp, #16]
 8004fb2:	7823      	ldrb	r3, [r4, #0]
 8004fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8004fb6:	d10c      	bne.n	8004fd2 <_vfiprintf_r+0x176>
 8004fb8:	7863      	ldrb	r3, [r4, #1]
 8004fba:	2b2a      	cmp	r3, #42	; 0x2a
 8004fbc:	d135      	bne.n	800502a <_vfiprintf_r+0x1ce>
 8004fbe:	9b03      	ldr	r3, [sp, #12]
 8004fc0:	1d1a      	adds	r2, r3, #4
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	9203      	str	r2, [sp, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	bfb8      	it	lt
 8004fca:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fce:	3402      	adds	r4, #2
 8004fd0:	9305      	str	r3, [sp, #20]
 8004fd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80050b8 <_vfiprintf_r+0x25c>
 8004fd6:	7821      	ldrb	r1, [r4, #0]
 8004fd8:	2203      	movs	r2, #3
 8004fda:	4650      	mov	r0, sl
 8004fdc:	f7fb f918 	bl	8000210 <memchr>
 8004fe0:	b140      	cbz	r0, 8004ff4 <_vfiprintf_r+0x198>
 8004fe2:	2340      	movs	r3, #64	; 0x40
 8004fe4:	eba0 000a 	sub.w	r0, r0, sl
 8004fe8:	fa03 f000 	lsl.w	r0, r3, r0
 8004fec:	9b04      	ldr	r3, [sp, #16]
 8004fee:	4303      	orrs	r3, r0
 8004ff0:	3401      	adds	r4, #1
 8004ff2:	9304      	str	r3, [sp, #16]
 8004ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff8:	482c      	ldr	r0, [pc, #176]	; (80050ac <_vfiprintf_r+0x250>)
 8004ffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ffe:	2206      	movs	r2, #6
 8005000:	f7fb f906 	bl	8000210 <memchr>
 8005004:	2800      	cmp	r0, #0
 8005006:	d03f      	beq.n	8005088 <_vfiprintf_r+0x22c>
 8005008:	4b29      	ldr	r3, [pc, #164]	; (80050b0 <_vfiprintf_r+0x254>)
 800500a:	bb1b      	cbnz	r3, 8005054 <_vfiprintf_r+0x1f8>
 800500c:	9b03      	ldr	r3, [sp, #12]
 800500e:	3307      	adds	r3, #7
 8005010:	f023 0307 	bic.w	r3, r3, #7
 8005014:	3308      	adds	r3, #8
 8005016:	9303      	str	r3, [sp, #12]
 8005018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800501a:	443b      	add	r3, r7
 800501c:	9309      	str	r3, [sp, #36]	; 0x24
 800501e:	e767      	b.n	8004ef0 <_vfiprintf_r+0x94>
 8005020:	fb0c 3202 	mla	r2, ip, r2, r3
 8005024:	460c      	mov	r4, r1
 8005026:	2001      	movs	r0, #1
 8005028:	e7a5      	b.n	8004f76 <_vfiprintf_r+0x11a>
 800502a:	2300      	movs	r3, #0
 800502c:	3401      	adds	r4, #1
 800502e:	9305      	str	r3, [sp, #20]
 8005030:	4619      	mov	r1, r3
 8005032:	f04f 0c0a 	mov.w	ip, #10
 8005036:	4620      	mov	r0, r4
 8005038:	f810 2b01 	ldrb.w	r2, [r0], #1
 800503c:	3a30      	subs	r2, #48	; 0x30
 800503e:	2a09      	cmp	r2, #9
 8005040:	d903      	bls.n	800504a <_vfiprintf_r+0x1ee>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0c5      	beq.n	8004fd2 <_vfiprintf_r+0x176>
 8005046:	9105      	str	r1, [sp, #20]
 8005048:	e7c3      	b.n	8004fd2 <_vfiprintf_r+0x176>
 800504a:	fb0c 2101 	mla	r1, ip, r1, r2
 800504e:	4604      	mov	r4, r0
 8005050:	2301      	movs	r3, #1
 8005052:	e7f0      	b.n	8005036 <_vfiprintf_r+0x1da>
 8005054:	ab03      	add	r3, sp, #12
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	462a      	mov	r2, r5
 800505a:	4b16      	ldr	r3, [pc, #88]	; (80050b4 <_vfiprintf_r+0x258>)
 800505c:	a904      	add	r1, sp, #16
 800505e:	4630      	mov	r0, r6
 8005060:	f3af 8000 	nop.w
 8005064:	4607      	mov	r7, r0
 8005066:	1c78      	adds	r0, r7, #1
 8005068:	d1d6      	bne.n	8005018 <_vfiprintf_r+0x1bc>
 800506a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800506c:	07d9      	lsls	r1, r3, #31
 800506e:	d405      	bmi.n	800507c <_vfiprintf_r+0x220>
 8005070:	89ab      	ldrh	r3, [r5, #12]
 8005072:	059a      	lsls	r2, r3, #22
 8005074:	d402      	bmi.n	800507c <_vfiprintf_r+0x220>
 8005076:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005078:	f000 fc35 	bl	80058e6 <__retarget_lock_release_recursive>
 800507c:	89ab      	ldrh	r3, [r5, #12]
 800507e:	065b      	lsls	r3, r3, #25
 8005080:	f53f af12 	bmi.w	8004ea8 <_vfiprintf_r+0x4c>
 8005084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005086:	e711      	b.n	8004eac <_vfiprintf_r+0x50>
 8005088:	ab03      	add	r3, sp, #12
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	462a      	mov	r2, r5
 800508e:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <_vfiprintf_r+0x258>)
 8005090:	a904      	add	r1, sp, #16
 8005092:	4630      	mov	r0, r6
 8005094:	f000 f880 	bl	8005198 <_printf_i>
 8005098:	e7e4      	b.n	8005064 <_vfiprintf_r+0x208>
 800509a:	bf00      	nop
 800509c:	08005f70 	.word	0x08005f70
 80050a0:	08005f90 	.word	0x08005f90
 80050a4:	08005f50 	.word	0x08005f50
 80050a8:	08005f1c 	.word	0x08005f1c
 80050ac:	08005f26 	.word	0x08005f26
 80050b0:	00000000 	.word	0x00000000
 80050b4:	08004e37 	.word	0x08004e37
 80050b8:	08005f22 	.word	0x08005f22

080050bc <_printf_common>:
 80050bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c0:	4616      	mov	r6, r2
 80050c2:	4699      	mov	r9, r3
 80050c4:	688a      	ldr	r2, [r1, #8]
 80050c6:	690b      	ldr	r3, [r1, #16]
 80050c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050cc:	4293      	cmp	r3, r2
 80050ce:	bfb8      	it	lt
 80050d0:	4613      	movlt	r3, r2
 80050d2:	6033      	str	r3, [r6, #0]
 80050d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050d8:	4607      	mov	r7, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	b10a      	cbz	r2, 80050e2 <_printf_common+0x26>
 80050de:	3301      	adds	r3, #1
 80050e0:	6033      	str	r3, [r6, #0]
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	0699      	lsls	r1, r3, #26
 80050e6:	bf42      	ittt	mi
 80050e8:	6833      	ldrmi	r3, [r6, #0]
 80050ea:	3302      	addmi	r3, #2
 80050ec:	6033      	strmi	r3, [r6, #0]
 80050ee:	6825      	ldr	r5, [r4, #0]
 80050f0:	f015 0506 	ands.w	r5, r5, #6
 80050f4:	d106      	bne.n	8005104 <_printf_common+0x48>
 80050f6:	f104 0a19 	add.w	sl, r4, #25
 80050fa:	68e3      	ldr	r3, [r4, #12]
 80050fc:	6832      	ldr	r2, [r6, #0]
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	42ab      	cmp	r3, r5
 8005102:	dc26      	bgt.n	8005152 <_printf_common+0x96>
 8005104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005108:	1e13      	subs	r3, r2, #0
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	bf18      	it	ne
 800510e:	2301      	movne	r3, #1
 8005110:	0692      	lsls	r2, r2, #26
 8005112:	d42b      	bmi.n	800516c <_printf_common+0xb0>
 8005114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005118:	4649      	mov	r1, r9
 800511a:	4638      	mov	r0, r7
 800511c:	47c0      	blx	r8
 800511e:	3001      	adds	r0, #1
 8005120:	d01e      	beq.n	8005160 <_printf_common+0xa4>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	68e5      	ldr	r5, [r4, #12]
 8005126:	6832      	ldr	r2, [r6, #0]
 8005128:	f003 0306 	and.w	r3, r3, #6
 800512c:	2b04      	cmp	r3, #4
 800512e:	bf08      	it	eq
 8005130:	1aad      	subeq	r5, r5, r2
 8005132:	68a3      	ldr	r3, [r4, #8]
 8005134:	6922      	ldr	r2, [r4, #16]
 8005136:	bf0c      	ite	eq
 8005138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800513c:	2500      	movne	r5, #0
 800513e:	4293      	cmp	r3, r2
 8005140:	bfc4      	itt	gt
 8005142:	1a9b      	subgt	r3, r3, r2
 8005144:	18ed      	addgt	r5, r5, r3
 8005146:	2600      	movs	r6, #0
 8005148:	341a      	adds	r4, #26
 800514a:	42b5      	cmp	r5, r6
 800514c:	d11a      	bne.n	8005184 <_printf_common+0xc8>
 800514e:	2000      	movs	r0, #0
 8005150:	e008      	b.n	8005164 <_printf_common+0xa8>
 8005152:	2301      	movs	r3, #1
 8005154:	4652      	mov	r2, sl
 8005156:	4649      	mov	r1, r9
 8005158:	4638      	mov	r0, r7
 800515a:	47c0      	blx	r8
 800515c:	3001      	adds	r0, #1
 800515e:	d103      	bne.n	8005168 <_printf_common+0xac>
 8005160:	f04f 30ff 	mov.w	r0, #4294967295
 8005164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005168:	3501      	adds	r5, #1
 800516a:	e7c6      	b.n	80050fa <_printf_common+0x3e>
 800516c:	18e1      	adds	r1, r4, r3
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	2030      	movs	r0, #48	; 0x30
 8005172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005176:	4422      	add	r2, r4
 8005178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800517c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005180:	3302      	adds	r3, #2
 8005182:	e7c7      	b.n	8005114 <_printf_common+0x58>
 8005184:	2301      	movs	r3, #1
 8005186:	4622      	mov	r2, r4
 8005188:	4649      	mov	r1, r9
 800518a:	4638      	mov	r0, r7
 800518c:	47c0      	blx	r8
 800518e:	3001      	adds	r0, #1
 8005190:	d0e6      	beq.n	8005160 <_printf_common+0xa4>
 8005192:	3601      	adds	r6, #1
 8005194:	e7d9      	b.n	800514a <_printf_common+0x8e>
	...

08005198 <_printf_i>:
 8005198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800519c:	7e0f      	ldrb	r7, [r1, #24]
 800519e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051a0:	2f78      	cmp	r7, #120	; 0x78
 80051a2:	4691      	mov	r9, r2
 80051a4:	4680      	mov	r8, r0
 80051a6:	460c      	mov	r4, r1
 80051a8:	469a      	mov	sl, r3
 80051aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051ae:	d807      	bhi.n	80051c0 <_printf_i+0x28>
 80051b0:	2f62      	cmp	r7, #98	; 0x62
 80051b2:	d80a      	bhi.n	80051ca <_printf_i+0x32>
 80051b4:	2f00      	cmp	r7, #0
 80051b6:	f000 80d8 	beq.w	800536a <_printf_i+0x1d2>
 80051ba:	2f58      	cmp	r7, #88	; 0x58
 80051bc:	f000 80a3 	beq.w	8005306 <_printf_i+0x16e>
 80051c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051c8:	e03a      	b.n	8005240 <_printf_i+0xa8>
 80051ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051ce:	2b15      	cmp	r3, #21
 80051d0:	d8f6      	bhi.n	80051c0 <_printf_i+0x28>
 80051d2:	a101      	add	r1, pc, #4	; (adr r1, 80051d8 <_printf_i+0x40>)
 80051d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051d8:	08005231 	.word	0x08005231
 80051dc:	08005245 	.word	0x08005245
 80051e0:	080051c1 	.word	0x080051c1
 80051e4:	080051c1 	.word	0x080051c1
 80051e8:	080051c1 	.word	0x080051c1
 80051ec:	080051c1 	.word	0x080051c1
 80051f0:	08005245 	.word	0x08005245
 80051f4:	080051c1 	.word	0x080051c1
 80051f8:	080051c1 	.word	0x080051c1
 80051fc:	080051c1 	.word	0x080051c1
 8005200:	080051c1 	.word	0x080051c1
 8005204:	08005351 	.word	0x08005351
 8005208:	08005275 	.word	0x08005275
 800520c:	08005333 	.word	0x08005333
 8005210:	080051c1 	.word	0x080051c1
 8005214:	080051c1 	.word	0x080051c1
 8005218:	08005373 	.word	0x08005373
 800521c:	080051c1 	.word	0x080051c1
 8005220:	08005275 	.word	0x08005275
 8005224:	080051c1 	.word	0x080051c1
 8005228:	080051c1 	.word	0x080051c1
 800522c:	0800533b 	.word	0x0800533b
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	1d1a      	adds	r2, r3, #4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	602a      	str	r2, [r5, #0]
 8005238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800523c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005240:	2301      	movs	r3, #1
 8005242:	e0a3      	b.n	800538c <_printf_i+0x1f4>
 8005244:	6820      	ldr	r0, [r4, #0]
 8005246:	6829      	ldr	r1, [r5, #0]
 8005248:	0606      	lsls	r6, r0, #24
 800524a:	f101 0304 	add.w	r3, r1, #4
 800524e:	d50a      	bpl.n	8005266 <_printf_i+0xce>
 8005250:	680e      	ldr	r6, [r1, #0]
 8005252:	602b      	str	r3, [r5, #0]
 8005254:	2e00      	cmp	r6, #0
 8005256:	da03      	bge.n	8005260 <_printf_i+0xc8>
 8005258:	232d      	movs	r3, #45	; 0x2d
 800525a:	4276      	negs	r6, r6
 800525c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005260:	485e      	ldr	r0, [pc, #376]	; (80053dc <_printf_i+0x244>)
 8005262:	230a      	movs	r3, #10
 8005264:	e019      	b.n	800529a <_printf_i+0x102>
 8005266:	680e      	ldr	r6, [r1, #0]
 8005268:	602b      	str	r3, [r5, #0]
 800526a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800526e:	bf18      	it	ne
 8005270:	b236      	sxthne	r6, r6
 8005272:	e7ef      	b.n	8005254 <_printf_i+0xbc>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	6820      	ldr	r0, [r4, #0]
 8005278:	1d19      	adds	r1, r3, #4
 800527a:	6029      	str	r1, [r5, #0]
 800527c:	0601      	lsls	r1, r0, #24
 800527e:	d501      	bpl.n	8005284 <_printf_i+0xec>
 8005280:	681e      	ldr	r6, [r3, #0]
 8005282:	e002      	b.n	800528a <_printf_i+0xf2>
 8005284:	0646      	lsls	r6, r0, #25
 8005286:	d5fb      	bpl.n	8005280 <_printf_i+0xe8>
 8005288:	881e      	ldrh	r6, [r3, #0]
 800528a:	4854      	ldr	r0, [pc, #336]	; (80053dc <_printf_i+0x244>)
 800528c:	2f6f      	cmp	r7, #111	; 0x6f
 800528e:	bf0c      	ite	eq
 8005290:	2308      	moveq	r3, #8
 8005292:	230a      	movne	r3, #10
 8005294:	2100      	movs	r1, #0
 8005296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800529a:	6865      	ldr	r5, [r4, #4]
 800529c:	60a5      	str	r5, [r4, #8]
 800529e:	2d00      	cmp	r5, #0
 80052a0:	bfa2      	ittt	ge
 80052a2:	6821      	ldrge	r1, [r4, #0]
 80052a4:	f021 0104 	bicge.w	r1, r1, #4
 80052a8:	6021      	strge	r1, [r4, #0]
 80052aa:	b90e      	cbnz	r6, 80052b0 <_printf_i+0x118>
 80052ac:	2d00      	cmp	r5, #0
 80052ae:	d04d      	beq.n	800534c <_printf_i+0x1b4>
 80052b0:	4615      	mov	r5, r2
 80052b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80052b6:	fb03 6711 	mls	r7, r3, r1, r6
 80052ba:	5dc7      	ldrb	r7, [r0, r7]
 80052bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052c0:	4637      	mov	r7, r6
 80052c2:	42bb      	cmp	r3, r7
 80052c4:	460e      	mov	r6, r1
 80052c6:	d9f4      	bls.n	80052b2 <_printf_i+0x11a>
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d10b      	bne.n	80052e4 <_printf_i+0x14c>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	07de      	lsls	r6, r3, #31
 80052d0:	d508      	bpl.n	80052e4 <_printf_i+0x14c>
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	6861      	ldr	r1, [r4, #4]
 80052d6:	4299      	cmp	r1, r3
 80052d8:	bfde      	ittt	le
 80052da:	2330      	movle	r3, #48	; 0x30
 80052dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052e4:	1b52      	subs	r2, r2, r5
 80052e6:	6122      	str	r2, [r4, #16]
 80052e8:	f8cd a000 	str.w	sl, [sp]
 80052ec:	464b      	mov	r3, r9
 80052ee:	aa03      	add	r2, sp, #12
 80052f0:	4621      	mov	r1, r4
 80052f2:	4640      	mov	r0, r8
 80052f4:	f7ff fee2 	bl	80050bc <_printf_common>
 80052f8:	3001      	adds	r0, #1
 80052fa:	d14c      	bne.n	8005396 <_printf_i+0x1fe>
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005300:	b004      	add	sp, #16
 8005302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005306:	4835      	ldr	r0, [pc, #212]	; (80053dc <_printf_i+0x244>)
 8005308:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800530c:	6829      	ldr	r1, [r5, #0]
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	f851 6b04 	ldr.w	r6, [r1], #4
 8005314:	6029      	str	r1, [r5, #0]
 8005316:	061d      	lsls	r5, r3, #24
 8005318:	d514      	bpl.n	8005344 <_printf_i+0x1ac>
 800531a:	07df      	lsls	r7, r3, #31
 800531c:	bf44      	itt	mi
 800531e:	f043 0320 	orrmi.w	r3, r3, #32
 8005322:	6023      	strmi	r3, [r4, #0]
 8005324:	b91e      	cbnz	r6, 800532e <_printf_i+0x196>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	f023 0320 	bic.w	r3, r3, #32
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	2310      	movs	r3, #16
 8005330:	e7b0      	b.n	8005294 <_printf_i+0xfc>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	f043 0320 	orr.w	r3, r3, #32
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	2378      	movs	r3, #120	; 0x78
 800533c:	4828      	ldr	r0, [pc, #160]	; (80053e0 <_printf_i+0x248>)
 800533e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005342:	e7e3      	b.n	800530c <_printf_i+0x174>
 8005344:	0659      	lsls	r1, r3, #25
 8005346:	bf48      	it	mi
 8005348:	b2b6      	uxthmi	r6, r6
 800534a:	e7e6      	b.n	800531a <_printf_i+0x182>
 800534c:	4615      	mov	r5, r2
 800534e:	e7bb      	b.n	80052c8 <_printf_i+0x130>
 8005350:	682b      	ldr	r3, [r5, #0]
 8005352:	6826      	ldr	r6, [r4, #0]
 8005354:	6961      	ldr	r1, [r4, #20]
 8005356:	1d18      	adds	r0, r3, #4
 8005358:	6028      	str	r0, [r5, #0]
 800535a:	0635      	lsls	r5, r6, #24
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	d501      	bpl.n	8005364 <_printf_i+0x1cc>
 8005360:	6019      	str	r1, [r3, #0]
 8005362:	e002      	b.n	800536a <_printf_i+0x1d2>
 8005364:	0670      	lsls	r0, r6, #25
 8005366:	d5fb      	bpl.n	8005360 <_printf_i+0x1c8>
 8005368:	8019      	strh	r1, [r3, #0]
 800536a:	2300      	movs	r3, #0
 800536c:	6123      	str	r3, [r4, #16]
 800536e:	4615      	mov	r5, r2
 8005370:	e7ba      	b.n	80052e8 <_printf_i+0x150>
 8005372:	682b      	ldr	r3, [r5, #0]
 8005374:	1d1a      	adds	r2, r3, #4
 8005376:	602a      	str	r2, [r5, #0]
 8005378:	681d      	ldr	r5, [r3, #0]
 800537a:	6862      	ldr	r2, [r4, #4]
 800537c:	2100      	movs	r1, #0
 800537e:	4628      	mov	r0, r5
 8005380:	f7fa ff46 	bl	8000210 <memchr>
 8005384:	b108      	cbz	r0, 800538a <_printf_i+0x1f2>
 8005386:	1b40      	subs	r0, r0, r5
 8005388:	6060      	str	r0, [r4, #4]
 800538a:	6863      	ldr	r3, [r4, #4]
 800538c:	6123      	str	r3, [r4, #16]
 800538e:	2300      	movs	r3, #0
 8005390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005394:	e7a8      	b.n	80052e8 <_printf_i+0x150>
 8005396:	6923      	ldr	r3, [r4, #16]
 8005398:	462a      	mov	r2, r5
 800539a:	4649      	mov	r1, r9
 800539c:	4640      	mov	r0, r8
 800539e:	47d0      	blx	sl
 80053a0:	3001      	adds	r0, #1
 80053a2:	d0ab      	beq.n	80052fc <_printf_i+0x164>
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	079b      	lsls	r3, r3, #30
 80053a8:	d413      	bmi.n	80053d2 <_printf_i+0x23a>
 80053aa:	68e0      	ldr	r0, [r4, #12]
 80053ac:	9b03      	ldr	r3, [sp, #12]
 80053ae:	4298      	cmp	r0, r3
 80053b0:	bfb8      	it	lt
 80053b2:	4618      	movlt	r0, r3
 80053b4:	e7a4      	b.n	8005300 <_printf_i+0x168>
 80053b6:	2301      	movs	r3, #1
 80053b8:	4632      	mov	r2, r6
 80053ba:	4649      	mov	r1, r9
 80053bc:	4640      	mov	r0, r8
 80053be:	47d0      	blx	sl
 80053c0:	3001      	adds	r0, #1
 80053c2:	d09b      	beq.n	80052fc <_printf_i+0x164>
 80053c4:	3501      	adds	r5, #1
 80053c6:	68e3      	ldr	r3, [r4, #12]
 80053c8:	9903      	ldr	r1, [sp, #12]
 80053ca:	1a5b      	subs	r3, r3, r1
 80053cc:	42ab      	cmp	r3, r5
 80053ce:	dcf2      	bgt.n	80053b6 <_printf_i+0x21e>
 80053d0:	e7eb      	b.n	80053aa <_printf_i+0x212>
 80053d2:	2500      	movs	r5, #0
 80053d4:	f104 0619 	add.w	r6, r4, #25
 80053d8:	e7f5      	b.n	80053c6 <_printf_i+0x22e>
 80053da:	bf00      	nop
 80053dc:	08005f2d 	.word	0x08005f2d
 80053e0:	08005f3e 	.word	0x08005f3e

080053e4 <__swbuf_r>:
 80053e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e6:	460e      	mov	r6, r1
 80053e8:	4614      	mov	r4, r2
 80053ea:	4605      	mov	r5, r0
 80053ec:	b118      	cbz	r0, 80053f6 <__swbuf_r+0x12>
 80053ee:	6983      	ldr	r3, [r0, #24]
 80053f0:	b90b      	cbnz	r3, 80053f6 <__swbuf_r+0x12>
 80053f2:	f000 f9d9 	bl	80057a8 <__sinit>
 80053f6:	4b21      	ldr	r3, [pc, #132]	; (800547c <__swbuf_r+0x98>)
 80053f8:	429c      	cmp	r4, r3
 80053fa:	d12b      	bne.n	8005454 <__swbuf_r+0x70>
 80053fc:	686c      	ldr	r4, [r5, #4]
 80053fe:	69a3      	ldr	r3, [r4, #24]
 8005400:	60a3      	str	r3, [r4, #8]
 8005402:	89a3      	ldrh	r3, [r4, #12]
 8005404:	071a      	lsls	r2, r3, #28
 8005406:	d52f      	bpl.n	8005468 <__swbuf_r+0x84>
 8005408:	6923      	ldr	r3, [r4, #16]
 800540a:	b36b      	cbz	r3, 8005468 <__swbuf_r+0x84>
 800540c:	6923      	ldr	r3, [r4, #16]
 800540e:	6820      	ldr	r0, [r4, #0]
 8005410:	1ac0      	subs	r0, r0, r3
 8005412:	6963      	ldr	r3, [r4, #20]
 8005414:	b2f6      	uxtb	r6, r6
 8005416:	4283      	cmp	r3, r0
 8005418:	4637      	mov	r7, r6
 800541a:	dc04      	bgt.n	8005426 <__swbuf_r+0x42>
 800541c:	4621      	mov	r1, r4
 800541e:	4628      	mov	r0, r5
 8005420:	f000 f92e 	bl	8005680 <_fflush_r>
 8005424:	bb30      	cbnz	r0, 8005474 <__swbuf_r+0x90>
 8005426:	68a3      	ldr	r3, [r4, #8]
 8005428:	3b01      	subs	r3, #1
 800542a:	60a3      	str	r3, [r4, #8]
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	6022      	str	r2, [r4, #0]
 8005432:	701e      	strb	r6, [r3, #0]
 8005434:	6963      	ldr	r3, [r4, #20]
 8005436:	3001      	adds	r0, #1
 8005438:	4283      	cmp	r3, r0
 800543a:	d004      	beq.n	8005446 <__swbuf_r+0x62>
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	07db      	lsls	r3, r3, #31
 8005440:	d506      	bpl.n	8005450 <__swbuf_r+0x6c>
 8005442:	2e0a      	cmp	r6, #10
 8005444:	d104      	bne.n	8005450 <__swbuf_r+0x6c>
 8005446:	4621      	mov	r1, r4
 8005448:	4628      	mov	r0, r5
 800544a:	f000 f919 	bl	8005680 <_fflush_r>
 800544e:	b988      	cbnz	r0, 8005474 <__swbuf_r+0x90>
 8005450:	4638      	mov	r0, r7
 8005452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005454:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <__swbuf_r+0x9c>)
 8005456:	429c      	cmp	r4, r3
 8005458:	d101      	bne.n	800545e <__swbuf_r+0x7a>
 800545a:	68ac      	ldr	r4, [r5, #8]
 800545c:	e7cf      	b.n	80053fe <__swbuf_r+0x1a>
 800545e:	4b09      	ldr	r3, [pc, #36]	; (8005484 <__swbuf_r+0xa0>)
 8005460:	429c      	cmp	r4, r3
 8005462:	bf08      	it	eq
 8005464:	68ec      	ldreq	r4, [r5, #12]
 8005466:	e7ca      	b.n	80053fe <__swbuf_r+0x1a>
 8005468:	4621      	mov	r1, r4
 800546a:	4628      	mov	r0, r5
 800546c:	f000 f80c 	bl	8005488 <__swsetup_r>
 8005470:	2800      	cmp	r0, #0
 8005472:	d0cb      	beq.n	800540c <__swbuf_r+0x28>
 8005474:	f04f 37ff 	mov.w	r7, #4294967295
 8005478:	e7ea      	b.n	8005450 <__swbuf_r+0x6c>
 800547a:	bf00      	nop
 800547c:	08005f70 	.word	0x08005f70
 8005480:	08005f90 	.word	0x08005f90
 8005484:	08005f50 	.word	0x08005f50

08005488 <__swsetup_r>:
 8005488:	4b32      	ldr	r3, [pc, #200]	; (8005554 <__swsetup_r+0xcc>)
 800548a:	b570      	push	{r4, r5, r6, lr}
 800548c:	681d      	ldr	r5, [r3, #0]
 800548e:	4606      	mov	r6, r0
 8005490:	460c      	mov	r4, r1
 8005492:	b125      	cbz	r5, 800549e <__swsetup_r+0x16>
 8005494:	69ab      	ldr	r3, [r5, #24]
 8005496:	b913      	cbnz	r3, 800549e <__swsetup_r+0x16>
 8005498:	4628      	mov	r0, r5
 800549a:	f000 f985 	bl	80057a8 <__sinit>
 800549e:	4b2e      	ldr	r3, [pc, #184]	; (8005558 <__swsetup_r+0xd0>)
 80054a0:	429c      	cmp	r4, r3
 80054a2:	d10f      	bne.n	80054c4 <__swsetup_r+0x3c>
 80054a4:	686c      	ldr	r4, [r5, #4]
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054ac:	0719      	lsls	r1, r3, #28
 80054ae:	d42c      	bmi.n	800550a <__swsetup_r+0x82>
 80054b0:	06dd      	lsls	r5, r3, #27
 80054b2:	d411      	bmi.n	80054d8 <__swsetup_r+0x50>
 80054b4:	2309      	movs	r3, #9
 80054b6:	6033      	str	r3, [r6, #0]
 80054b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80054bc:	81a3      	strh	r3, [r4, #12]
 80054be:	f04f 30ff 	mov.w	r0, #4294967295
 80054c2:	e03e      	b.n	8005542 <__swsetup_r+0xba>
 80054c4:	4b25      	ldr	r3, [pc, #148]	; (800555c <__swsetup_r+0xd4>)
 80054c6:	429c      	cmp	r4, r3
 80054c8:	d101      	bne.n	80054ce <__swsetup_r+0x46>
 80054ca:	68ac      	ldr	r4, [r5, #8]
 80054cc:	e7eb      	b.n	80054a6 <__swsetup_r+0x1e>
 80054ce:	4b24      	ldr	r3, [pc, #144]	; (8005560 <__swsetup_r+0xd8>)
 80054d0:	429c      	cmp	r4, r3
 80054d2:	bf08      	it	eq
 80054d4:	68ec      	ldreq	r4, [r5, #12]
 80054d6:	e7e6      	b.n	80054a6 <__swsetup_r+0x1e>
 80054d8:	0758      	lsls	r0, r3, #29
 80054da:	d512      	bpl.n	8005502 <__swsetup_r+0x7a>
 80054dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054de:	b141      	cbz	r1, 80054f2 <__swsetup_r+0x6a>
 80054e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054e4:	4299      	cmp	r1, r3
 80054e6:	d002      	beq.n	80054ee <__swsetup_r+0x66>
 80054e8:	4630      	mov	r0, r6
 80054ea:	f000 fa63 	bl	80059b4 <_free_r>
 80054ee:	2300      	movs	r3, #0
 80054f0:	6363      	str	r3, [r4, #52]	; 0x34
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054f8:	81a3      	strh	r3, [r4, #12]
 80054fa:	2300      	movs	r3, #0
 80054fc:	6063      	str	r3, [r4, #4]
 80054fe:	6923      	ldr	r3, [r4, #16]
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	89a3      	ldrh	r3, [r4, #12]
 8005504:	f043 0308 	orr.w	r3, r3, #8
 8005508:	81a3      	strh	r3, [r4, #12]
 800550a:	6923      	ldr	r3, [r4, #16]
 800550c:	b94b      	cbnz	r3, 8005522 <__swsetup_r+0x9a>
 800550e:	89a3      	ldrh	r3, [r4, #12]
 8005510:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005518:	d003      	beq.n	8005522 <__swsetup_r+0x9a>
 800551a:	4621      	mov	r1, r4
 800551c:	4630      	mov	r0, r6
 800551e:	f000 fa09 	bl	8005934 <__smakebuf_r>
 8005522:	89a0      	ldrh	r0, [r4, #12]
 8005524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005528:	f010 0301 	ands.w	r3, r0, #1
 800552c:	d00a      	beq.n	8005544 <__swsetup_r+0xbc>
 800552e:	2300      	movs	r3, #0
 8005530:	60a3      	str	r3, [r4, #8]
 8005532:	6963      	ldr	r3, [r4, #20]
 8005534:	425b      	negs	r3, r3
 8005536:	61a3      	str	r3, [r4, #24]
 8005538:	6923      	ldr	r3, [r4, #16]
 800553a:	b943      	cbnz	r3, 800554e <__swsetup_r+0xc6>
 800553c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005540:	d1ba      	bne.n	80054b8 <__swsetup_r+0x30>
 8005542:	bd70      	pop	{r4, r5, r6, pc}
 8005544:	0781      	lsls	r1, r0, #30
 8005546:	bf58      	it	pl
 8005548:	6963      	ldrpl	r3, [r4, #20]
 800554a:	60a3      	str	r3, [r4, #8]
 800554c:	e7f4      	b.n	8005538 <__swsetup_r+0xb0>
 800554e:	2000      	movs	r0, #0
 8005550:	e7f7      	b.n	8005542 <__swsetup_r+0xba>
 8005552:	bf00      	nop
 8005554:	20000024 	.word	0x20000024
 8005558:	08005f70 	.word	0x08005f70
 800555c:	08005f90 	.word	0x08005f90
 8005560:	08005f50 	.word	0x08005f50

08005564 <abort>:
 8005564:	b508      	push	{r3, lr}
 8005566:	2006      	movs	r0, #6
 8005568:	f000 fb3c 	bl	8005be4 <raise>
 800556c:	2001      	movs	r0, #1
 800556e:	f7fb fa2f 	bl	80009d0 <_exit>
	...

08005574 <__sflush_r>:
 8005574:	898a      	ldrh	r2, [r1, #12]
 8005576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800557a:	4605      	mov	r5, r0
 800557c:	0710      	lsls	r0, r2, #28
 800557e:	460c      	mov	r4, r1
 8005580:	d458      	bmi.n	8005634 <__sflush_r+0xc0>
 8005582:	684b      	ldr	r3, [r1, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	dc05      	bgt.n	8005594 <__sflush_r+0x20>
 8005588:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	dc02      	bgt.n	8005594 <__sflush_r+0x20>
 800558e:	2000      	movs	r0, #0
 8005590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005596:	2e00      	cmp	r6, #0
 8005598:	d0f9      	beq.n	800558e <__sflush_r+0x1a>
 800559a:	2300      	movs	r3, #0
 800559c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055a0:	682f      	ldr	r7, [r5, #0]
 80055a2:	602b      	str	r3, [r5, #0]
 80055a4:	d032      	beq.n	800560c <__sflush_r+0x98>
 80055a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	075a      	lsls	r2, r3, #29
 80055ac:	d505      	bpl.n	80055ba <__sflush_r+0x46>
 80055ae:	6863      	ldr	r3, [r4, #4]
 80055b0:	1ac0      	subs	r0, r0, r3
 80055b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055b4:	b10b      	cbz	r3, 80055ba <__sflush_r+0x46>
 80055b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055b8:	1ac0      	subs	r0, r0, r3
 80055ba:	2300      	movs	r3, #0
 80055bc:	4602      	mov	r2, r0
 80055be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055c0:	6a21      	ldr	r1, [r4, #32]
 80055c2:	4628      	mov	r0, r5
 80055c4:	47b0      	blx	r6
 80055c6:	1c43      	adds	r3, r0, #1
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	d106      	bne.n	80055da <__sflush_r+0x66>
 80055cc:	6829      	ldr	r1, [r5, #0]
 80055ce:	291d      	cmp	r1, #29
 80055d0:	d82c      	bhi.n	800562c <__sflush_r+0xb8>
 80055d2:	4a2a      	ldr	r2, [pc, #168]	; (800567c <__sflush_r+0x108>)
 80055d4:	40ca      	lsrs	r2, r1
 80055d6:	07d6      	lsls	r6, r2, #31
 80055d8:	d528      	bpl.n	800562c <__sflush_r+0xb8>
 80055da:	2200      	movs	r2, #0
 80055dc:	6062      	str	r2, [r4, #4]
 80055de:	04d9      	lsls	r1, r3, #19
 80055e0:	6922      	ldr	r2, [r4, #16]
 80055e2:	6022      	str	r2, [r4, #0]
 80055e4:	d504      	bpl.n	80055f0 <__sflush_r+0x7c>
 80055e6:	1c42      	adds	r2, r0, #1
 80055e8:	d101      	bne.n	80055ee <__sflush_r+0x7a>
 80055ea:	682b      	ldr	r3, [r5, #0]
 80055ec:	b903      	cbnz	r3, 80055f0 <__sflush_r+0x7c>
 80055ee:	6560      	str	r0, [r4, #84]	; 0x54
 80055f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055f2:	602f      	str	r7, [r5, #0]
 80055f4:	2900      	cmp	r1, #0
 80055f6:	d0ca      	beq.n	800558e <__sflush_r+0x1a>
 80055f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055fc:	4299      	cmp	r1, r3
 80055fe:	d002      	beq.n	8005606 <__sflush_r+0x92>
 8005600:	4628      	mov	r0, r5
 8005602:	f000 f9d7 	bl	80059b4 <_free_r>
 8005606:	2000      	movs	r0, #0
 8005608:	6360      	str	r0, [r4, #52]	; 0x34
 800560a:	e7c1      	b.n	8005590 <__sflush_r+0x1c>
 800560c:	6a21      	ldr	r1, [r4, #32]
 800560e:	2301      	movs	r3, #1
 8005610:	4628      	mov	r0, r5
 8005612:	47b0      	blx	r6
 8005614:	1c41      	adds	r1, r0, #1
 8005616:	d1c7      	bne.n	80055a8 <__sflush_r+0x34>
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0c4      	beq.n	80055a8 <__sflush_r+0x34>
 800561e:	2b1d      	cmp	r3, #29
 8005620:	d001      	beq.n	8005626 <__sflush_r+0xb2>
 8005622:	2b16      	cmp	r3, #22
 8005624:	d101      	bne.n	800562a <__sflush_r+0xb6>
 8005626:	602f      	str	r7, [r5, #0]
 8005628:	e7b1      	b.n	800558e <__sflush_r+0x1a>
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005630:	81a3      	strh	r3, [r4, #12]
 8005632:	e7ad      	b.n	8005590 <__sflush_r+0x1c>
 8005634:	690f      	ldr	r7, [r1, #16]
 8005636:	2f00      	cmp	r7, #0
 8005638:	d0a9      	beq.n	800558e <__sflush_r+0x1a>
 800563a:	0793      	lsls	r3, r2, #30
 800563c:	680e      	ldr	r6, [r1, #0]
 800563e:	bf08      	it	eq
 8005640:	694b      	ldreq	r3, [r1, #20]
 8005642:	600f      	str	r7, [r1, #0]
 8005644:	bf18      	it	ne
 8005646:	2300      	movne	r3, #0
 8005648:	eba6 0807 	sub.w	r8, r6, r7
 800564c:	608b      	str	r3, [r1, #8]
 800564e:	f1b8 0f00 	cmp.w	r8, #0
 8005652:	dd9c      	ble.n	800558e <__sflush_r+0x1a>
 8005654:	6a21      	ldr	r1, [r4, #32]
 8005656:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005658:	4643      	mov	r3, r8
 800565a:	463a      	mov	r2, r7
 800565c:	4628      	mov	r0, r5
 800565e:	47b0      	blx	r6
 8005660:	2800      	cmp	r0, #0
 8005662:	dc06      	bgt.n	8005672 <__sflush_r+0xfe>
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800566a:	81a3      	strh	r3, [r4, #12]
 800566c:	f04f 30ff 	mov.w	r0, #4294967295
 8005670:	e78e      	b.n	8005590 <__sflush_r+0x1c>
 8005672:	4407      	add	r7, r0
 8005674:	eba8 0800 	sub.w	r8, r8, r0
 8005678:	e7e9      	b.n	800564e <__sflush_r+0xda>
 800567a:	bf00      	nop
 800567c:	20400001 	.word	0x20400001

08005680 <_fflush_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	690b      	ldr	r3, [r1, #16]
 8005684:	4605      	mov	r5, r0
 8005686:	460c      	mov	r4, r1
 8005688:	b913      	cbnz	r3, 8005690 <_fflush_r+0x10>
 800568a:	2500      	movs	r5, #0
 800568c:	4628      	mov	r0, r5
 800568e:	bd38      	pop	{r3, r4, r5, pc}
 8005690:	b118      	cbz	r0, 800569a <_fflush_r+0x1a>
 8005692:	6983      	ldr	r3, [r0, #24]
 8005694:	b90b      	cbnz	r3, 800569a <_fflush_r+0x1a>
 8005696:	f000 f887 	bl	80057a8 <__sinit>
 800569a:	4b14      	ldr	r3, [pc, #80]	; (80056ec <_fflush_r+0x6c>)
 800569c:	429c      	cmp	r4, r3
 800569e:	d11b      	bne.n	80056d8 <_fflush_r+0x58>
 80056a0:	686c      	ldr	r4, [r5, #4]
 80056a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0ef      	beq.n	800568a <_fflush_r+0xa>
 80056aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056ac:	07d0      	lsls	r0, r2, #31
 80056ae:	d404      	bmi.n	80056ba <_fflush_r+0x3a>
 80056b0:	0599      	lsls	r1, r3, #22
 80056b2:	d402      	bmi.n	80056ba <_fflush_r+0x3a>
 80056b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056b6:	f000 f915 	bl	80058e4 <__retarget_lock_acquire_recursive>
 80056ba:	4628      	mov	r0, r5
 80056bc:	4621      	mov	r1, r4
 80056be:	f7ff ff59 	bl	8005574 <__sflush_r>
 80056c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056c4:	07da      	lsls	r2, r3, #31
 80056c6:	4605      	mov	r5, r0
 80056c8:	d4e0      	bmi.n	800568c <_fflush_r+0xc>
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	059b      	lsls	r3, r3, #22
 80056ce:	d4dd      	bmi.n	800568c <_fflush_r+0xc>
 80056d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056d2:	f000 f908 	bl	80058e6 <__retarget_lock_release_recursive>
 80056d6:	e7d9      	b.n	800568c <_fflush_r+0xc>
 80056d8:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <_fflush_r+0x70>)
 80056da:	429c      	cmp	r4, r3
 80056dc:	d101      	bne.n	80056e2 <_fflush_r+0x62>
 80056de:	68ac      	ldr	r4, [r5, #8]
 80056e0:	e7df      	b.n	80056a2 <_fflush_r+0x22>
 80056e2:	4b04      	ldr	r3, [pc, #16]	; (80056f4 <_fflush_r+0x74>)
 80056e4:	429c      	cmp	r4, r3
 80056e6:	bf08      	it	eq
 80056e8:	68ec      	ldreq	r4, [r5, #12]
 80056ea:	e7da      	b.n	80056a2 <_fflush_r+0x22>
 80056ec:	08005f70 	.word	0x08005f70
 80056f0:	08005f90 	.word	0x08005f90
 80056f4:	08005f50 	.word	0x08005f50

080056f8 <std>:
 80056f8:	2300      	movs	r3, #0
 80056fa:	b510      	push	{r4, lr}
 80056fc:	4604      	mov	r4, r0
 80056fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005706:	6083      	str	r3, [r0, #8]
 8005708:	8181      	strh	r1, [r0, #12]
 800570a:	6643      	str	r3, [r0, #100]	; 0x64
 800570c:	81c2      	strh	r2, [r0, #14]
 800570e:	6183      	str	r3, [r0, #24]
 8005710:	4619      	mov	r1, r3
 8005712:	2208      	movs	r2, #8
 8005714:	305c      	adds	r0, #92	; 0x5c
 8005716:	f7ff fb6f 	bl	8004df8 <memset>
 800571a:	4b05      	ldr	r3, [pc, #20]	; (8005730 <std+0x38>)
 800571c:	6263      	str	r3, [r4, #36]	; 0x24
 800571e:	4b05      	ldr	r3, [pc, #20]	; (8005734 <std+0x3c>)
 8005720:	62a3      	str	r3, [r4, #40]	; 0x28
 8005722:	4b05      	ldr	r3, [pc, #20]	; (8005738 <std+0x40>)
 8005724:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005726:	4b05      	ldr	r3, [pc, #20]	; (800573c <std+0x44>)
 8005728:	6224      	str	r4, [r4, #32]
 800572a:	6323      	str	r3, [r4, #48]	; 0x30
 800572c:	bd10      	pop	{r4, pc}
 800572e:	bf00      	nop
 8005730:	08005c1d 	.word	0x08005c1d
 8005734:	08005c3f 	.word	0x08005c3f
 8005738:	08005c77 	.word	0x08005c77
 800573c:	08005c9b 	.word	0x08005c9b

08005740 <_cleanup_r>:
 8005740:	4901      	ldr	r1, [pc, #4]	; (8005748 <_cleanup_r+0x8>)
 8005742:	f000 b8af 	b.w	80058a4 <_fwalk_reent>
 8005746:	bf00      	nop
 8005748:	08005681 	.word	0x08005681

0800574c <__sfmoreglue>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	2268      	movs	r2, #104	; 0x68
 8005750:	1e4d      	subs	r5, r1, #1
 8005752:	4355      	muls	r5, r2
 8005754:	460e      	mov	r6, r1
 8005756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800575a:	f000 f997 	bl	8005a8c <_malloc_r>
 800575e:	4604      	mov	r4, r0
 8005760:	b140      	cbz	r0, 8005774 <__sfmoreglue+0x28>
 8005762:	2100      	movs	r1, #0
 8005764:	e9c0 1600 	strd	r1, r6, [r0]
 8005768:	300c      	adds	r0, #12
 800576a:	60a0      	str	r0, [r4, #8]
 800576c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005770:	f7ff fb42 	bl	8004df8 <memset>
 8005774:	4620      	mov	r0, r4
 8005776:	bd70      	pop	{r4, r5, r6, pc}

08005778 <__sfp_lock_acquire>:
 8005778:	4801      	ldr	r0, [pc, #4]	; (8005780 <__sfp_lock_acquire+0x8>)
 800577a:	f000 b8b3 	b.w	80058e4 <__retarget_lock_acquire_recursive>
 800577e:	bf00      	nop
 8005780:	20000671 	.word	0x20000671

08005784 <__sfp_lock_release>:
 8005784:	4801      	ldr	r0, [pc, #4]	; (800578c <__sfp_lock_release+0x8>)
 8005786:	f000 b8ae 	b.w	80058e6 <__retarget_lock_release_recursive>
 800578a:	bf00      	nop
 800578c:	20000671 	.word	0x20000671

08005790 <__sinit_lock_acquire>:
 8005790:	4801      	ldr	r0, [pc, #4]	; (8005798 <__sinit_lock_acquire+0x8>)
 8005792:	f000 b8a7 	b.w	80058e4 <__retarget_lock_acquire_recursive>
 8005796:	bf00      	nop
 8005798:	20000672 	.word	0x20000672

0800579c <__sinit_lock_release>:
 800579c:	4801      	ldr	r0, [pc, #4]	; (80057a4 <__sinit_lock_release+0x8>)
 800579e:	f000 b8a2 	b.w	80058e6 <__retarget_lock_release_recursive>
 80057a2:	bf00      	nop
 80057a4:	20000672 	.word	0x20000672

080057a8 <__sinit>:
 80057a8:	b510      	push	{r4, lr}
 80057aa:	4604      	mov	r4, r0
 80057ac:	f7ff fff0 	bl	8005790 <__sinit_lock_acquire>
 80057b0:	69a3      	ldr	r3, [r4, #24]
 80057b2:	b11b      	cbz	r3, 80057bc <__sinit+0x14>
 80057b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b8:	f7ff bff0 	b.w	800579c <__sinit_lock_release>
 80057bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80057c0:	6523      	str	r3, [r4, #80]	; 0x50
 80057c2:	4b13      	ldr	r3, [pc, #76]	; (8005810 <__sinit+0x68>)
 80057c4:	4a13      	ldr	r2, [pc, #76]	; (8005814 <__sinit+0x6c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80057ca:	42a3      	cmp	r3, r4
 80057cc:	bf04      	itt	eq
 80057ce:	2301      	moveq	r3, #1
 80057d0:	61a3      	streq	r3, [r4, #24]
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 f820 	bl	8005818 <__sfp>
 80057d8:	6060      	str	r0, [r4, #4]
 80057da:	4620      	mov	r0, r4
 80057dc:	f000 f81c 	bl	8005818 <__sfp>
 80057e0:	60a0      	str	r0, [r4, #8]
 80057e2:	4620      	mov	r0, r4
 80057e4:	f000 f818 	bl	8005818 <__sfp>
 80057e8:	2200      	movs	r2, #0
 80057ea:	60e0      	str	r0, [r4, #12]
 80057ec:	2104      	movs	r1, #4
 80057ee:	6860      	ldr	r0, [r4, #4]
 80057f0:	f7ff ff82 	bl	80056f8 <std>
 80057f4:	68a0      	ldr	r0, [r4, #8]
 80057f6:	2201      	movs	r2, #1
 80057f8:	2109      	movs	r1, #9
 80057fa:	f7ff ff7d 	bl	80056f8 <std>
 80057fe:	68e0      	ldr	r0, [r4, #12]
 8005800:	2202      	movs	r2, #2
 8005802:	2112      	movs	r1, #18
 8005804:	f7ff ff78 	bl	80056f8 <std>
 8005808:	2301      	movs	r3, #1
 800580a:	61a3      	str	r3, [r4, #24]
 800580c:	e7d2      	b.n	80057b4 <__sinit+0xc>
 800580e:	bf00      	nop
 8005810:	08005f18 	.word	0x08005f18
 8005814:	08005741 	.word	0x08005741

08005818 <__sfp>:
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581a:	4607      	mov	r7, r0
 800581c:	f7ff ffac 	bl	8005778 <__sfp_lock_acquire>
 8005820:	4b1e      	ldr	r3, [pc, #120]	; (800589c <__sfp+0x84>)
 8005822:	681e      	ldr	r6, [r3, #0]
 8005824:	69b3      	ldr	r3, [r6, #24]
 8005826:	b913      	cbnz	r3, 800582e <__sfp+0x16>
 8005828:	4630      	mov	r0, r6
 800582a:	f7ff ffbd 	bl	80057a8 <__sinit>
 800582e:	3648      	adds	r6, #72	; 0x48
 8005830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005834:	3b01      	subs	r3, #1
 8005836:	d503      	bpl.n	8005840 <__sfp+0x28>
 8005838:	6833      	ldr	r3, [r6, #0]
 800583a:	b30b      	cbz	r3, 8005880 <__sfp+0x68>
 800583c:	6836      	ldr	r6, [r6, #0]
 800583e:	e7f7      	b.n	8005830 <__sfp+0x18>
 8005840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005844:	b9d5      	cbnz	r5, 800587c <__sfp+0x64>
 8005846:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <__sfp+0x88>)
 8005848:	60e3      	str	r3, [r4, #12]
 800584a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800584e:	6665      	str	r5, [r4, #100]	; 0x64
 8005850:	f000 f847 	bl	80058e2 <__retarget_lock_init_recursive>
 8005854:	f7ff ff96 	bl	8005784 <__sfp_lock_release>
 8005858:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800585c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005860:	6025      	str	r5, [r4, #0]
 8005862:	61a5      	str	r5, [r4, #24]
 8005864:	2208      	movs	r2, #8
 8005866:	4629      	mov	r1, r5
 8005868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800586c:	f7ff fac4 	bl	8004df8 <memset>
 8005870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005878:	4620      	mov	r0, r4
 800587a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800587c:	3468      	adds	r4, #104	; 0x68
 800587e:	e7d9      	b.n	8005834 <__sfp+0x1c>
 8005880:	2104      	movs	r1, #4
 8005882:	4638      	mov	r0, r7
 8005884:	f7ff ff62 	bl	800574c <__sfmoreglue>
 8005888:	4604      	mov	r4, r0
 800588a:	6030      	str	r0, [r6, #0]
 800588c:	2800      	cmp	r0, #0
 800588e:	d1d5      	bne.n	800583c <__sfp+0x24>
 8005890:	f7ff ff78 	bl	8005784 <__sfp_lock_release>
 8005894:	230c      	movs	r3, #12
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	e7ee      	b.n	8005878 <__sfp+0x60>
 800589a:	bf00      	nop
 800589c:	08005f18 	.word	0x08005f18
 80058a0:	ffff0001 	.word	0xffff0001

080058a4 <_fwalk_reent>:
 80058a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058a8:	4606      	mov	r6, r0
 80058aa:	4688      	mov	r8, r1
 80058ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058b0:	2700      	movs	r7, #0
 80058b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058b6:	f1b9 0901 	subs.w	r9, r9, #1
 80058ba:	d505      	bpl.n	80058c8 <_fwalk_reent+0x24>
 80058bc:	6824      	ldr	r4, [r4, #0]
 80058be:	2c00      	cmp	r4, #0
 80058c0:	d1f7      	bne.n	80058b2 <_fwalk_reent+0xe>
 80058c2:	4638      	mov	r0, r7
 80058c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058c8:	89ab      	ldrh	r3, [r5, #12]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d907      	bls.n	80058de <_fwalk_reent+0x3a>
 80058ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058d2:	3301      	adds	r3, #1
 80058d4:	d003      	beq.n	80058de <_fwalk_reent+0x3a>
 80058d6:	4629      	mov	r1, r5
 80058d8:	4630      	mov	r0, r6
 80058da:	47c0      	blx	r8
 80058dc:	4307      	orrs	r7, r0
 80058de:	3568      	adds	r5, #104	; 0x68
 80058e0:	e7e9      	b.n	80058b6 <_fwalk_reent+0x12>

080058e2 <__retarget_lock_init_recursive>:
 80058e2:	4770      	bx	lr

080058e4 <__retarget_lock_acquire_recursive>:
 80058e4:	4770      	bx	lr

080058e6 <__retarget_lock_release_recursive>:
 80058e6:	4770      	bx	lr

080058e8 <__swhatbuf_r>:
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	460e      	mov	r6, r1
 80058ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f0:	2900      	cmp	r1, #0
 80058f2:	b096      	sub	sp, #88	; 0x58
 80058f4:	4614      	mov	r4, r2
 80058f6:	461d      	mov	r5, r3
 80058f8:	da08      	bge.n	800590c <__swhatbuf_r+0x24>
 80058fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	602a      	str	r2, [r5, #0]
 8005902:	061a      	lsls	r2, r3, #24
 8005904:	d410      	bmi.n	8005928 <__swhatbuf_r+0x40>
 8005906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800590a:	e00e      	b.n	800592a <__swhatbuf_r+0x42>
 800590c:	466a      	mov	r2, sp
 800590e:	f000 f9eb 	bl	8005ce8 <_fstat_r>
 8005912:	2800      	cmp	r0, #0
 8005914:	dbf1      	blt.n	80058fa <__swhatbuf_r+0x12>
 8005916:	9a01      	ldr	r2, [sp, #4]
 8005918:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800591c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005920:	425a      	negs	r2, r3
 8005922:	415a      	adcs	r2, r3
 8005924:	602a      	str	r2, [r5, #0]
 8005926:	e7ee      	b.n	8005906 <__swhatbuf_r+0x1e>
 8005928:	2340      	movs	r3, #64	; 0x40
 800592a:	2000      	movs	r0, #0
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	b016      	add	sp, #88	; 0x58
 8005930:	bd70      	pop	{r4, r5, r6, pc}
	...

08005934 <__smakebuf_r>:
 8005934:	898b      	ldrh	r3, [r1, #12]
 8005936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005938:	079d      	lsls	r5, r3, #30
 800593a:	4606      	mov	r6, r0
 800593c:	460c      	mov	r4, r1
 800593e:	d507      	bpl.n	8005950 <__smakebuf_r+0x1c>
 8005940:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	6123      	str	r3, [r4, #16]
 8005948:	2301      	movs	r3, #1
 800594a:	6163      	str	r3, [r4, #20]
 800594c:	b002      	add	sp, #8
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	ab01      	add	r3, sp, #4
 8005952:	466a      	mov	r2, sp
 8005954:	f7ff ffc8 	bl	80058e8 <__swhatbuf_r>
 8005958:	9900      	ldr	r1, [sp, #0]
 800595a:	4605      	mov	r5, r0
 800595c:	4630      	mov	r0, r6
 800595e:	f000 f895 	bl	8005a8c <_malloc_r>
 8005962:	b948      	cbnz	r0, 8005978 <__smakebuf_r+0x44>
 8005964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005968:	059a      	lsls	r2, r3, #22
 800596a:	d4ef      	bmi.n	800594c <__smakebuf_r+0x18>
 800596c:	f023 0303 	bic.w	r3, r3, #3
 8005970:	f043 0302 	orr.w	r3, r3, #2
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	e7e3      	b.n	8005940 <__smakebuf_r+0xc>
 8005978:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <__smakebuf_r+0x7c>)
 800597a:	62b3      	str	r3, [r6, #40]	; 0x28
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	6020      	str	r0, [r4, #0]
 8005980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005984:	81a3      	strh	r3, [r4, #12]
 8005986:	9b00      	ldr	r3, [sp, #0]
 8005988:	6163      	str	r3, [r4, #20]
 800598a:	9b01      	ldr	r3, [sp, #4]
 800598c:	6120      	str	r0, [r4, #16]
 800598e:	b15b      	cbz	r3, 80059a8 <__smakebuf_r+0x74>
 8005990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005994:	4630      	mov	r0, r6
 8005996:	f000 f9b9 	bl	8005d0c <_isatty_r>
 800599a:	b128      	cbz	r0, 80059a8 <__smakebuf_r+0x74>
 800599c:	89a3      	ldrh	r3, [r4, #12]
 800599e:	f023 0303 	bic.w	r3, r3, #3
 80059a2:	f043 0301 	orr.w	r3, r3, #1
 80059a6:	81a3      	strh	r3, [r4, #12]
 80059a8:	89a0      	ldrh	r0, [r4, #12]
 80059aa:	4305      	orrs	r5, r0
 80059ac:	81a5      	strh	r5, [r4, #12]
 80059ae:	e7cd      	b.n	800594c <__smakebuf_r+0x18>
 80059b0:	08005741 	.word	0x08005741

080059b4 <_free_r>:
 80059b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059b6:	2900      	cmp	r1, #0
 80059b8:	d044      	beq.n	8005a44 <_free_r+0x90>
 80059ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059be:	9001      	str	r0, [sp, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f1a1 0404 	sub.w	r4, r1, #4
 80059c6:	bfb8      	it	lt
 80059c8:	18e4      	addlt	r4, r4, r3
 80059ca:	f000 f9c1 	bl	8005d50 <__malloc_lock>
 80059ce:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <_free_r+0x94>)
 80059d0:	9801      	ldr	r0, [sp, #4]
 80059d2:	6813      	ldr	r3, [r2, #0]
 80059d4:	b933      	cbnz	r3, 80059e4 <_free_r+0x30>
 80059d6:	6063      	str	r3, [r4, #4]
 80059d8:	6014      	str	r4, [r2, #0]
 80059da:	b003      	add	sp, #12
 80059dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059e0:	f000 b9bc 	b.w	8005d5c <__malloc_unlock>
 80059e4:	42a3      	cmp	r3, r4
 80059e6:	d908      	bls.n	80059fa <_free_r+0x46>
 80059e8:	6825      	ldr	r5, [r4, #0]
 80059ea:	1961      	adds	r1, r4, r5
 80059ec:	428b      	cmp	r3, r1
 80059ee:	bf01      	itttt	eq
 80059f0:	6819      	ldreq	r1, [r3, #0]
 80059f2:	685b      	ldreq	r3, [r3, #4]
 80059f4:	1949      	addeq	r1, r1, r5
 80059f6:	6021      	streq	r1, [r4, #0]
 80059f8:	e7ed      	b.n	80059d6 <_free_r+0x22>
 80059fa:	461a      	mov	r2, r3
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	b10b      	cbz	r3, 8005a04 <_free_r+0x50>
 8005a00:	42a3      	cmp	r3, r4
 8005a02:	d9fa      	bls.n	80059fa <_free_r+0x46>
 8005a04:	6811      	ldr	r1, [r2, #0]
 8005a06:	1855      	adds	r5, r2, r1
 8005a08:	42a5      	cmp	r5, r4
 8005a0a:	d10b      	bne.n	8005a24 <_free_r+0x70>
 8005a0c:	6824      	ldr	r4, [r4, #0]
 8005a0e:	4421      	add	r1, r4
 8005a10:	1854      	adds	r4, r2, r1
 8005a12:	42a3      	cmp	r3, r4
 8005a14:	6011      	str	r1, [r2, #0]
 8005a16:	d1e0      	bne.n	80059da <_free_r+0x26>
 8005a18:	681c      	ldr	r4, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	6053      	str	r3, [r2, #4]
 8005a1e:	4421      	add	r1, r4
 8005a20:	6011      	str	r1, [r2, #0]
 8005a22:	e7da      	b.n	80059da <_free_r+0x26>
 8005a24:	d902      	bls.n	8005a2c <_free_r+0x78>
 8005a26:	230c      	movs	r3, #12
 8005a28:	6003      	str	r3, [r0, #0]
 8005a2a:	e7d6      	b.n	80059da <_free_r+0x26>
 8005a2c:	6825      	ldr	r5, [r4, #0]
 8005a2e:	1961      	adds	r1, r4, r5
 8005a30:	428b      	cmp	r3, r1
 8005a32:	bf04      	itt	eq
 8005a34:	6819      	ldreq	r1, [r3, #0]
 8005a36:	685b      	ldreq	r3, [r3, #4]
 8005a38:	6063      	str	r3, [r4, #4]
 8005a3a:	bf04      	itt	eq
 8005a3c:	1949      	addeq	r1, r1, r5
 8005a3e:	6021      	streq	r1, [r4, #0]
 8005a40:	6054      	str	r4, [r2, #4]
 8005a42:	e7ca      	b.n	80059da <_free_r+0x26>
 8005a44:	b003      	add	sp, #12
 8005a46:	bd30      	pop	{r4, r5, pc}
 8005a48:	20000674 	.word	0x20000674

08005a4c <sbrk_aligned>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	4e0e      	ldr	r6, [pc, #56]	; (8005a88 <sbrk_aligned+0x3c>)
 8005a50:	460c      	mov	r4, r1
 8005a52:	6831      	ldr	r1, [r6, #0]
 8005a54:	4605      	mov	r5, r0
 8005a56:	b911      	cbnz	r1, 8005a5e <sbrk_aligned+0x12>
 8005a58:	f000 f88c 	bl	8005b74 <_sbrk_r>
 8005a5c:	6030      	str	r0, [r6, #0]
 8005a5e:	4621      	mov	r1, r4
 8005a60:	4628      	mov	r0, r5
 8005a62:	f000 f887 	bl	8005b74 <_sbrk_r>
 8005a66:	1c43      	adds	r3, r0, #1
 8005a68:	d00a      	beq.n	8005a80 <sbrk_aligned+0x34>
 8005a6a:	1cc4      	adds	r4, r0, #3
 8005a6c:	f024 0403 	bic.w	r4, r4, #3
 8005a70:	42a0      	cmp	r0, r4
 8005a72:	d007      	beq.n	8005a84 <sbrk_aligned+0x38>
 8005a74:	1a21      	subs	r1, r4, r0
 8005a76:	4628      	mov	r0, r5
 8005a78:	f000 f87c 	bl	8005b74 <_sbrk_r>
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d101      	bne.n	8005a84 <sbrk_aligned+0x38>
 8005a80:	f04f 34ff 	mov.w	r4, #4294967295
 8005a84:	4620      	mov	r0, r4
 8005a86:	bd70      	pop	{r4, r5, r6, pc}
 8005a88:	20000678 	.word	0x20000678

08005a8c <_malloc_r>:
 8005a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a90:	1ccd      	adds	r5, r1, #3
 8005a92:	f025 0503 	bic.w	r5, r5, #3
 8005a96:	3508      	adds	r5, #8
 8005a98:	2d0c      	cmp	r5, #12
 8005a9a:	bf38      	it	cc
 8005a9c:	250c      	movcc	r5, #12
 8005a9e:	2d00      	cmp	r5, #0
 8005aa0:	4607      	mov	r7, r0
 8005aa2:	db01      	blt.n	8005aa8 <_malloc_r+0x1c>
 8005aa4:	42a9      	cmp	r1, r5
 8005aa6:	d905      	bls.n	8005ab4 <_malloc_r+0x28>
 8005aa8:	230c      	movs	r3, #12
 8005aaa:	603b      	str	r3, [r7, #0]
 8005aac:	2600      	movs	r6, #0
 8005aae:	4630      	mov	r0, r6
 8005ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab4:	4e2e      	ldr	r6, [pc, #184]	; (8005b70 <_malloc_r+0xe4>)
 8005ab6:	f000 f94b 	bl	8005d50 <__malloc_lock>
 8005aba:	6833      	ldr	r3, [r6, #0]
 8005abc:	461c      	mov	r4, r3
 8005abe:	bb34      	cbnz	r4, 8005b0e <_malloc_r+0x82>
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	f7ff ffc2 	bl	8005a4c <sbrk_aligned>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	4604      	mov	r4, r0
 8005acc:	d14d      	bne.n	8005b6a <_malloc_r+0xde>
 8005ace:	6834      	ldr	r4, [r6, #0]
 8005ad0:	4626      	mov	r6, r4
 8005ad2:	2e00      	cmp	r6, #0
 8005ad4:	d140      	bne.n	8005b58 <_malloc_r+0xcc>
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	4631      	mov	r1, r6
 8005ada:	4638      	mov	r0, r7
 8005adc:	eb04 0803 	add.w	r8, r4, r3
 8005ae0:	f000 f848 	bl	8005b74 <_sbrk_r>
 8005ae4:	4580      	cmp	r8, r0
 8005ae6:	d13a      	bne.n	8005b5e <_malloc_r+0xd2>
 8005ae8:	6821      	ldr	r1, [r4, #0]
 8005aea:	3503      	adds	r5, #3
 8005aec:	1a6d      	subs	r5, r5, r1
 8005aee:	f025 0503 	bic.w	r5, r5, #3
 8005af2:	3508      	adds	r5, #8
 8005af4:	2d0c      	cmp	r5, #12
 8005af6:	bf38      	it	cc
 8005af8:	250c      	movcc	r5, #12
 8005afa:	4629      	mov	r1, r5
 8005afc:	4638      	mov	r0, r7
 8005afe:	f7ff ffa5 	bl	8005a4c <sbrk_aligned>
 8005b02:	3001      	adds	r0, #1
 8005b04:	d02b      	beq.n	8005b5e <_malloc_r+0xd2>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	442b      	add	r3, r5
 8005b0a:	6023      	str	r3, [r4, #0]
 8005b0c:	e00e      	b.n	8005b2c <_malloc_r+0xa0>
 8005b0e:	6822      	ldr	r2, [r4, #0]
 8005b10:	1b52      	subs	r2, r2, r5
 8005b12:	d41e      	bmi.n	8005b52 <_malloc_r+0xc6>
 8005b14:	2a0b      	cmp	r2, #11
 8005b16:	d916      	bls.n	8005b46 <_malloc_r+0xba>
 8005b18:	1961      	adds	r1, r4, r5
 8005b1a:	42a3      	cmp	r3, r4
 8005b1c:	6025      	str	r5, [r4, #0]
 8005b1e:	bf18      	it	ne
 8005b20:	6059      	strne	r1, [r3, #4]
 8005b22:	6863      	ldr	r3, [r4, #4]
 8005b24:	bf08      	it	eq
 8005b26:	6031      	streq	r1, [r6, #0]
 8005b28:	5162      	str	r2, [r4, r5]
 8005b2a:	604b      	str	r3, [r1, #4]
 8005b2c:	4638      	mov	r0, r7
 8005b2e:	f104 060b 	add.w	r6, r4, #11
 8005b32:	f000 f913 	bl	8005d5c <__malloc_unlock>
 8005b36:	f026 0607 	bic.w	r6, r6, #7
 8005b3a:	1d23      	adds	r3, r4, #4
 8005b3c:	1af2      	subs	r2, r6, r3
 8005b3e:	d0b6      	beq.n	8005aae <_malloc_r+0x22>
 8005b40:	1b9b      	subs	r3, r3, r6
 8005b42:	50a3      	str	r3, [r4, r2]
 8005b44:	e7b3      	b.n	8005aae <_malloc_r+0x22>
 8005b46:	6862      	ldr	r2, [r4, #4]
 8005b48:	42a3      	cmp	r3, r4
 8005b4a:	bf0c      	ite	eq
 8005b4c:	6032      	streq	r2, [r6, #0]
 8005b4e:	605a      	strne	r2, [r3, #4]
 8005b50:	e7ec      	b.n	8005b2c <_malloc_r+0xa0>
 8005b52:	4623      	mov	r3, r4
 8005b54:	6864      	ldr	r4, [r4, #4]
 8005b56:	e7b2      	b.n	8005abe <_malloc_r+0x32>
 8005b58:	4634      	mov	r4, r6
 8005b5a:	6876      	ldr	r6, [r6, #4]
 8005b5c:	e7b9      	b.n	8005ad2 <_malloc_r+0x46>
 8005b5e:	230c      	movs	r3, #12
 8005b60:	603b      	str	r3, [r7, #0]
 8005b62:	4638      	mov	r0, r7
 8005b64:	f000 f8fa 	bl	8005d5c <__malloc_unlock>
 8005b68:	e7a1      	b.n	8005aae <_malloc_r+0x22>
 8005b6a:	6025      	str	r5, [r4, #0]
 8005b6c:	e7de      	b.n	8005b2c <_malloc_r+0xa0>
 8005b6e:	bf00      	nop
 8005b70:	20000674 	.word	0x20000674

08005b74 <_sbrk_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4d06      	ldr	r5, [pc, #24]	; (8005b90 <_sbrk_r+0x1c>)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	602b      	str	r3, [r5, #0]
 8005b80:	f7fa ff9e 	bl	8000ac0 <_sbrk>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d102      	bne.n	8005b8e <_sbrk_r+0x1a>
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	b103      	cbz	r3, 8005b8e <_sbrk_r+0x1a>
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
 8005b90:	2000067c 	.word	0x2000067c

08005b94 <_raise_r>:
 8005b94:	291f      	cmp	r1, #31
 8005b96:	b538      	push	{r3, r4, r5, lr}
 8005b98:	4604      	mov	r4, r0
 8005b9a:	460d      	mov	r5, r1
 8005b9c:	d904      	bls.n	8005ba8 <_raise_r+0x14>
 8005b9e:	2316      	movs	r3, #22
 8005ba0:	6003      	str	r3, [r0, #0]
 8005ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005baa:	b112      	cbz	r2, 8005bb2 <_raise_r+0x1e>
 8005bac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005bb0:	b94b      	cbnz	r3, 8005bc6 <_raise_r+0x32>
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f000 f830 	bl	8005c18 <_getpid_r>
 8005bb8:	462a      	mov	r2, r5
 8005bba:	4601      	mov	r1, r0
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bc2:	f000 b817 	b.w	8005bf4 <_kill_r>
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d00a      	beq.n	8005be0 <_raise_r+0x4c>
 8005bca:	1c59      	adds	r1, r3, #1
 8005bcc:	d103      	bne.n	8005bd6 <_raise_r+0x42>
 8005bce:	2316      	movs	r3, #22
 8005bd0:	6003      	str	r3, [r0, #0]
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	e7e7      	b.n	8005ba6 <_raise_r+0x12>
 8005bd6:	2400      	movs	r4, #0
 8005bd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005bdc:	4628      	mov	r0, r5
 8005bde:	4798      	blx	r3
 8005be0:	2000      	movs	r0, #0
 8005be2:	e7e0      	b.n	8005ba6 <_raise_r+0x12>

08005be4 <raise>:
 8005be4:	4b02      	ldr	r3, [pc, #8]	; (8005bf0 <raise+0xc>)
 8005be6:	4601      	mov	r1, r0
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	f7ff bfd3 	b.w	8005b94 <_raise_r>
 8005bee:	bf00      	nop
 8005bf0:	20000024 	.word	0x20000024

08005bf4 <_kill_r>:
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4d07      	ldr	r5, [pc, #28]	; (8005c14 <_kill_r+0x20>)
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	4608      	mov	r0, r1
 8005bfe:	4611      	mov	r1, r2
 8005c00:	602b      	str	r3, [r5, #0]
 8005c02:	f7fa fed5 	bl	80009b0 <_kill>
 8005c06:	1c43      	adds	r3, r0, #1
 8005c08:	d102      	bne.n	8005c10 <_kill_r+0x1c>
 8005c0a:	682b      	ldr	r3, [r5, #0]
 8005c0c:	b103      	cbz	r3, 8005c10 <_kill_r+0x1c>
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	bd38      	pop	{r3, r4, r5, pc}
 8005c12:	bf00      	nop
 8005c14:	2000067c 	.word	0x2000067c

08005c18 <_getpid_r>:
 8005c18:	f7fa bec2 	b.w	80009a0 <_getpid>

08005c1c <__sread>:
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	460c      	mov	r4, r1
 8005c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c24:	f000 f8a0 	bl	8005d68 <_read_r>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	bfab      	itete	ge
 8005c2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005c30:	181b      	addge	r3, r3, r0
 8005c32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c36:	bfac      	ite	ge
 8005c38:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c3a:	81a3      	strhlt	r3, [r4, #12]
 8005c3c:	bd10      	pop	{r4, pc}

08005c3e <__swrite>:
 8005c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c42:	461f      	mov	r7, r3
 8005c44:	898b      	ldrh	r3, [r1, #12]
 8005c46:	05db      	lsls	r3, r3, #23
 8005c48:	4605      	mov	r5, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	4616      	mov	r6, r2
 8005c4e:	d505      	bpl.n	8005c5c <__swrite+0x1e>
 8005c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c54:	2302      	movs	r3, #2
 8005c56:	2200      	movs	r2, #0
 8005c58:	f000 f868 	bl	8005d2c <_lseek_r>
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c66:	81a3      	strh	r3, [r4, #12]
 8005c68:	4632      	mov	r2, r6
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c72:	f000 b817 	b.w	8005ca4 <_write_r>

08005c76 <__sseek>:
 8005c76:	b510      	push	{r4, lr}
 8005c78:	460c      	mov	r4, r1
 8005c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7e:	f000 f855 	bl	8005d2c <_lseek_r>
 8005c82:	1c43      	adds	r3, r0, #1
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	bf15      	itete	ne
 8005c88:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c92:	81a3      	strheq	r3, [r4, #12]
 8005c94:	bf18      	it	ne
 8005c96:	81a3      	strhne	r3, [r4, #12]
 8005c98:	bd10      	pop	{r4, pc}

08005c9a <__sclose>:
 8005c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9e:	f000 b813 	b.w	8005cc8 <_close_r>
	...

08005ca4 <_write_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4d07      	ldr	r5, [pc, #28]	; (8005cc4 <_write_r+0x20>)
 8005ca8:	4604      	mov	r4, r0
 8005caa:	4608      	mov	r0, r1
 8005cac:	4611      	mov	r1, r2
 8005cae:	2200      	movs	r2, #0
 8005cb0:	602a      	str	r2, [r5, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f7fa feb3 	bl	8000a1e <_write>
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	d102      	bne.n	8005cc2 <_write_r+0x1e>
 8005cbc:	682b      	ldr	r3, [r5, #0]
 8005cbe:	b103      	cbz	r3, 8005cc2 <_write_r+0x1e>
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	bd38      	pop	{r3, r4, r5, pc}
 8005cc4:	2000067c 	.word	0x2000067c

08005cc8 <_close_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	4d06      	ldr	r5, [pc, #24]	; (8005ce4 <_close_r+0x1c>)
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4604      	mov	r4, r0
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	602b      	str	r3, [r5, #0]
 8005cd4:	f7fa febf 	bl	8000a56 <_close>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	d102      	bne.n	8005ce2 <_close_r+0x1a>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	b103      	cbz	r3, 8005ce2 <_close_r+0x1a>
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	2000067c 	.word	0x2000067c

08005ce8 <_fstat_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4d07      	ldr	r5, [pc, #28]	; (8005d08 <_fstat_r+0x20>)
 8005cec:	2300      	movs	r3, #0
 8005cee:	4604      	mov	r4, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	602b      	str	r3, [r5, #0]
 8005cf6:	f7fa feba 	bl	8000a6e <_fstat>
 8005cfa:	1c43      	adds	r3, r0, #1
 8005cfc:	d102      	bne.n	8005d04 <_fstat_r+0x1c>
 8005cfe:	682b      	ldr	r3, [r5, #0]
 8005d00:	b103      	cbz	r3, 8005d04 <_fstat_r+0x1c>
 8005d02:	6023      	str	r3, [r4, #0]
 8005d04:	bd38      	pop	{r3, r4, r5, pc}
 8005d06:	bf00      	nop
 8005d08:	2000067c 	.word	0x2000067c

08005d0c <_isatty_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4d06      	ldr	r5, [pc, #24]	; (8005d28 <_isatty_r+0x1c>)
 8005d10:	2300      	movs	r3, #0
 8005d12:	4604      	mov	r4, r0
 8005d14:	4608      	mov	r0, r1
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	f7fa feb9 	bl	8000a8e <_isatty>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_isatty_r+0x1a>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_isatty_r+0x1a>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	2000067c 	.word	0x2000067c

08005d2c <_lseek_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4d07      	ldr	r5, [pc, #28]	; (8005d4c <_lseek_r+0x20>)
 8005d30:	4604      	mov	r4, r0
 8005d32:	4608      	mov	r0, r1
 8005d34:	4611      	mov	r1, r2
 8005d36:	2200      	movs	r2, #0
 8005d38:	602a      	str	r2, [r5, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f7fa feb2 	bl	8000aa4 <_lseek>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	d102      	bne.n	8005d4a <_lseek_r+0x1e>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	b103      	cbz	r3, 8005d4a <_lseek_r+0x1e>
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	2000067c 	.word	0x2000067c

08005d50 <__malloc_lock>:
 8005d50:	4801      	ldr	r0, [pc, #4]	; (8005d58 <__malloc_lock+0x8>)
 8005d52:	f7ff bdc7 	b.w	80058e4 <__retarget_lock_acquire_recursive>
 8005d56:	bf00      	nop
 8005d58:	20000670 	.word	0x20000670

08005d5c <__malloc_unlock>:
 8005d5c:	4801      	ldr	r0, [pc, #4]	; (8005d64 <__malloc_unlock+0x8>)
 8005d5e:	f7ff bdc2 	b.w	80058e6 <__retarget_lock_release_recursive>
 8005d62:	bf00      	nop
 8005d64:	20000670 	.word	0x20000670

08005d68 <_read_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4d07      	ldr	r5, [pc, #28]	; (8005d88 <_read_r+0x20>)
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	4608      	mov	r0, r1
 8005d70:	4611      	mov	r1, r2
 8005d72:	2200      	movs	r2, #0
 8005d74:	602a      	str	r2, [r5, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	f7fa fe34 	bl	80009e4 <_read>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d102      	bne.n	8005d86 <_read_r+0x1e>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b103      	cbz	r3, 8005d86 <_read_r+0x1e>
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	2000067c 	.word	0x2000067c

08005d8c <_init>:
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8e:	bf00      	nop
 8005d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d92:	bc08      	pop	{r3}
 8005d94:	469e      	mov	lr, r3
 8005d96:	4770      	bx	lr

08005d98 <_fini>:
 8005d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9a:	bf00      	nop
 8005d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9e:	bc08      	pop	{r3}
 8005da0:	469e      	mov	lr, r3
 8005da2:	4770      	bx	lr

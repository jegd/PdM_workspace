
Ejercicio_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003040  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003204  08003204  00013204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003224  08003224  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800322c  0800322c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800322c  0800322c  0001322c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003230  08003230  00013230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  2000000c  08003240  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  08003240  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bfc  00000000  00000000  0002c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002e4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002eeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020baa  00000000  00000000  0002f7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c31c  00000000  00000000  00050382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c68bc  00000000  00000000  0005c69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122f5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002878  00000000  00000000  00122fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080031ec 	.word	0x080031ec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080031ec 	.word	0x080031ec

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 faff 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f83f 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f901 	bl	800071c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800051a:	f000 f8a7 	bl	800066c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800051e:	f000 f8cf 	bl	80006c0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
uint16_t led[3] = {LD1_Pin,LD2_Pin,LD3_Pin};
 8000522:	4a1a      	ldr	r2, [pc, #104]	; (800058c <main+0x84>)
 8000524:	463b      	mov	r3, r7
 8000526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800052a:	6018      	str	r0, [r3, #0]
 800052c:	3304      	adds	r3, #4
 800052e:	8019      	strh	r1, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOB,led[0],1);
 8000530:	883b      	ldrh	r3, [r7, #0]
 8000532:	2201      	movs	r2, #1
 8000534:	4619      	mov	r1, r3
 8000536:	4816      	ldr	r0, [pc, #88]	; (8000590 <main+0x88>)
 8000538:	f000 fdfa 	bl	8001130 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,led[1],0);
 800053c:	887b      	ldrh	r3, [r7, #2]
 800053e:	2200      	movs	r2, #0
 8000540:	4619      	mov	r1, r3
 8000542:	4813      	ldr	r0, [pc, #76]	; (8000590 <main+0x88>)
 8000544:	f000 fdf4 	bl	8001130 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,led[2],1);
 8000548:	88bb      	ldrh	r3, [r7, #4]
 800054a:	2201      	movs	r2, #1
 800054c:	4619      	mov	r1, r3
 800054e:	4810      	ldr	r0, [pc, #64]	; (8000590 <main+0x88>)
 8000550:	f000 fdee 	bl	8001130 <HAL_GPIO_WritePin>
	 HAL_Delay(2000);
 8000554:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000558:	f000 fb4c 	bl	8000bf4 <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOB,led[0],0);
 800055c:	883b      	ldrh	r3, [r7, #0]
 800055e:	2200      	movs	r2, #0
 8000560:	4619      	mov	r1, r3
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <main+0x88>)
 8000564:	f000 fde4 	bl	8001130 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,led[1],1);
 8000568:	887b      	ldrh	r3, [r7, #2]
 800056a:	2201      	movs	r2, #1
 800056c:	4619      	mov	r1, r3
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <main+0x88>)
 8000570:	f000 fdde 	bl	8001130 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,led[2],0);
 8000574:	88bb      	ldrh	r3, [r7, #4]
 8000576:	2200      	movs	r2, #0
 8000578:	4619      	mov	r1, r3
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <main+0x88>)
 800057c:	f000 fdd8 	bl	8001130 <HAL_GPIO_WritePin>
		 HAL_Delay(2000);
 8000580:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000584:	f000 fb36 	bl	8000bf4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB,led[0],1);
 8000588:	e7d2      	b.n	8000530 <main+0x28>
 800058a:	bf00      	nop
 800058c:	08003204 	.word	0x08003204
 8000590:	40020400 	.word	0x40020400

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2234      	movs	r2, #52	; 0x34
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fe1a 	bl	80031dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a28      	ldr	r2, [pc, #160]	; (8000664 <SystemClock_Config+0xd0>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b26      	ldr	r3, [pc, #152]	; (8000664 <SystemClock_Config+0xd0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	4b23      	ldr	r3, [pc, #140]	; (8000668 <SystemClock_Config+0xd4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a22      	ldr	r2, [pc, #136]	; (8000668 <SystemClock_Config+0xd4>)
 80005de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000604:	2304      	movs	r3, #4
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000608:	23a8      	movs	r3, #168	; 0xa8
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000610:	2307      	movs	r3, #7
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fd5d 	bl	80020dc <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000628:	f000 f926 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000638:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000642:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2105      	movs	r1, #5
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fed2 	bl	80013f4 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000656:	f000 f90f 	bl	8000878 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_USART3_UART_Init+0x50>)
 8000674:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 80006a4:	f001 ffb8 	bl	8002618 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006ae:	f000 f8e3 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000028 	.word	0x20000028
 80006bc:	40004800 	.word	0x40004800

080006c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ce:	2206      	movs	r2, #6
 80006d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e0:	2202      	movs	r2, #2
 80006e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000704:	f000 fd2d 	bl	8001162 <HAL_PCD_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800070e:	f000 f8b3 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000006c 	.word	0x2000006c

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	4b4c      	ldr	r3, [pc, #304]	; (8000868 <MX_GPIO_Init+0x14c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a4b      	ldr	r2, [pc, #300]	; (8000868 <MX_GPIO_Init+0x14c>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b49      	ldr	r3, [pc, #292]	; (8000868 <MX_GPIO_Init+0x14c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	4b45      	ldr	r3, [pc, #276]	; (8000868 <MX_GPIO_Init+0x14c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a44      	ldr	r2, [pc, #272]	; (8000868 <MX_GPIO_Init+0x14c>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b42      	ldr	r3, [pc, #264]	; (8000868 <MX_GPIO_Init+0x14c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <MX_GPIO_Init+0x14c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a3d      	ldr	r2, [pc, #244]	; (8000868 <MX_GPIO_Init+0x14c>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b3b      	ldr	r3, [pc, #236]	; (8000868 <MX_GPIO_Init+0x14c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b37      	ldr	r3, [pc, #220]	; (8000868 <MX_GPIO_Init+0x14c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a36      	ldr	r2, [pc, #216]	; (8000868 <MX_GPIO_Init+0x14c>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b34      	ldr	r3, [pc, #208]	; (8000868 <MX_GPIO_Init+0x14c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b30      	ldr	r3, [pc, #192]	; (8000868 <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a2f      	ldr	r2, [pc, #188]	; (8000868 <MX_GPIO_Init+0x14c>)
 80007ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <MX_GPIO_Init+0x14c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b29      	ldr	r3, [pc, #164]	; (8000868 <MX_GPIO_Init+0x14c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a28      	ldr	r2, [pc, #160]	; (8000868 <MX_GPIO_Init+0x14c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_GPIO_Init+0x14c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f244 0181 	movw	r1, #16513	; 0x4081
 80007e0:	4822      	ldr	r0, [pc, #136]	; (800086c <MX_GPIO_Init+0x150>)
 80007e2:	f000 fca5 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2140      	movs	r1, #64	; 0x40
 80007ea:	4821      	ldr	r0, [pc, #132]	; (8000870 <MX_GPIO_Init+0x154>)
 80007ec:	f000 fca0 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	481b      	ldr	r0, [pc, #108]	; (8000874 <MX_GPIO_Init+0x158>)
 8000808:	f000 fafe 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800080c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4811      	ldr	r0, [pc, #68]	; (800086c <MX_GPIO_Init+0x150>)
 8000826:	f000 faef 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800082a:	2340      	movs	r3, #64	; 0x40
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <MX_GPIO_Init+0x154>)
 8000842:	f000 fae1 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_GPIO_Init+0x154>)
 800085a:	f000 fad5 	bl	8000e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085e:	bf00      	nop
 8000860:	3730      	adds	r7, #48	; 0x30
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40020400 	.word	0x40020400
 8000870:	40021800 	.word	0x40021800
 8000874:	40020800 	.word	0x40020800

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <HAL_MspInit+0x4c>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000898:	6453      	str	r3, [r2, #68]	; 0x44
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a19      	ldr	r2, [pc, #100]	; (8000958 <HAL_UART_MspInit+0x84>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d12c      	bne.n	8000950 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <HAL_UART_MspInit+0x88>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a17      	ldr	r2, [pc, #92]	; (800095c <HAL_UART_MspInit+0x88>)
 8000900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_UART_MspInit+0x88>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_UART_MspInit+0x88>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a10      	ldr	r2, [pc, #64]	; (800095c <HAL_UART_MspInit+0x88>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_UART_MspInit+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800092e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000940:	2307      	movs	r3, #7
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <HAL_UART_MspInit+0x8c>)
 800094c:	f000 fa5c 	bl	8000e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40004800 	.word	0x40004800
 800095c:	40023800 	.word	0x40023800
 8000960:	40020c00 	.word	0x40020c00

08000964 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0a0      	sub	sp, #128	; 0x80
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	225c      	movs	r2, #92	; 0x5c
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f002 fc29 	bl	80031dc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000992:	d14e      	bne.n	8000a32 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000998:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800099a:	2300      	movs	r3, #0
 800099c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 fe40 	bl	8001628 <HAL_RCCEx_PeriphCLKConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80009ae:	f7ff ff63 	bl	8000878 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <HAL_PCD_MspInit+0xd8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a20      	ldr	r2, [pc, #128]	; (8000a3c <HAL_PCD_MspInit+0xd8>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <HAL_PCD_MspInit+0xd8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009ce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009e0:	230a      	movs	r3, #10
 80009e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009e8:	4619      	mov	r1, r3
 80009ea:	4815      	ldr	r0, [pc, #84]	; (8000a40 <HAL_PCD_MspInit+0xdc>)
 80009ec:	f000 fa0c 	bl	8000e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a02:	4619      	mov	r1, r3
 8000a04:	480e      	ldr	r0, [pc, #56]	; (8000a40 <HAL_PCD_MspInit+0xdc>)
 8000a06:	f000 f9ff 	bl	8000e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <HAL_PCD_MspInit+0xd8>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <HAL_PCD_MspInit+0xd8>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6353      	str	r3, [r2, #52]	; 0x34
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_PCD_MspInit+0xd8>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_PCD_MspInit+0xd8>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a24:	6453      	str	r3, [r2, #68]	; 0x44
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_PCD_MspInit+0xd8>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3780      	adds	r7, #128	; 0x80
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f890 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <SystemInit+0x20>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <SystemInit+0x20>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ac2:	490e      	ldr	r1, [pc, #56]	; (8000afc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad8:	4c0b      	ldr	r4, [pc, #44]	; (8000b08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ae6:	f7ff ffd7 	bl	8000a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aea:	f002 fb53 	bl	8003194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aee:	f7ff fd0b 	bl	8000508 <main>
  bx  lr    
 8000af2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b00:	08003234 	.word	0x08003234
  ldr r2, =_sbss
 8000b04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b08:	2000057c 	.word	0x2000057c

08000b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <HAL_Init+0x40>)
 8000b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_Init+0x40>)
 8000b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_Init+0x40>)
 8000b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f931 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f808 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fe9e 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023c00 	.word	0x40023c00

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x54>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x58>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f93b 	bl	8000dee <HAL_SYSTICK_Config>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00e      	b.n	8000ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d80a      	bhi.n	8000b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f000 f911 	bl	8000db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <HAL_InitTick+0x5c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000578 	.word	0x20000578

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000578 	.word	0x20000578

08000bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bfc:	f7ff ffee 	bl	8000bdc <HAL_GetTick>
 8000c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c0c:	d005      	beq.n	8000c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_Delay+0x44>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4413      	add	r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c1a:	bf00      	nop
 8000c1c:	f7ff ffde 	bl	8000bdc <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d8f7      	bhi.n	8000c1c <HAL_Delay+0x28>
  {
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008

08000c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6e:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	60d3      	str	r3, [r2, #12]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <__NVIC_GetPriorityGrouping+0x18>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	f003 0307 	and.w	r3, r3, #7
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	; 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d6c:	d301      	bcc.n	8000d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00f      	b.n	8000d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <SysTick_Config+0x40>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f7ff ff8e 	bl	8000ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <SysTick_Config+0x40>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <SysTick_Config+0x40>)
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	e000e010 	.word	0xe000e010

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff47 	bl	8000c3c <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff5c 	bl	8000c84 <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ff8e 	bl	8000cf4 <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff5d 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffb0 	bl	8000d5c <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	e165      	b.n	80010f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f040 8154 	bne.w	80010ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d005      	beq.n	8000e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d130      	bne.n	8000ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2203      	movs	r2, #3
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e90:	2201      	movs	r2, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	091b      	lsrs	r3, r3, #4
 8000ea6:	f003 0201 	and.w	r2, r3, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d017      	beq.n	8000ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d123      	bne.n	8000f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	08da      	lsrs	r2, r3, #3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3208      	adds	r2, #8
 8000f46:	69b9      	ldr	r1, [r7, #24]
 8000f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0203 	and.w	r2, r3, #3
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 80ae 	beq.w	80010ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b5d      	ldr	r3, [pc, #372]	; (8001108 <HAL_GPIO_Init+0x300>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a5c      	ldr	r2, [pc, #368]	; (8001108 <HAL_GPIO_Init+0x300>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b5a      	ldr	r3, [pc, #360]	; (8001108 <HAL_GPIO_Init+0x300>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000faa:	4a58      	ldr	r2, [pc, #352]	; (800110c <HAL_GPIO_Init+0x304>)
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4f      	ldr	r2, [pc, #316]	; (8001110 <HAL_GPIO_Init+0x308>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d025      	beq.n	8001022 <HAL_GPIO_Init+0x21a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4e      	ldr	r2, [pc, #312]	; (8001114 <HAL_GPIO_Init+0x30c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d01f      	beq.n	800101e <HAL_GPIO_Init+0x216>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4d      	ldr	r2, [pc, #308]	; (8001118 <HAL_GPIO_Init+0x310>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d019      	beq.n	800101a <HAL_GPIO_Init+0x212>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4c      	ldr	r2, [pc, #304]	; (800111c <HAL_GPIO_Init+0x314>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d013      	beq.n	8001016 <HAL_GPIO_Init+0x20e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4b      	ldr	r2, [pc, #300]	; (8001120 <HAL_GPIO_Init+0x318>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d00d      	beq.n	8001012 <HAL_GPIO_Init+0x20a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4a      	ldr	r2, [pc, #296]	; (8001124 <HAL_GPIO_Init+0x31c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d007      	beq.n	800100e <HAL_GPIO_Init+0x206>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a49      	ldr	r2, [pc, #292]	; (8001128 <HAL_GPIO_Init+0x320>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d101      	bne.n	800100a <HAL_GPIO_Init+0x202>
 8001006:	2306      	movs	r3, #6
 8001008:	e00c      	b.n	8001024 <HAL_GPIO_Init+0x21c>
 800100a:	2307      	movs	r3, #7
 800100c:	e00a      	b.n	8001024 <HAL_GPIO_Init+0x21c>
 800100e:	2305      	movs	r3, #5
 8001010:	e008      	b.n	8001024 <HAL_GPIO_Init+0x21c>
 8001012:	2304      	movs	r3, #4
 8001014:	e006      	b.n	8001024 <HAL_GPIO_Init+0x21c>
 8001016:	2303      	movs	r3, #3
 8001018:	e004      	b.n	8001024 <HAL_GPIO_Init+0x21c>
 800101a:	2302      	movs	r3, #2
 800101c:	e002      	b.n	8001024 <HAL_GPIO_Init+0x21c>
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <HAL_GPIO_Init+0x21c>
 8001022:	2300      	movs	r3, #0
 8001024:	69fa      	ldr	r2, [r7, #28]
 8001026:	f002 0203 	and.w	r2, r2, #3
 800102a:	0092      	lsls	r2, r2, #2
 800102c:	4093      	lsls	r3, r2
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001034:	4935      	ldr	r1, [pc, #212]	; (800110c <HAL_GPIO_Init+0x304>)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001042:	4b3a      	ldr	r3, [pc, #232]	; (800112c <HAL_GPIO_Init+0x324>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001066:	4a31      	ldr	r2, [pc, #196]	; (800112c <HAL_GPIO_Init+0x324>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800106c:	4b2f      	ldr	r3, [pc, #188]	; (800112c <HAL_GPIO_Init+0x324>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001090:	4a26      	ldr	r2, [pc, #152]	; (800112c <HAL_GPIO_Init+0x324>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <HAL_GPIO_Init+0x324>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ba:	4a1c      	ldr	r2, [pc, #112]	; (800112c <HAL_GPIO_Init+0x324>)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <HAL_GPIO_Init+0x324>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010e4:	4a11      	ldr	r2, [pc, #68]	; (800112c <HAL_GPIO_Init+0x324>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3301      	adds	r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	f67f ae96 	bls.w	8000e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40013800 	.word	0x40013800
 8001110:	40020000 	.word	0x40020000
 8001114:	40020400 	.word	0x40020400
 8001118:	40020800 	.word	0x40020800
 800111c:	40020c00 	.word	0x40020c00
 8001120:	40021000 	.word	0x40021000
 8001124:	40021400 	.word	0x40021400
 8001128:	40021800 	.word	0x40021800
 800112c:	40013c00 	.word	0x40013c00

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800114c:	e003      	b.n	8001156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	041a      	lsls	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	619a      	str	r2, [r3, #24]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001162:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001164:	b08f      	sub	sp, #60	; 0x3c
 8001166:	af0a      	add	r7, sp, #40	; 0x28
 8001168:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e116      	b.n	80013a2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d106      	bne.n	8001194 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff fbe8 	bl	8000964 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2203      	movs	r2, #3
 8001198:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 fd53 	bl	8002c5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	687e      	ldr	r6, [r7, #4]
 80011c0:	466d      	mov	r5, sp
 80011c2:	f106 0410 	add.w	r4, r6, #16
 80011c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80011d6:	1d33      	adds	r3, r6, #4
 80011d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011da:	6838      	ldr	r0, [r7, #0]
 80011dc:	f001 fcde 	bl	8002b9c <USB_CoreInit>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d005      	beq.n	80011f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2202      	movs	r2, #2
 80011ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e0d7      	b.n	80013a2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f001 fd41 	bl	8002c80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e04a      	b.n	800129a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4413      	add	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	333d      	adds	r3, #61	; 0x3d
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001218:	7bfa      	ldrb	r2, [r7, #15]
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	333c      	adds	r3, #60	; 0x3c
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	b298      	uxth	r0, r3
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	3344      	adds	r3, #68	; 0x44
 8001240:	4602      	mov	r2, r0
 8001242:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	3340      	adds	r3, #64	; 0x40
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	3348      	adds	r3, #72	; 0x48
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	334c      	adds	r3, #76	; 0x4c
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	3354      	adds	r3, #84	; 0x54
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	3301      	adds	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d3af      	bcc.n	8001204 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e044      	b.n	8001334 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012aa:	7bfa      	ldrb	r2, [r7, #15]
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80012d2:	7bfa      	ldrb	r2, [r7, #15]
 80012d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4413      	add	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4413      	add	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	3301      	adds	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	429a      	cmp	r2, r3
 800133c:	d3b5      	bcc.n	80012aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	687e      	ldr	r6, [r7, #4]
 8001346:	466d      	mov	r5, sp
 8001348:	f106 0410 	add.w	r4, r6, #16
 800134c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800134e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001354:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001358:	e885 0003 	stmia.w	r5, {r0, r1}
 800135c:	1d33      	adds	r3, r6, #4
 800135e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f001 fcd9 	bl	8002d18 <USB_DevInit>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d005      	beq.n	8001378 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2202      	movs	r2, #2
 8001370:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e014      	b.n	80013a2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	2b01      	cmp	r3, #1
 800138e:	d102      	bne.n	8001396 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f80a 	bl	80013aa <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fe97 	bl	80030ce <USB_DevDisconnect>

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	f043 0303 	orr.w	r3, r3, #3
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e0cc      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001408:	4b68      	ldr	r3, [pc, #416]	; (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 030f 	and.w	r3, r3, #15
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d90c      	bls.n	8001430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001416:	4b65      	ldr	r3, [pc, #404]	; (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800141e:	4b63      	ldr	r3, [pc, #396]	; (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d001      	beq.n	8001430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0b8      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d020      	beq.n	800147e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001448:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	4a58      	ldr	r2, [pc, #352]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001452:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d005      	beq.n	800146c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	4a52      	ldr	r2, [pc, #328]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800146a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800146c:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	494d      	ldr	r1, [pc, #308]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	4313      	orrs	r3, r2
 800147c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d044      	beq.n	8001514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001492:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d119      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e07f      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d003      	beq.n	80014b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d107      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d109      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e06f      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c2:	4b3b      	ldr	r3, [pc, #236]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e067      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d2:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f023 0203 	bic.w	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4934      	ldr	r1, [pc, #208]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e4:	f7ff fb7a 	bl	8000bdc <HAL_GetTick>
 80014e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ec:	f7ff fb76 	bl	8000bdc <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e04f      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001502:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 020c 	and.w	r2, r3, #12
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	429a      	cmp	r2, r3
 8001512:	d1eb      	bne.n	80014ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001514:	4b25      	ldr	r3, [pc, #148]	; (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d20c      	bcs.n	800153c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d001      	beq.n	800153c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e032      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4916      	ldr	r1, [pc, #88]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d009      	beq.n	800157a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	490e      	ldr	r1, [pc, #56]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	4313      	orrs	r3, r2
 8001578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800157a:	f000 fb7f 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 800157e:	4602      	mov	r2, r0
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	490a      	ldr	r1, [pc, #40]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 800158c:	5ccb      	ldrb	r3, [r1, r3]
 800158e:	fa22 f303 	lsr.w	r3, r2, r3
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_ClockConfig+0x1c8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fada 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00
 80015b0:	40023800 	.word	0x40023800
 80015b4:	0800320c 	.word	0x0800320c
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000004 	.word	0x20000004

080015c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000000 	.word	0x20000000

080015d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015dc:	f7ff fff0 	bl	80015c0 <HAL_RCC_GetHCLKFreq>
 80015e0:	4602      	mov	r2, r0
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	0a9b      	lsrs	r3, r3, #10
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	4903      	ldr	r1, [pc, #12]	; (80015fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ee:	5ccb      	ldrb	r3, [r1, r3]
 80015f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	0800321c 	.word	0x0800321c

08001600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001604:	f7ff ffdc 	bl	80015c0 <HAL_RCC_GetHCLKFreq>
 8001608:	4602      	mov	r2, r0
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	0b5b      	lsrs	r3, r3, #13
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	4903      	ldr	r1, [pc, #12]	; (8001624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001616:	5ccb      	ldrb	r3, [r1, r3]
 8001618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800161c:	4618      	mov	r0, r3
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	0800321c 	.word	0x0800321c

08001628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08c      	sub	sp, #48	; 0x30
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	d010      	beq.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001660:	4b6f      	ldr	r3, [pc, #444]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001666:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166e:	496c      	ldr	r1, [pc, #432]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001670:	4313      	orrs	r3, r2
 8001672:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800167e:	2301      	movs	r3, #1
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d010      	beq.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800168e:	4b64      	ldr	r3, [pc, #400]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001694:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169c:	4960      	ldr	r1, [pc, #384]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80016ac:	2301      	movs	r3, #1
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d017      	beq.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016bc:	4b58      	ldr	r3, [pc, #352]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4955      	ldr	r1, [pc, #340]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016da:	d101      	bne.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80016dc:	2301      	movs	r3, #1
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80016e8:	2301      	movs	r3, #1
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d017      	beq.n	8001728 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80016f8:	4b49      	ldr	r3, [pc, #292]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001706:	4946      	ldr	r1, [pc, #280]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001708:	4313      	orrs	r3, r2
 800170a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001716:	d101      	bne.n	800171c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001718:	2301      	movs	r3, #1
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001724:	2301      	movs	r3, #1
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0320 	and.w	r3, r3, #32
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 808a 	beq.w	800184a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	4b39      	ldr	r3, [pc, #228]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a38      	ldr	r2, [pc, #224]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b36      	ldr	r3, [pc, #216]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001752:	4b34      	ldr	r3, [pc, #208]	; (8001824 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a33      	ldr	r2, [pc, #204]	; (8001824 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800175e:	f7ff fa3d 	bl	8000bdc <HAL_GetTick>
 8001762:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001766:	f7ff fa39 	bl	8000bdc <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e278      	b.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001784:	4b26      	ldr	r3, [pc, #152]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800178c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d02f      	beq.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800179c:	6a3a      	ldr	r2, [r7, #32]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d028      	beq.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017aa:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80017ac:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80017b8:	4a19      	ldr	r2, [pc, #100]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d114      	bne.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff fa07 	bl	8000bdc <HAL_GetTick>
 80017ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff fa03 	bl	8000bdc <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e240      	b.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0ee      	beq.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001800:	d114      	bne.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001816:	4902      	ldr	r1, [pc, #8]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]
 800181c:	e00c      	b.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800
 8001824:	40007000 	.word	0x40007000
 8001828:	42470e40 	.word	0x42470e40
 800182c:	4b4a      	ldr	r3, [pc, #296]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a49      	ldr	r2, [pc, #292]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001832:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001836:	6093      	str	r3, [r2, #8]
 8001838:	4b47      	ldr	r3, [pc, #284]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800183a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001844:	4944      	ldr	r1, [pc, #272]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001846:	4313      	orrs	r3, r2
 8001848:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	2b00      	cmp	r3, #0
 8001854:	d004      	beq.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800185c:	4b3f      	ldr	r3, [pc, #252]	; (800195c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800185e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00a      	beq.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800186c:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800186e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001872:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	4937      	ldr	r1, [pc, #220]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800187c:	4313      	orrs	r3, r2
 800187e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00a      	beq.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800188e:	4b32      	ldr	r3, [pc, #200]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001894:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189c:	492e      	ldr	r1, [pc, #184]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d011      	beq.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018b0:	4b29      	ldr	r3, [pc, #164]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018be:	4926      	ldr	r1, [pc, #152]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018ce:	d101      	bne.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80018d0:	2301      	movs	r3, #1
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00a      	beq.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	491a      	ldr	r1, [pc, #104]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d011      	beq.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001908:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001910:	4911      	ldr	r1, [pc, #68]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001912:	4313      	orrs	r3, r2
 8001914:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800191c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001920:	d101      	bne.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001922:	2301      	movs	r3, #1
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001928:	2b01      	cmp	r3, #1
 800192a:	d005      	beq.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001934:	f040 80ff 	bne.w	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800193e:	f7ff f94d 	bl	8000bdc <HAL_GetTick>
 8001942:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001944:	e00e      	b.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001946:	f7ff f949 	bl	8000bdc <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d907      	bls.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e188      	b.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001958:	40023800 	.word	0x40023800
 800195c:	424711e0 	.word	0x424711e0
 8001960:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001964:	4b7e      	ldr	r3, [pc, #504]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1ea      	bne.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	2b00      	cmp	r3, #0
 8001982:	d009      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800198c:	2b00      	cmp	r3, #0
 800198e:	d028      	beq.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001994:	2b00      	cmp	r3, #0
 8001996:	d124      	bne.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001998:	4b71      	ldr	r3, [pc, #452]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800199a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	3301      	adds	r3, #1
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80019aa:	4b6d      	ldr	r3, [pc, #436]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019b0:	0e1b      	lsrs	r3, r3, #24
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	431a      	orrs	r2, r3
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	085b      	lsrs	r3, r3, #1
 80019c8:	3b01      	subs	r3, #1
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	431a      	orrs	r2, r3
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	061b      	lsls	r3, r3, #24
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	071b      	lsls	r3, r3, #28
 80019da:	4961      	ldr	r1, [pc, #388]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019f6:	d00a      	beq.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d035      	beq.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a0c:	d130      	bne.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001a0e:	4b54      	ldr	r3, [pc, #336]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a14:	0c1b      	lsrs	r3, r3, #16
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a20:	4b4f      	ldr	r3, [pc, #316]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a26:	0f1b      	lsrs	r3, r3, #28
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	019b      	lsls	r3, r3, #6
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	085b      	lsrs	r3, r3, #1
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	041b      	lsls	r3, r3, #16
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	061b      	lsls	r3, r3, #24
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	071b      	lsls	r3, r3, #28
 8001a50:	4943      	ldr	r1, [pc, #268]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001a58:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a5e:	f023 021f 	bic.w	r2, r3, #31
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	3b01      	subs	r3, #1
 8001a68:	493d      	ldr	r1, [pc, #244]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d029      	beq.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a84:	d124      	bne.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001a86:	4b36      	ldr	r3, [pc, #216]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a8c:	0c1b      	lsrs	r3, r3, #16
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	3301      	adds	r3, #1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a98:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a9e:	0f1b      	lsrs	r3, r3, #28
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	019b      	lsls	r3, r3, #6
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	041b      	lsls	r3, r3, #16
 8001abc:	431a      	orrs	r2, r3
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	071b      	lsls	r3, r3, #28
 8001ac8:	4925      	ldr	r1, [pc, #148]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d016      	beq.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	019b      	lsls	r3, r3, #6
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	085b      	lsrs	r3, r3, #1
 8001aee:	3b01      	subs	r3, #1
 8001af0:	041b      	lsls	r3, r3, #16
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	061b      	lsls	r3, r3, #24
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	071b      	lsls	r3, r3, #28
 8001b02:	4917      	ldr	r1, [pc, #92]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b10:	f7ff f864 	bl	8000bdc <HAL_GetTick>
 8001b14:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b18:	f7ff f860 	bl	8000bdc <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e09f      	b.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	f040 8095 	bne.w	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b44:	f7ff f84a 	bl	8000bdc <HAL_GetTick>
 8001b48:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b4a:	e00f      	b.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001b4c:	f7ff f846 	bl	8000bdc <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d908      	bls.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e085      	b.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	42470068 	.word	0x42470068
 8001b68:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b6c:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b78:	d0e8      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d009      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d02b      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d127      	bne.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001ba2:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	019b      	lsls	r3, r3, #6
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	085b      	lsrs	r3, r3, #1
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	041b      	lsls	r3, r3, #16
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	061b      	lsls	r3, r3, #24
 8001bd0:	4928      	ldr	r1, [pc, #160]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001bd8:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bde:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	3b01      	subs	r3, #1
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	4922      	ldr	r1, [pc, #136]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d01d      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c06:	d118      	bne.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0e:	0e1b      	lsrs	r3, r3, #24
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	019b      	lsls	r3, r3, #6
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	085b      	lsrs	r3, r3, #1
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	041b      	lsls	r3, r3, #16
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	061b      	lsls	r3, r3, #24
 8001c32:	4910      	ldr	r1, [pc, #64]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c40:	f7fe ffcc 	bl	8000bdc <HAL_GetTick>
 8001c44:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c48:	f7fe ffc8 	bl	8000bdc <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e007      	b.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c66:	d1ef      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3730      	adds	r7, #48	; 0x30
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	42470070 	.word	0x42470070

08001c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c80:	b0ae      	sub	sp, #184	; 0xb8
 8001c82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ca2:	4bcb      	ldr	r3, [pc, #812]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	f200 8206 	bhi.w	80020bc <HAL_RCC_GetSysClockFreq+0x440>
 8001cb0:	a201      	add	r2, pc, #4	; (adr r2, 8001cb8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb6:	bf00      	nop
 8001cb8:	08001ced 	.word	0x08001ced
 8001cbc:	080020bd 	.word	0x080020bd
 8001cc0:	080020bd 	.word	0x080020bd
 8001cc4:	080020bd 	.word	0x080020bd
 8001cc8:	08001cf5 	.word	0x08001cf5
 8001ccc:	080020bd 	.word	0x080020bd
 8001cd0:	080020bd 	.word	0x080020bd
 8001cd4:	080020bd 	.word	0x080020bd
 8001cd8:	08001cfd 	.word	0x08001cfd
 8001cdc:	080020bd 	.word	0x080020bd
 8001ce0:	080020bd 	.word	0x080020bd
 8001ce4:	080020bd 	.word	0x080020bd
 8001ce8:	08001eed 	.word	0x08001eed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cec:	4bb9      	ldr	r3, [pc, #740]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001cf2:	e1e7      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cf4:	4bb8      	ldr	r3, [pc, #736]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cfa:	e1e3      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cfc:	4bb4      	ldr	r3, [pc, #720]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d08:	4bb1      	ldr	r3, [pc, #708]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d071      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d14:	4bae      	ldr	r3, [pc, #696]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	099b      	lsrs	r3, r3, #6
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d20:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d3a:	4622      	mov	r2, r4
 8001d3c:	462b      	mov	r3, r5
 8001d3e:	f04f 0000 	mov.w	r0, #0
 8001d42:	f04f 0100 	mov.w	r1, #0
 8001d46:	0159      	lsls	r1, r3, #5
 8001d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d4c:	0150      	lsls	r0, r2, #5
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4621      	mov	r1, r4
 8001d54:	1a51      	subs	r1, r2, r1
 8001d56:	6439      	str	r1, [r7, #64]	; 0x40
 8001d58:	4629      	mov	r1, r5
 8001d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001d6c:	4649      	mov	r1, r9
 8001d6e:	018b      	lsls	r3, r1, #6
 8001d70:	4641      	mov	r1, r8
 8001d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d76:	4641      	mov	r1, r8
 8001d78:	018a      	lsls	r2, r1, #6
 8001d7a:	4641      	mov	r1, r8
 8001d7c:	1a51      	subs	r1, r2, r1
 8001d7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d80:	4649      	mov	r1, r9
 8001d82:	eb63 0301 	sbc.w	r3, r3, r1
 8001d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001d94:	4649      	mov	r1, r9
 8001d96:	00cb      	lsls	r3, r1, #3
 8001d98:	4641      	mov	r1, r8
 8001d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d9e:	4641      	mov	r1, r8
 8001da0:	00ca      	lsls	r2, r1, #3
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	4622      	mov	r2, r4
 8001daa:	189b      	adds	r3, r3, r2
 8001dac:	633b      	str	r3, [r7, #48]	; 0x30
 8001dae:	462b      	mov	r3, r5
 8001db0:	460a      	mov	r2, r1
 8001db2:	eb42 0303 	adc.w	r3, r2, r3
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	024b      	lsls	r3, r1, #9
 8001dc8:	4621      	mov	r1, r4
 8001dca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dce:	4621      	mov	r1, r4
 8001dd0:	024a      	lsls	r2, r1, #9
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001de0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001de4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001de8:	f7fe fa0c 	bl	8000204 <__aeabi_uldivmod>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4613      	mov	r3, r2
 8001df2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001df6:	e067      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df8:	4b75      	ldr	r3, [pc, #468]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	099b      	lsrs	r3, r3, #6
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e04:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e10:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e12:	2300      	movs	r3, #0
 8001e14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e16:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	462b      	mov	r3, r5
 8001e1e:	f04f 0000 	mov.w	r0, #0
 8001e22:	f04f 0100 	mov.w	r1, #0
 8001e26:	0159      	lsls	r1, r3, #5
 8001e28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e2c:	0150      	lsls	r0, r2, #5
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4621      	mov	r1, r4
 8001e34:	1a51      	subs	r1, r2, r1
 8001e36:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e38:	4629      	mov	r1, r5
 8001e3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001e4c:	4649      	mov	r1, r9
 8001e4e:	018b      	lsls	r3, r1, #6
 8001e50:	4641      	mov	r1, r8
 8001e52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e56:	4641      	mov	r1, r8
 8001e58:	018a      	lsls	r2, r1, #6
 8001e5a:	4641      	mov	r1, r8
 8001e5c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e60:	4649      	mov	r1, r9
 8001e62:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e7a:	4692      	mov	sl, r2
 8001e7c:	469b      	mov	fp, r3
 8001e7e:	4623      	mov	r3, r4
 8001e80:	eb1a 0303 	adds.w	r3, sl, r3
 8001e84:	623b      	str	r3, [r7, #32]
 8001e86:	462b      	mov	r3, r5
 8001e88:	eb4b 0303 	adc.w	r3, fp, r3
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	028b      	lsls	r3, r1, #10
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ea4:	4621      	mov	r1, r4
 8001ea6:	028a      	lsls	r2, r1, #10
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	673b      	str	r3, [r7, #112]	; 0x70
 8001eb4:	677a      	str	r2, [r7, #116]	; 0x74
 8001eb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001eba:	f7fe f9a3 	bl	8000204 <__aeabi_uldivmod>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ec8:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	0c1b      	lsrs	r3, r3, #16
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ede:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001eea:	e0eb      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eec:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ef8:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d06b      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f04:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f16:	663b      	str	r3, [r7, #96]	; 0x60
 8001f18:	2300      	movs	r3, #0
 8001f1a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f20:	4622      	mov	r2, r4
 8001f22:	462b      	mov	r3, r5
 8001f24:	f04f 0000 	mov.w	r0, #0
 8001f28:	f04f 0100 	mov.w	r1, #0
 8001f2c:	0159      	lsls	r1, r3, #5
 8001f2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f32:	0150      	lsls	r0, r2, #5
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4621      	mov	r1, r4
 8001f3a:	1a51      	subs	r1, r2, r1
 8001f3c:	61b9      	str	r1, [r7, #24]
 8001f3e:	4629      	mov	r1, r5
 8001f40:	eb63 0301 	sbc.w	r3, r3, r1
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f52:	4659      	mov	r1, fp
 8001f54:	018b      	lsls	r3, r1, #6
 8001f56:	4651      	mov	r1, sl
 8001f58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f5c:	4651      	mov	r1, sl
 8001f5e:	018a      	lsls	r2, r1, #6
 8001f60:	4651      	mov	r1, sl
 8001f62:	ebb2 0801 	subs.w	r8, r2, r1
 8001f66:	4659      	mov	r1, fp
 8001f68:	eb63 0901 	sbc.w	r9, r3, r1
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f80:	4690      	mov	r8, r2
 8001f82:	4699      	mov	r9, r3
 8001f84:	4623      	mov	r3, r4
 8001f86:	eb18 0303 	adds.w	r3, r8, r3
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	462b      	mov	r3, r5
 8001f8e:	eb49 0303 	adc.w	r3, r9, r3
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001fa0:	4629      	mov	r1, r5
 8001fa2:	024b      	lsls	r3, r1, #9
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001faa:	4621      	mov	r1, r4
 8001fac:	024a      	lsls	r2, r1, #9
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fc0:	f7fe f920 	bl	8000204 <__aeabi_uldivmod>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4613      	mov	r3, r2
 8001fca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fce:	e065      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x420>
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fdc:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fec:	653b      	str	r3, [r7, #80]	; 0x50
 8001fee:	2300      	movs	r3, #0
 8001ff0:	657b      	str	r3, [r7, #84]	; 0x54
 8001ff2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001ff6:	4642      	mov	r2, r8
 8001ff8:	464b      	mov	r3, r9
 8001ffa:	f04f 0000 	mov.w	r0, #0
 8001ffe:	f04f 0100 	mov.w	r1, #0
 8002002:	0159      	lsls	r1, r3, #5
 8002004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002008:	0150      	lsls	r0, r2, #5
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4641      	mov	r1, r8
 8002010:	1a51      	subs	r1, r2, r1
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	4649      	mov	r1, r9
 8002016:	eb63 0301 	sbc.w	r3, r3, r1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002028:	4659      	mov	r1, fp
 800202a:	018b      	lsls	r3, r1, #6
 800202c:	4651      	mov	r1, sl
 800202e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002032:	4651      	mov	r1, sl
 8002034:	018a      	lsls	r2, r1, #6
 8002036:	4651      	mov	r1, sl
 8002038:	1a54      	subs	r4, r2, r1
 800203a:	4659      	mov	r1, fp
 800203c:	eb63 0501 	sbc.w	r5, r3, r1
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	00eb      	lsls	r3, r5, #3
 800204a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800204e:	00e2      	lsls	r2, r4, #3
 8002050:	4614      	mov	r4, r2
 8002052:	461d      	mov	r5, r3
 8002054:	4643      	mov	r3, r8
 8002056:	18e3      	adds	r3, r4, r3
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	464b      	mov	r3, r9
 800205c:	eb45 0303 	adc.w	r3, r5, r3
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800206e:	4629      	mov	r1, r5
 8002070:	028b      	lsls	r3, r1, #10
 8002072:	4621      	mov	r1, r4
 8002074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002078:	4621      	mov	r1, r4
 800207a:	028a      	lsls	r2, r1, #10
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002084:	2200      	movs	r2, #0
 8002086:	64bb      	str	r3, [r7, #72]	; 0x48
 8002088:	64fa      	str	r2, [r7, #76]	; 0x4c
 800208a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800208e:	f7fe f8b9 	bl	8000204 <__aeabi_uldivmod>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4613      	mov	r3, r2
 8002098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x458>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	0f1b      	lsrs	r3, r3, #28
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80020aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020ba:	e003      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80020be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	37b8      	adds	r7, #184	; 0xb8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	00f42400 	.word	0x00f42400

080020dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e28d      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8083 	beq.w	8002202 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020fc:	4b94      	ldr	r3, [pc, #592]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b04      	cmp	r3, #4
 8002106:	d019      	beq.n	800213c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002108:	4b91      	ldr	r3, [pc, #580]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002110:	2b08      	cmp	r3, #8
 8002112:	d106      	bne.n	8002122 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002114:	4b8e      	ldr	r3, [pc, #568]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002120:	d00c      	beq.n	800213c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002122:	4b8b      	ldr	r3, [pc, #556]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800212a:	2b0c      	cmp	r3, #12
 800212c:	d112      	bne.n	8002154 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212e:	4b88      	ldr	r3, [pc, #544]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800213a:	d10b      	bne.n	8002154 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213c:	4b84      	ldr	r3, [pc, #528]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d05b      	beq.n	8002200 <HAL_RCC_OscConfig+0x124>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d157      	bne.n	8002200 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e25a      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215c:	d106      	bne.n	800216c <HAL_RCC_OscConfig+0x90>
 800215e:	4b7c      	ldr	r3, [pc, #496]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a7b      	ldr	r2, [pc, #492]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e01d      	b.n	80021a8 <HAL_RCC_OscConfig+0xcc>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0xb4>
 8002176:	4b76      	ldr	r3, [pc, #472]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a75      	ldr	r2, [pc, #468]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 800217c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b73      	ldr	r3, [pc, #460]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a72      	ldr	r2, [pc, #456]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e00b      	b.n	80021a8 <HAL_RCC_OscConfig+0xcc>
 8002190:	4b6f      	ldr	r3, [pc, #444]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a6e      	ldr	r2, [pc, #440]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b6c      	ldr	r3, [pc, #432]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a6b      	ldr	r2, [pc, #428]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 80021a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d013      	beq.n	80021d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7fe fd14 	bl	8000bdc <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b8:	f7fe fd10 	bl	8000bdc <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e21f      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	4b61      	ldr	r3, [pc, #388]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0xdc>
 80021d6:	e014      	b.n	8002202 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe fd00 	bl	8000bdc <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e0:	f7fe fcfc 	bl	8000bdc <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e20b      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	4b57      	ldr	r3, [pc, #348]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x104>
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d06f      	beq.n	80022ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800220e:	4b50      	ldr	r3, [pc, #320]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b00      	cmp	r3, #0
 8002218:	d017      	beq.n	800224a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800221a:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002222:	2b08      	cmp	r3, #8
 8002224:	d105      	bne.n	8002232 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002226:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002232:	4b47      	ldr	r3, [pc, #284]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d11c      	bne.n	8002278 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800223e:	4b44      	ldr	r3, [pc, #272]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d116      	bne.n	8002278 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	4b41      	ldr	r3, [pc, #260]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x186>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e1d3      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002262:	4b3b      	ldr	r3, [pc, #236]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4937      	ldr	r1, [pc, #220]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	e03a      	b.n	80022ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d020      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002280:	4b34      	ldr	r3, [pc, #208]	; (8002354 <HAL_RCC_OscConfig+0x278>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002286:	f7fe fca9 	bl	8000bdc <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800228e:	f7fe fca5 	bl	8000bdc <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e1b4      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ac:	4b28      	ldr	r3, [pc, #160]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4925      	ldr	r1, [pc, #148]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
 80022c0:	e015      	b.n	80022ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c2:	4b24      	ldr	r3, [pc, #144]	; (8002354 <HAL_RCC_OscConfig+0x278>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe fc88 	bl	8000bdc <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d0:	f7fe fc84 	bl	8000bdc <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e193      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d036      	beq.n	8002368 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d016      	beq.n	8002330 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_RCC_OscConfig+0x27c>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002308:	f7fe fc68 	bl	8000bdc <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002310:	f7fe fc64 	bl	8000bdc <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e173      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x234>
 800232e:	e01b      	b.n	8002368 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_RCC_OscConfig+0x27c>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002336:	f7fe fc51 	bl	8000bdc <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233c:	e00e      	b.n	800235c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233e:	f7fe fc4d 	bl	8000bdc <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d907      	bls.n	800235c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e15c      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
 8002350:	40023800 	.word	0x40023800
 8002354:	42470000 	.word	0x42470000
 8002358:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	4b8a      	ldr	r3, [pc, #552]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 800235e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ea      	bne.n	800233e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 8097 	beq.w	80024a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237a:	4b83      	ldr	r3, [pc, #524]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10f      	bne.n	80023a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	4b7f      	ldr	r3, [pc, #508]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4a7e      	ldr	r2, [pc, #504]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 8002390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002394:	6413      	str	r3, [r2, #64]	; 0x40
 8002396:	4b7c      	ldr	r3, [pc, #496]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a2:	2301      	movs	r3, #1
 80023a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a6:	4b79      	ldr	r3, [pc, #484]	; (800258c <HAL_RCC_OscConfig+0x4b0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d118      	bne.n	80023e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b2:	4b76      	ldr	r3, [pc, #472]	; (800258c <HAL_RCC_OscConfig+0x4b0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a75      	ldr	r2, [pc, #468]	; (800258c <HAL_RCC_OscConfig+0x4b0>)
 80023b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023be:	f7fe fc0d 	bl	8000bdc <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c6:	f7fe fc09 	bl	8000bdc <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e118      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d8:	4b6c      	ldr	r3, [pc, #432]	; (800258c <HAL_RCC_OscConfig+0x4b0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d106      	bne.n	80023fa <HAL_RCC_OscConfig+0x31e>
 80023ec:	4b66      	ldr	r3, [pc, #408]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	4a65      	ldr	r2, [pc, #404]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6713      	str	r3, [r2, #112]	; 0x70
 80023f8:	e01c      	b.n	8002434 <HAL_RCC_OscConfig+0x358>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0x340>
 8002402:	4b61      	ldr	r3, [pc, #388]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	4a60      	ldr	r2, [pc, #384]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	6713      	str	r3, [r2, #112]	; 0x70
 800240e:	4b5e      	ldr	r3, [pc, #376]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	4a5d      	ldr	r2, [pc, #372]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6713      	str	r3, [r2, #112]	; 0x70
 800241a:	e00b      	b.n	8002434 <HAL_RCC_OscConfig+0x358>
 800241c:	4b5a      	ldr	r3, [pc, #360]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	4a59      	ldr	r2, [pc, #356]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	6713      	str	r3, [r2, #112]	; 0x70
 8002428:	4b57      	ldr	r3, [pc, #348]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242c:	4a56      	ldr	r2, [pc, #344]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 800242e:	f023 0304 	bic.w	r3, r3, #4
 8002432:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d015      	beq.n	8002468 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7fe fbce 	bl	8000bdc <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002442:	e00a      	b.n	800245a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002444:	f7fe fbca 	bl	8000bdc <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e0d7      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245a:	4b4b      	ldr	r3, [pc, #300]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0ee      	beq.n	8002444 <HAL_RCC_OscConfig+0x368>
 8002466:	e014      	b.n	8002492 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002468:	f7fe fbb8 	bl	8000bdc <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246e:	e00a      	b.n	8002486 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002470:	f7fe fbb4 	bl	8000bdc <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	; 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e0c1      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002486:	4b40      	ldr	r3, [pc, #256]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1ee      	bne.n	8002470 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002492:	7dfb      	ldrb	r3, [r7, #23]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d105      	bne.n	80024a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002498:	4b3b      	ldr	r3, [pc, #236]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	4a3a      	ldr	r2, [pc, #232]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 800249e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80ad 	beq.w	8002608 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ae:	4b36      	ldr	r3, [pc, #216]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d060      	beq.n	800257c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d145      	bne.n	800254e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c2:	4b33      	ldr	r3, [pc, #204]	; (8002590 <HAL_RCC_OscConfig+0x4b4>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fb88 	bl	8000bdc <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d0:	f7fe fb84 	bl	8000bdc <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e093      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e2:	4b29      	ldr	r3, [pc, #164]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69da      	ldr	r2, [r3, #28]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	019b      	lsls	r3, r3, #6
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	085b      	lsrs	r3, r3, #1
 8002506:	3b01      	subs	r3, #1
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	061b      	lsls	r3, r3, #24
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	071b      	lsls	r3, r3, #28
 800251a:	491b      	ldr	r1, [pc, #108]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <HAL_RCC_OscConfig+0x4b4>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe fb59 	bl	8000bdc <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252e:	f7fe fb55 	bl	8000bdc <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e064      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x452>
 800254c:	e05c      	b.n	8002608 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_RCC_OscConfig+0x4b4>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe fb42 	bl	8000bdc <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255c:	f7fe fb3e 	bl	8000bdc <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e04d      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCC_OscConfig+0x4ac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x480>
 800257a:	e045      	b.n	8002608 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d107      	bne.n	8002594 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e040      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
 8002588:	40023800 	.word	0x40023800
 800258c:	40007000 	.word	0x40007000
 8002590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002594:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <HAL_RCC_OscConfig+0x538>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d030      	beq.n	8002604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d129      	bne.n	8002604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d122      	bne.n	8002604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025c4:	4013      	ands	r3, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d119      	bne.n	8002604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	3b01      	subs	r3, #1
 80025de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d10f      	bne.n	8002604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d107      	bne.n	8002604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800

08002618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e03f      	b.n	80026aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe f948 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2224      	movs	r2, #36	; 0x24
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800265a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f829 	bl	80026b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b8:	b0c0      	sub	sp, #256	; 0x100
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d0:	68d9      	ldr	r1, [r3, #12]
 80026d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	ea40 0301 	orr.w	r3, r0, r1
 80026dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800270c:	f021 010c 	bic.w	r1, r1, #12
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800271a:	430b      	orrs	r3, r1
 800271c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800271e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800272a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272e:	6999      	ldr	r1, [r3, #24]
 8002730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	ea40 0301 	orr.w	r3, r0, r1
 800273a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800273c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b8f      	ldr	r3, [pc, #572]	; (8002980 <UART_SetConfig+0x2cc>)
 8002744:	429a      	cmp	r2, r3
 8002746:	d005      	beq.n	8002754 <UART_SetConfig+0xa0>
 8002748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4b8d      	ldr	r3, [pc, #564]	; (8002984 <UART_SetConfig+0x2d0>)
 8002750:	429a      	cmp	r2, r3
 8002752:	d104      	bne.n	800275e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002754:	f7fe ff54 	bl	8001600 <HAL_RCC_GetPCLK2Freq>
 8002758:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800275c:	e003      	b.n	8002766 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800275e:	f7fe ff3b 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8002762:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002770:	f040 810c 	bne.w	800298c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002778:	2200      	movs	r2, #0
 800277a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800277e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002782:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002786:	4622      	mov	r2, r4
 8002788:	462b      	mov	r3, r5
 800278a:	1891      	adds	r1, r2, r2
 800278c:	65b9      	str	r1, [r7, #88]	; 0x58
 800278e:	415b      	adcs	r3, r3
 8002790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002792:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002796:	4621      	mov	r1, r4
 8002798:	eb12 0801 	adds.w	r8, r2, r1
 800279c:	4629      	mov	r1, r5
 800279e:	eb43 0901 	adc.w	r9, r3, r1
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027b6:	4690      	mov	r8, r2
 80027b8:	4699      	mov	r9, r3
 80027ba:	4623      	mov	r3, r4
 80027bc:	eb18 0303 	adds.w	r3, r8, r3
 80027c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027c4:	462b      	mov	r3, r5
 80027c6:	eb49 0303 	adc.w	r3, r9, r3
 80027ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027e2:	460b      	mov	r3, r1
 80027e4:	18db      	adds	r3, r3, r3
 80027e6:	653b      	str	r3, [r7, #80]	; 0x50
 80027e8:	4613      	mov	r3, r2
 80027ea:	eb42 0303 	adc.w	r3, r2, r3
 80027ee:	657b      	str	r3, [r7, #84]	; 0x54
 80027f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80027f8:	f7fd fd04 	bl	8000204 <__aeabi_uldivmod>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4b61      	ldr	r3, [pc, #388]	; (8002988 <UART_SetConfig+0x2d4>)
 8002802:	fba3 2302 	umull	r2, r3, r3, r2
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	011c      	lsls	r4, r3, #4
 800280a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800280e:	2200      	movs	r2, #0
 8002810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002814:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002818:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800281c:	4642      	mov	r2, r8
 800281e:	464b      	mov	r3, r9
 8002820:	1891      	adds	r1, r2, r2
 8002822:	64b9      	str	r1, [r7, #72]	; 0x48
 8002824:	415b      	adcs	r3, r3
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002828:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800282c:	4641      	mov	r1, r8
 800282e:	eb12 0a01 	adds.w	sl, r2, r1
 8002832:	4649      	mov	r1, r9
 8002834:	eb43 0b01 	adc.w	fp, r3, r1
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800284c:	4692      	mov	sl, r2
 800284e:	469b      	mov	fp, r3
 8002850:	4643      	mov	r3, r8
 8002852:	eb1a 0303 	adds.w	r3, sl, r3
 8002856:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800285a:	464b      	mov	r3, r9
 800285c:	eb4b 0303 	adc.w	r3, fp, r3
 8002860:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002870:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002874:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002878:	460b      	mov	r3, r1
 800287a:	18db      	adds	r3, r3, r3
 800287c:	643b      	str	r3, [r7, #64]	; 0x40
 800287e:	4613      	mov	r3, r2
 8002880:	eb42 0303 	adc.w	r3, r2, r3
 8002884:	647b      	str	r3, [r7, #68]	; 0x44
 8002886:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800288a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800288e:	f7fd fcb9 	bl	8000204 <__aeabi_uldivmod>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4611      	mov	r1, r2
 8002898:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <UART_SetConfig+0x2d4>)
 800289a:	fba3 2301 	umull	r2, r3, r3, r1
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2264      	movs	r2, #100	; 0x64
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	1acb      	subs	r3, r1, r3
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <UART_SetConfig+0x2d4>)
 80028b0:	fba3 2302 	umull	r2, r3, r3, r2
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028bc:	441c      	add	r4, r3
 80028be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028c2:	2200      	movs	r2, #0
 80028c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80028cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80028d0:	4642      	mov	r2, r8
 80028d2:	464b      	mov	r3, r9
 80028d4:	1891      	adds	r1, r2, r2
 80028d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80028d8:	415b      	adcs	r3, r3
 80028da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028e0:	4641      	mov	r1, r8
 80028e2:	1851      	adds	r1, r2, r1
 80028e4:	6339      	str	r1, [r7, #48]	; 0x30
 80028e6:	4649      	mov	r1, r9
 80028e8:	414b      	adcs	r3, r1
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80028f8:	4659      	mov	r1, fp
 80028fa:	00cb      	lsls	r3, r1, #3
 80028fc:	4651      	mov	r1, sl
 80028fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002902:	4651      	mov	r1, sl
 8002904:	00ca      	lsls	r2, r1, #3
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	4603      	mov	r3, r0
 800290c:	4642      	mov	r2, r8
 800290e:	189b      	adds	r3, r3, r2
 8002910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002914:	464b      	mov	r3, r9
 8002916:	460a      	mov	r2, r1
 8002918:	eb42 0303 	adc.w	r3, r2, r3
 800291c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800292c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002934:	460b      	mov	r3, r1
 8002936:	18db      	adds	r3, r3, r3
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
 800293a:	4613      	mov	r3, r2
 800293c:	eb42 0303 	adc.w	r3, r2, r3
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002946:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800294a:	f7fd fc5b 	bl	8000204 <__aeabi_uldivmod>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <UART_SetConfig+0x2d4>)
 8002954:	fba3 1302 	umull	r1, r3, r3, r2
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	2164      	movs	r1, #100	; 0x64
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	3332      	adds	r3, #50	; 0x32
 8002966:	4a08      	ldr	r2, [pc, #32]	; (8002988 <UART_SetConfig+0x2d4>)
 8002968:	fba2 2303 	umull	r2, r3, r2, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	f003 0207 	and.w	r2, r3, #7
 8002972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4422      	add	r2, r4
 800297a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800297c:	e105      	b.n	8002b8a <UART_SetConfig+0x4d6>
 800297e:	bf00      	nop
 8002980:	40011000 	.word	0x40011000
 8002984:	40011400 	.word	0x40011400
 8002988:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800298c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002990:	2200      	movs	r2, #0
 8002992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002996:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800299a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800299e:	4642      	mov	r2, r8
 80029a0:	464b      	mov	r3, r9
 80029a2:	1891      	adds	r1, r2, r2
 80029a4:	6239      	str	r1, [r7, #32]
 80029a6:	415b      	adcs	r3, r3
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
 80029aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029ae:	4641      	mov	r1, r8
 80029b0:	1854      	adds	r4, r2, r1
 80029b2:	4649      	mov	r1, r9
 80029b4:	eb43 0501 	adc.w	r5, r3, r1
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	00eb      	lsls	r3, r5, #3
 80029c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029c6:	00e2      	lsls	r2, r4, #3
 80029c8:	4614      	mov	r4, r2
 80029ca:	461d      	mov	r5, r3
 80029cc:	4643      	mov	r3, r8
 80029ce:	18e3      	adds	r3, r4, r3
 80029d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029d4:	464b      	mov	r3, r9
 80029d6:	eb45 0303 	adc.w	r3, r5, r3
 80029da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029fa:	4629      	mov	r1, r5
 80029fc:	008b      	lsls	r3, r1, #2
 80029fe:	4621      	mov	r1, r4
 8002a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a04:	4621      	mov	r1, r4
 8002a06:	008a      	lsls	r2, r1, #2
 8002a08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a0c:	f7fd fbfa 	bl	8000204 <__aeabi_uldivmod>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4b60      	ldr	r3, [pc, #384]	; (8002b98 <UART_SetConfig+0x4e4>)
 8002a16:	fba3 2302 	umull	r2, r3, r3, r2
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	011c      	lsls	r4, r3, #4
 8002a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a22:	2200      	movs	r2, #0
 8002a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a30:	4642      	mov	r2, r8
 8002a32:	464b      	mov	r3, r9
 8002a34:	1891      	adds	r1, r2, r2
 8002a36:	61b9      	str	r1, [r7, #24]
 8002a38:	415b      	adcs	r3, r3
 8002a3a:	61fb      	str	r3, [r7, #28]
 8002a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a40:	4641      	mov	r1, r8
 8002a42:	1851      	adds	r1, r2, r1
 8002a44:	6139      	str	r1, [r7, #16]
 8002a46:	4649      	mov	r1, r9
 8002a48:	414b      	adcs	r3, r1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a58:	4659      	mov	r1, fp
 8002a5a:	00cb      	lsls	r3, r1, #3
 8002a5c:	4651      	mov	r1, sl
 8002a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a62:	4651      	mov	r1, sl
 8002a64:	00ca      	lsls	r2, r1, #3
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4642      	mov	r2, r8
 8002a6e:	189b      	adds	r3, r3, r2
 8002a70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a74:	464b      	mov	r3, r9
 8002a76:	460a      	mov	r2, r1
 8002a78:	eb42 0303 	adc.w	r3, r2, r3
 8002a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a98:	4649      	mov	r1, r9
 8002a9a:	008b      	lsls	r3, r1, #2
 8002a9c:	4641      	mov	r1, r8
 8002a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aa2:	4641      	mov	r1, r8
 8002aa4:	008a      	lsls	r2, r1, #2
 8002aa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002aaa:	f7fd fbab 	bl	8000204 <__aeabi_uldivmod>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <UART_SetConfig+0x4e4>)
 8002ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	2164      	movs	r1, #100	; 0x64
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	3332      	adds	r3, #50	; 0x32
 8002ac6:	4a34      	ldr	r2, [pc, #208]	; (8002b98 <UART_SetConfig+0x4e4>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad2:	441c      	add	r4, r3
 8002ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ad8:	2200      	movs	r2, #0
 8002ada:	673b      	str	r3, [r7, #112]	; 0x70
 8002adc:	677a      	str	r2, [r7, #116]	; 0x74
 8002ade:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ae2:	4642      	mov	r2, r8
 8002ae4:	464b      	mov	r3, r9
 8002ae6:	1891      	adds	r1, r2, r2
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	415b      	adcs	r3, r3
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002af2:	4641      	mov	r1, r8
 8002af4:	1851      	adds	r1, r2, r1
 8002af6:	6039      	str	r1, [r7, #0]
 8002af8:	4649      	mov	r1, r9
 8002afa:	414b      	adcs	r3, r1
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b0a:	4659      	mov	r1, fp
 8002b0c:	00cb      	lsls	r3, r1, #3
 8002b0e:	4651      	mov	r1, sl
 8002b10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b14:	4651      	mov	r1, sl
 8002b16:	00ca      	lsls	r2, r1, #3
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4642      	mov	r2, r8
 8002b20:	189b      	adds	r3, r3, r2
 8002b22:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b24:	464b      	mov	r3, r9
 8002b26:	460a      	mov	r2, r1
 8002b28:	eb42 0303 	adc.w	r3, r2, r3
 8002b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	663b      	str	r3, [r7, #96]	; 0x60
 8002b38:	667a      	str	r2, [r7, #100]	; 0x64
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b46:	4649      	mov	r1, r9
 8002b48:	008b      	lsls	r3, r1, #2
 8002b4a:	4641      	mov	r1, r8
 8002b4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b50:	4641      	mov	r1, r8
 8002b52:	008a      	lsls	r2, r1, #2
 8002b54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b58:	f7fd fb54 	bl	8000204 <__aeabi_uldivmod>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <UART_SetConfig+0x4e4>)
 8002b62:	fba3 1302 	umull	r1, r3, r3, r2
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2164      	movs	r1, #100	; 0x64
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	3332      	adds	r3, #50	; 0x32
 8002b74:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <UART_SetConfig+0x4e4>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	f003 020f 	and.w	r2, r3, #15
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4422      	add	r2, r4
 8002b88:	609a      	str	r2, [r3, #8]
}
 8002b8a:	bf00      	nop
 8002b8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b90:	46bd      	mov	sp, r7
 8002b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b96:	bf00      	nop
 8002b98:	51eb851f 	.word	0x51eb851f

08002b9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	f107 001c 	add.w	r0, r7, #28
 8002baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d122      	bne.n	8002bfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d105      	bne.n	8002bee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fa9c 	bl	800312c <USB_CoreReset>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	e01a      	b.n	8002c30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fa90 	bl	800312c <USB_CoreReset>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38
 8002c22:	e005      	b.n	8002c30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d10b      	bne.n	8002c4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f043 0206 	orr.w	r2, r3, #6
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f043 0220 	orr.w	r2, r3, #32
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c5a:	b004      	add	sp, #16
 8002c5c:	4770      	bx	lr

08002c5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f023 0201 	bic.w	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d115      	bne.n	8002cce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002cae:	2001      	movs	r0, #1
 8002cb0:	f7fd ffa0 	bl	8000bf4 <HAL_Delay>
      ms++;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fa28 	bl	8003110 <USB_GetMode>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d01e      	beq.n	8002d04 <USB_SetCurrentMode+0x84>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b31      	cmp	r3, #49	; 0x31
 8002cca:	d9f0      	bls.n	8002cae <USB_SetCurrentMode+0x2e>
 8002ccc:	e01a      	b.n	8002d04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d115      	bne.n	8002d00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f7fd ff87 	bl	8000bf4 <HAL_Delay>
      ms++;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fa0f 	bl	8003110 <USB_GetMode>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <USB_SetCurrentMode+0x84>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b31      	cmp	r3, #49	; 0x31
 8002cfc:	d9f0      	bls.n	8002ce0 <USB_SetCurrentMode+0x60>
 8002cfe:	e001      	b.n	8002d04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e005      	b.n	8002d10 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b32      	cmp	r3, #50	; 0x32
 8002d08:	d101      	bne.n	8002d0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d18:	b084      	sub	sp, #16
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002d26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	e009      	b.n	8002d4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	3340      	adds	r3, #64	; 0x40
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	2200      	movs	r2, #0
 8002d44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b0e      	cmp	r3, #14
 8002d50:	d9f2      	bls.n	8002d38 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d11c      	bne.n	8002d92 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d66:	f043 0302 	orr.w	r3, r3, #2
 8002d6a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	e005      	b.n	8002d9e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002da4:	461a      	mov	r2, r3
 8002da6:	2300      	movs	r3, #0
 8002da8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db0:	4619      	mov	r1, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db8:	461a      	mov	r2, r3
 8002dba:	680b      	ldr	r3, [r1, #0]
 8002dbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d10c      	bne.n	8002dde <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d104      	bne.n	8002dd4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002dca:	2100      	movs	r1, #0
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f965 	bl	800309c <USB_SetDevSpeed>
 8002dd2:	e008      	b.n	8002de6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f960 	bl	800309c <USB_SetDevSpeed>
 8002ddc:	e003      	b.n	8002de6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002dde:	2103      	movs	r1, #3
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f95b 	bl	800309c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002de6:	2110      	movs	r1, #16
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f8f3 	bl	8002fd4 <USB_FlushTxFifo>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f91f 	bl	800303c <USB_FlushRxFifo>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2300      	movs	r3, #0
 8002e12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e26:	461a      	mov	r2, r3
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	e043      	b.n	8002eba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e48:	d118      	bne.n	8002e7c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	e013      	b.n	8002e8e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e72:	461a      	mov	r2, r3
 8002e74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e008      	b.n	8002e8e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eac:	461a      	mov	r2, r3
 8002eae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d3b7      	bcc.n	8002e32 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	e043      	b.n	8002f50 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ede:	d118      	bne.n	8002f12 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10a      	bne.n	8002efc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e013      	b.n	8002f24 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	e008      	b.n	8002f24 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2300      	movs	r3, #0
 8002f22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f30:	461a      	mov	r2, r3
 8002f32:	2300      	movs	r3, #0
 8002f34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f42:	461a      	mov	r2, r3
 8002f44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d3b7      	bcc.n	8002ec8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002f78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f043 0210 	orr.w	r2, r3, #16
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <USB_DevInit+0x2b8>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	f043 0208 	orr.w	r2, r3, #8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d107      	bne.n	8002fc0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fcc:	b004      	add	sp, #16
 8002fce:	4770      	bx	lr
 8002fd0:	803c3800 	.word	0x803c3800

08002fd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4a13      	ldr	r2, [pc, #76]	; (8003038 <USB_FlushTxFifo+0x64>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e01b      	b.n	800302c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	daf2      	bge.n	8002fe2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	019b      	lsls	r3, r3, #6
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3301      	adds	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a08      	ldr	r2, [pc, #32]	; (8003038 <USB_FlushTxFifo+0x64>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e006      	b.n	800302c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b20      	cmp	r3, #32
 8003028:	d0f0      	beq.n	800300c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	00030d40 	.word	0x00030d40

0800303c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3301      	adds	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4a11      	ldr	r2, [pc, #68]	; (8003098 <USB_FlushRxFifo+0x5c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e018      	b.n	800308c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	daf2      	bge.n	8003048 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2210      	movs	r2, #16
 800306a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3301      	adds	r3, #1
 8003070:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4a08      	ldr	r2, [pc, #32]	; (8003098 <USB_FlushRxFifo+0x5c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e006      	b.n	800308c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b10      	cmp	r3, #16
 8003088:	d0f0      	beq.n	800306c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	00030d40 	.word	0x00030d40

0800309c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	68f9      	ldr	r1, [r7, #12]
 80030b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80030e8:	f023 0303 	bic.w	r3, r3, #3
 80030ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030fc:	f043 0302 	orr.w	r3, r3, #2
 8003100:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f003 0301 	and.w	r3, r3, #1
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3301      	adds	r3, #1
 800313c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4a13      	ldr	r2, [pc, #76]	; (8003190 <USB_CoreReset+0x64>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e01b      	b.n	8003182 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b00      	cmp	r3, #0
 8003150:	daf2      	bge.n	8003138 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3301      	adds	r3, #1
 8003166:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a09      	ldr	r2, [pc, #36]	; (8003190 <USB_CoreReset+0x64>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d901      	bls.n	8003174 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e006      	b.n	8003182 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b01      	cmp	r3, #1
 800317e:	d0f0      	beq.n	8003162 <USB_CoreReset+0x36>

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	00030d40 	.word	0x00030d40

08003194 <__libc_init_array>:
 8003194:	b570      	push	{r4, r5, r6, lr}
 8003196:	4d0d      	ldr	r5, [pc, #52]	; (80031cc <__libc_init_array+0x38>)
 8003198:	4c0d      	ldr	r4, [pc, #52]	; (80031d0 <__libc_init_array+0x3c>)
 800319a:	1b64      	subs	r4, r4, r5
 800319c:	10a4      	asrs	r4, r4, #2
 800319e:	2600      	movs	r6, #0
 80031a0:	42a6      	cmp	r6, r4
 80031a2:	d109      	bne.n	80031b8 <__libc_init_array+0x24>
 80031a4:	4d0b      	ldr	r5, [pc, #44]	; (80031d4 <__libc_init_array+0x40>)
 80031a6:	4c0c      	ldr	r4, [pc, #48]	; (80031d8 <__libc_init_array+0x44>)
 80031a8:	f000 f820 	bl	80031ec <_init>
 80031ac:	1b64      	subs	r4, r4, r5
 80031ae:	10a4      	asrs	r4, r4, #2
 80031b0:	2600      	movs	r6, #0
 80031b2:	42a6      	cmp	r6, r4
 80031b4:	d105      	bne.n	80031c2 <__libc_init_array+0x2e>
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
 80031b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031bc:	4798      	blx	r3
 80031be:	3601      	adds	r6, #1
 80031c0:	e7ee      	b.n	80031a0 <__libc_init_array+0xc>
 80031c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c6:	4798      	blx	r3
 80031c8:	3601      	adds	r6, #1
 80031ca:	e7f2      	b.n	80031b2 <__libc_init_array+0x1e>
 80031cc:	0800322c 	.word	0x0800322c
 80031d0:	0800322c 	.word	0x0800322c
 80031d4:	0800322c 	.word	0x0800322c
 80031d8:	08003230 	.word	0x08003230

080031dc <memset>:
 80031dc:	4402      	add	r2, r0
 80031de:	4603      	mov	r3, r0
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d100      	bne.n	80031e6 <memset+0xa>
 80031e4:	4770      	bx	lr
 80031e6:	f803 1b01 	strb.w	r1, [r3], #1
 80031ea:	e7f9      	b.n	80031e0 <memset+0x4>

080031ec <_init>:
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ee:	bf00      	nop
 80031f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f2:	bc08      	pop	{r3}
 80031f4:	469e      	mov	lr, r3
 80031f6:	4770      	bx	lr

080031f8 <_fini>:
 80031f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fa:	bf00      	nop
 80031fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fe:	bc08      	pop	{r3}
 8003200:	469e      	mov	lr, r3
 8003202:	4770      	bx	lr

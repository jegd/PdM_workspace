
Ejercicio_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004780  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b8c  08004b8c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004b8c  08004b8c  00014b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b94  08004b94  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000078  08004c14  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  08004c14  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d926  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f2  00000000  00000000  0002d9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002fcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  000307f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002314f  00000000  00000000  00031238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2e8  00000000  00000000  00054387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc0db  00000000  00000000  0006366f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f74a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003644  00000000  00000000  0012f79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004938 	.word	0x08004938

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08004938 	.word	0x08004938

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fd25 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f831 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();			//Inicialización del mógulo GPIO
 80005c2:	f000 f89b 	bl	80006fc <MX_GPIO_Init>
  uartInit();				//Inicio del módulo UART3
 80005c6:	f000 fc0f 	bl	8000de8 <uartInit>
  /* USER CODE BEGIN 2 */
  bool_t estado_1 = readKey();
 80005ca:	f000 fc01 	bl	8000dd0 <readKey>
 80005ce:	4603      	mov	r3, r0
 80005d0:	71bb      	strb	r3, [r7, #6]
  bool_t estado_2 = readKey();
 80005d2:	f000 fbfd 	bl	8000dd0 <readKey>
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
  debounceFSM_init();			//Inicio de MEF que ve el estado del boton de usuario
 80005da:	f000 fb4f 	bl	8000c7c <debounceFSM_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  debounceFSM_update();		//Evalua el estado del boton de usuario
 80005de:	f000 fb5d 	bl	8000c9c <debounceFSM_update>
	  estado_1 = readKey();
 80005e2:	f000 fbf5 	bl	8000dd0 <readKey>
 80005e6:	4603      	mov	r3, r0
 80005e8:	71bb      	strb	r3, [r7, #6]
	  if(estado_1!=estado_2)
 80005ea:	79ba      	ldrb	r2, [r7, #6]
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d00e      	beq.n	8000610 <main+0x5c>
	  {
		  if(estado_1==true)
 80005f2:	79bb      	ldrb	r3, [r7, #6]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <main+0x4a>
			  uartSendString((const uint8_t *)"Flanco ascendente \n\r");
 80005f8:	4808      	ldr	r0, [pc, #32]	; (800061c <main+0x68>)
 80005fa:	f000 fc35 	bl	8000e68 <uartSendString>
		  if(estado_1==false)
 80005fe:	79bb      	ldrb	r3, [r7, #6]
 8000600:	f083 0301 	eor.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <main+0x5c>
			  uartSendString((const uint8_t *)"Flanco descendete \n\r");
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <main+0x6c>)
 800060c:	f000 fc2c 	bl	8000e68 <uartSendString>

	  }

	  estado_2 = readKey();
 8000610:	f000 fbde 	bl	8000dd0 <readKey>
 8000614:	4603      	mov	r3, r0
 8000616:	71fb      	strb	r3, [r7, #7]
	  debounceFSM_update();		//Evalua el estado del boton de usuario
 8000618:	e7e1      	b.n	80005de <main+0x2a>
 800061a:	bf00      	nop
 800061c:	08004950 	.word	0x08004950
 8000620:	08004968 	.word	0x08004968

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2234      	movs	r2, #52	; 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f003 f9b6 	bl	80039a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a28      	ldr	r2, [pc, #160]	; (80006f4 <SystemClock_Config+0xd0>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <SystemClock_Config+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a22      	ldr	r2, [pc, #136]	; (80006f8 <SystemClock_Config+0xd4>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <SystemClock_Config+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000684:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000688:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000698:	23a8      	movs	r3, #168	; 0xa8
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 ffc3 	bl	8002638 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b8:	f000 f8ce 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2105      	movs	r1, #5
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f938 	bl	8001950 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006e6:	f000 f8b7 	bl	8000858 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	4b4c      	ldr	r3, [pc, #304]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a4b      	ldr	r2, [pc, #300]	; (8000848 <MX_GPIO_Init+0x14c>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b49      	ldr	r3, [pc, #292]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	4b45      	ldr	r3, [pc, #276]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a44      	ldr	r2, [pc, #272]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b42      	ldr	r3, [pc, #264]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b3e      	ldr	r3, [pc, #248]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a3d      	ldr	r2, [pc, #244]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b3b      	ldr	r3, [pc, #236]	; (8000848 <MX_GPIO_Init+0x14c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b37      	ldr	r3, [pc, #220]	; (8000848 <MX_GPIO_Init+0x14c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a36      	ldr	r2, [pc, #216]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b34      	ldr	r3, [pc, #208]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b30      	ldr	r3, [pc, #192]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a2f      	ldr	r2, [pc, #188]	; (8000848 <MX_GPIO_Init+0x14c>)
 800078c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b29      	ldr	r3, [pc, #164]	; (8000848 <MX_GPIO_Init+0x14c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a28      	ldr	r2, [pc, #160]	; (8000848 <MX_GPIO_Init+0x14c>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_GPIO_Init+0x14c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80007c0:	4822      	ldr	r0, [pc, #136]	; (800084c <MX_GPIO_Init+0x150>)
 80007c2:	f000 ff49 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2140      	movs	r1, #64	; 0x40
 80007ca:	4821      	ldr	r0, [pc, #132]	; (8000850 <MX_GPIO_Init+0x154>)
 80007cc:	f000 ff44 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	481b      	ldr	r0, [pc, #108]	; (8000854 <MX_GPIO_Init+0x158>)
 80007e8:	f000 fd8a 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007ec:	f244 0381 	movw	r3, #16513	; 0x4081
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4811      	ldr	r0, [pc, #68]	; (800084c <MX_GPIO_Init+0x150>)
 8000806:	f000 fd7b 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800080a:	2340      	movs	r3, #64	; 0x40
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <MX_GPIO_Init+0x154>)
 8000822:	f000 fd6d 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000826:	2380      	movs	r3, #128	; 0x80
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_GPIO_Init+0x154>)
 800083a:	f000 fd61 	bl	8001300 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083e:	bf00      	nop
 8000840:	3730      	adds	r7, #48	; 0x30
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40020400 	.word	0x40020400
 8000850:	40021800 	.word	0x40021800
 8000854:	40020800 	.word	0x40020800

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <HAL_MspInit+0x4c>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_MspInit+0x4c>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a19      	ldr	r2, [pc, #100]	; (8000938 <HAL_UART_MspInit+0x84>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d12c      	bne.n	8000930 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <HAL_UART_MspInit+0x88>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <HAL_UART_MspInit+0x88>)
 80008e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008e4:	6413      	str	r3, [r2, #64]	; 0x40
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <HAL_UART_MspInit+0x88>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_UART_MspInit+0x88>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <HAL_UART_MspInit+0x88>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_UART_MspInit+0x88>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800090e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000920:	2307      	movs	r3, #7
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <HAL_UART_MspInit+0x8c>)
 800092c:	f000 fce8 	bl	8001300 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	; 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40004800 	.word	0x40004800
 800093c:	40023800 	.word	0x40023800
 8000940:	40020c00 	.word	0x40020c00

08000944 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b0a0      	sub	sp, #128	; 0x80
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	225c      	movs	r2, #92	; 0x5c
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f003 f81d 	bl	80039a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000972:	d14e      	bne.n	8000a12 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000978:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800097a:	2300      	movs	r3, #0
 800097c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4618      	mov	r0, r3
 8000984:	f001 f8fe 	bl	8001b84 <HAL_RCCEx_PeriphCLKConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800098e:	f7ff ff63 	bl	8000858 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <HAL_PCD_MspInit+0xd8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a20      	ldr	r2, [pc, #128]	; (8000a1c <HAL_PCD_MspInit+0xd8>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <HAL_PCD_MspInit+0xd8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009ae:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c0:	230a      	movs	r3, #10
 80009c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009c8:	4619      	mov	r1, r3
 80009ca:	4815      	ldr	r0, [pc, #84]	; (8000a20 <HAL_PCD_MspInit+0xdc>)
 80009cc:	f000 fc98 	bl	8001300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009e2:	4619      	mov	r1, r3
 80009e4:	480e      	ldr	r0, [pc, #56]	; (8000a20 <HAL_PCD_MspInit+0xdc>)
 80009e6:	f000 fc8b 	bl	8001300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_PCD_MspInit+0xd8>)
 80009ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ee:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <HAL_PCD_MspInit+0xd8>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	6353      	str	r3, [r2, #52]	; 0x34
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_PCD_MspInit+0xd8>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_PCD_MspInit+0xd8>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_PCD_MspInit+0xd8>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3780      	adds	r7, #128	; 0x80
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a70:	f000 fb1c 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return 1;
 8000a7c:	2301      	movs	r3, #1
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <_kill>:

int _kill(int pid, int sig)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a92:	f002 ff4b 	bl	800392c <__errno>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2216      	movs	r2, #22
 8000a9a:	601a      	str	r2, [r3, #0]
  return -1;
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <_exit>:

void _exit (int status)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ffe7 	bl	8000a88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000aba:	e7fe      	b.n	8000aba <_exit+0x12>

08000abc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	e00a      	b.n	8000ae4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ace:	f3af 8000 	nop.w
 8000ad2:	4601      	mov	r1, r0
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	60ba      	str	r2, [r7, #8]
 8000ada:	b2ca      	uxtb	r2, r1
 8000adc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	dbf0      	blt.n	8000ace <_read+0x12>
  }

  return len;
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	e009      	b.n	8000b1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	60ba      	str	r2, [r7, #8]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf1      	blt.n	8000b08 <_write+0x12>
  }
  return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_close>:

int _close(int file)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b56:	605a      	str	r2, [r3, #4]
  return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <_isatty>:

int _isatty(int file)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc8:	f002 feb0 	bl	800392c <__errno>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	e009      	b.n	8000bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <_sbrk+0x64>)
 8000be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20020000 	.word	0x20020000
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	20000094 	.word	0x20000094
 8000c00:	20000610 	.word	0x20000610

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2e:	490e      	ldr	r1, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c44:	4c0b      	ldr	r4, [pc, #44]	; (8000c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c52:	f7ff ffd7 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f002 fe81 	bl	800395c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fcab 	bl	80005b4 <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c6c:	08004b9c 	.word	0x08004b9c
  ldr r2, =_sbss
 8000c70:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c74:	2000060c 	.word	0x2000060c

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <debounceFSM_init>:
static debounceState_t estadoActual;						//Tipo de variable para máquina de estado
bool var_readKey = false;
//DEFINICIÓN DE FUNCIONES
// Inicia nuestra MEF asignando el valor de BUTTON UP
void debounceFSM_init()
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	assert(&estadoActual!=NULL);
	delayInit(&ret_rebote, time_rebote); 				//Inicialización del delay para antirebote
 8000c80:	2128      	movs	r1, #40	; 0x28
 8000c82:	4804      	ldr	r0, [pc, #16]	; (8000c94 <debounceFSM_init+0x18>)
 8000c84:	f000 f968 	bl	8000f58 <delayInit>
	estadoActual=BUTTON_UP;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <debounceFSM_init+0x1c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000098 	.word	0x20000098
 8000c98:	200000a4 	.word	0x200000a4

08000c9c <debounceFSM_update>:

//Evalúa el boton de usuario y cambia de estado si acaba el tiempo antirebote
void debounceFSM_update()
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	assert(&estadoActual!=NULL);
	switch(estadoActual)
 8000ca0:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <debounceFSM_update+0xd8>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d859      	bhi.n	8000d5c <debounceFSM_update+0xc0>
 8000ca8:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <debounceFSM_update+0x14>)
 8000caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cae:	bf00      	nop
 8000cb0:	08000cc1 	.word	0x08000cc1
 8000cb4:	08000cd9 	.word	0x08000cd9
 8000cb8:	08000d0f 	.word	0x08000d0f
 8000cbc:	08000d27 	.word	0x08000d27
	{
	case BUTTON_UP:
		if((HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)))
 8000cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc4:	482c      	ldr	r0, [pc, #176]	; (8000d78 <debounceFSM_update+0xdc>)
 8000cc6:	f000 fcaf 	bl	8001628 <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d048      	beq.n	8000d62 <debounceFSM_update+0xc6>
			estadoActual=BUTTON_FALLING;
 8000cd0:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <debounceFSM_update+0xd8>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]

		break;
 8000cd6:	e044      	b.n	8000d62 <debounceFSM_update+0xc6>
	case BUTTON_FALLING:
		if(!(delayRead(&ret_rebote)))
 8000cd8:	4828      	ldr	r0, [pc, #160]	; (8000d7c <debounceFSM_update+0xe0>)
 8000cda:	f000 f95b 	bl	8000f94 <delayRead>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	f083 0301 	eor.w	r3, r3, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d03d      	beq.n	8000d66 <debounceFSM_update+0xca>
		{
			if((HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)))
 8000cea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cee:	4822      	ldr	r0, [pc, #136]	; (8000d78 <debounceFSM_update+0xdc>)
 8000cf0:	f000 fc9a 	bl	8001628 <HAL_GPIO_ReadPin>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d005      	beq.n	8000d06 <debounceFSM_update+0x6a>
			{
				estadoActual=BUTTON_DOWN;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <debounceFSM_update+0xd8>)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 8000d00:	f000 f83e 	bl	8000d80 <buttonPressed>
			}
			else{
				estadoActual=BUTTON_UP;
			}
		}
		break;
 8000d04:	e02f      	b.n	8000d66 <debounceFSM_update+0xca>
				estadoActual=BUTTON_UP;
 8000d06:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <debounceFSM_update+0xd8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
		break;
 8000d0c:	e02b      	b.n	8000d66 <debounceFSM_update+0xca>
	case BUTTON_DOWN:
		if(!(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)))
 8000d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d12:	4819      	ldr	r0, [pc, #100]	; (8000d78 <debounceFSM_update+0xdc>)
 8000d14:	f000 fc88 	bl	8001628 <HAL_GPIO_ReadPin>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d125      	bne.n	8000d6a <debounceFSM_update+0xce>
			estadoActual=BUTTON_RAISING;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <debounceFSM_update+0xd8>)
 8000d20:	2203      	movs	r2, #3
 8000d22:	701a      	strb	r2, [r3, #0]
		break;
 8000d24:	e021      	b.n	8000d6a <debounceFSM_update+0xce>
	case BUTTON_RAISING:
		if(!(delayRead(&ret_rebote)))
 8000d26:	4815      	ldr	r0, [pc, #84]	; (8000d7c <debounceFSM_update+0xe0>)
 8000d28:	f000 f934 	bl	8000f94 <delayRead>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f083 0301 	eor.w	r3, r3, #1
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d01a      	beq.n	8000d6e <debounceFSM_update+0xd2>
				{
					if(!(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)))
 8000d38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3c:	480e      	ldr	r0, [pc, #56]	; (8000d78 <debounceFSM_update+0xdc>)
 8000d3e:	f000 fc73 	bl	8001628 <HAL_GPIO_ReadPin>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d105      	bne.n	8000d54 <debounceFSM_update+0xb8>
					{
						estadoActual=BUTTON_UP;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <debounceFSM_update+0xd8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
						buttonReleased();
 8000d4e:	f000 f82b 	bl	8000da8 <buttonReleased>
					}
					else{
						estadoActual=BUTTON_DOWN;
					}
				}
		break;
 8000d52:	e00c      	b.n	8000d6e <debounceFSM_update+0xd2>
						estadoActual=BUTTON_DOWN;
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <debounceFSM_update+0xd8>)
 8000d56:	2202      	movs	r2, #2
 8000d58:	701a      	strb	r2, [r3, #0]
		break;
 8000d5a:	e008      	b.n	8000d6e <debounceFSM_update+0xd2>
	default:
		debounceFSM_init();
 8000d5c:	f7ff ff8e 	bl	8000c7c <debounceFSM_init>
		break;
 8000d60:	e006      	b.n	8000d70 <debounceFSM_update+0xd4>
		break;
 8000d62:	bf00      	nop
 8000d64:	e004      	b.n	8000d70 <debounceFSM_update+0xd4>
		break;
 8000d66:	bf00      	nop
 8000d68:	e002      	b.n	8000d70 <debounceFSM_update+0xd4>
		break;
 8000d6a:	bf00      	nop
 8000d6c:	e000      	b.n	8000d70 <debounceFSM_update+0xd4>
		break;
 8000d6e:	bf00      	nop

	}
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200000a4 	.word	0x200000a4
 8000d78:	40020800 	.word	0x40020800
 8000d7c:	20000098 	.word	0x20000098

08000d80 <buttonPressed>:
//Acción que se realiza cuando el botón se presionó
//pasado el tiempo de antirebote
void buttonPressed()
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, led[0]);
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <buttonPressed+0x1c>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <buttonPressed+0x20>)
 8000d8c:	f000 fc7d 	bl	800168a <HAL_GPIO_TogglePin>
	var_readKey = true;
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <buttonPressed+0x24>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000004 	.word	0x20000004
 8000da0:	40020400 	.word	0x40020400
 8000da4:	200000a5 	.word	0x200000a5

08000da8 <buttonReleased>:
//Acción que se realiza cuando el botón se soltó
//pasado el tiempo de antirebote
void buttonReleased()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, led[2]);
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <buttonReleased+0x1c>)
 8000dae:	889b      	ldrh	r3, [r3, #4]
 8000db0:	4619      	mov	r1, r3
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <buttonReleased+0x20>)
 8000db4:	f000 fc69 	bl	800168a <HAL_GPIO_TogglePin>
	var_readKey = false;
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <buttonReleased+0x24>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000004 	.word	0x20000004
 8000dc8:	40020400 	.word	0x40020400
 8000dcc:	200000a5 	.word	0x200000a5

08000dd0 <readKey>:
bool_t readKey()
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
return var_readKey;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <readKey+0x14>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	200000a5 	.word	0x200000a5

08000de8 <uartInit>:
static void Error_Handler(void);						//Función para manejo de errores

//Implementación de funciones

bool_t uartInit(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
	bool_t Estado_uart = false;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]
	 MX_USART3_UART_Init();
 8000df2:	f000 f853 	bl	8000e9c <MX_USART3_UART_Init>
	 MX_USB_OTG_FS_PCD_Init();
 8000df6:	f000 f87b 	bl	8000ef0 <MX_USB_OTG_FS_PCD_Init>
	 if (HAL_UART_Init(&huart3) == HAL_OK)
 8000dfa:	4812      	ldr	r0, [pc, #72]	; (8000e44 <uartInit+0x5c>)
 8000dfc:	f001 feba 	bl	8002b74 <HAL_UART_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <uartInit+0x22>
	 Estado_uart = true;
 8000e06:	2301      	movs	r3, #1
 8000e08:	71fb      	strb	r3, [r7, #7]
	 // Mensaje de inicialización y parámetros de
	 uartSendString((const uint8_t *) "\n\rInicializacion de UART exitosa \n\r");
 8000e0a:	480f      	ldr	r0, [pc, #60]	; (8000e48 <uartInit+0x60>)
 8000e0c:	f000 f82c 	bl	8000e68 <uartSendString>
	 uartSendString((const uint8_t *) "Parametros de UART \n\r ");
 8000e10:	480e      	ldr	r0, [pc, #56]	; (8000e4c <uartInit+0x64>)
 8000e12:	f000 f829 	bl	8000e68 <uartSendString>
	 uartSendString((const uint8_t *) "- Baudios: 9600 \n\r ");
 8000e16:	480e      	ldr	r0, [pc, #56]	; (8000e50 <uartInit+0x68>)
 8000e18:	f000 f826 	bl	8000e68 <uartSendString>
	 uartSendString((const uint8_t *) "- Palabra(incluyendo pariedad): 8 \n\r ");
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <uartInit+0x6c>)
 8000e1e:	f000 f823 	bl	8000e68 <uartSendString>
	 uartSendString((const uint8_t *) "- Stop bits: 1 \n\r ");
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <uartInit+0x70>)
 8000e24:	f000 f820 	bl	8000e68 <uartSendString>
	 uartSendString((const uint8_t *) "- Pariedad: Impar \n\r ");
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <uartInit+0x74>)
 8000e2a:	f000 f81d 	bl	8000e68 <uartSendString>
	 uartSendString((const uint8_t *) "- Modo: Transmisor receptor \n\r ");
 8000e2e:	480c      	ldr	r0, [pc, #48]	; (8000e60 <uartInit+0x78>)
 8000e30:	f000 f81a 	bl	8000e68 <uartSendString>
	 uartSendString((const uint8_t *) "- Flow: Ninguno \n\r ");
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <uartInit+0x7c>)
 8000e36:	f000 f817 	bl	8000e68 <uartSendString>


	 return Estado_uart;
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200000a8 	.word	0x200000a8
 8000e48:	08004980 	.word	0x08004980
 8000e4c:	080049a4 	.word	0x080049a4
 8000e50:	080049bc 	.word	0x080049bc
 8000e54:	080049d0 	.word	0x080049d0
 8000e58:	080049f8 	.word	0x080049f8
 8000e5c:	08004a0c 	.word	0x08004a0c
 8000e60:	08004a24 	.word	0x08004a24
 8000e64:	08004a44 	.word	0x08004a44

08000e68 <uartSendString>:

void uartSendString(const uint8_t *  pstring)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	 const uint8_t *puntero=pstring;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	60fb      	str	r3, [r7, #12]
	 while(*puntero)
 8000e74:	e007      	b.n	8000e86 <uartSendString+0x1e>
	 {
		 HAL_UART_Transmit(&huart3,(const uint8_t *)puntero++,1,200);
 8000e76:	68f9      	ldr	r1, [r7, #12]
 8000e78:	1c4b      	adds	r3, r1, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	23c8      	movs	r3, #200	; 0xc8
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <uartSendString+0x30>)
 8000e82:	f001 fec4 	bl	8002c0e <HAL_UART_Transmit>
	 while(*puntero)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f3      	bne.n	8000e76 <uartSendString+0xe>
	 }
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200000a8 	.word	0x200000a8

08000e9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <MX_USART3_UART_Init+0x50>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = BAUDIOS;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ea8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000eac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = PALABRA;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = STOP;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = PARI;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ebc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000ec0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = MODO;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ec4:	220c      	movs	r2, #12
 8000ec6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = FLOW;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = TIME;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ed6:	f001 fe4d 	bl	8002b74 <HAL_UART_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8000ee0:	f000 f834 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200000a8 	.word	0x200000a8
 8000eec:	40004800 	.word	0x40004800

08000ef0 <MX_USB_OTG_FS_PCD_Init>:

static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000efa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efe:	2206      	movs	r2, #6
 8000f00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f04:	2202      	movs	r2, #2
 8000f06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f10:	2202      	movs	r2, #2
 8000f12:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f34:	f000 fbc3 	bl	80016be <HAL_PCD_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f3e:	f000 f805 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200000ec 	.word	0x200000ec

08000f4c <Error_Handler>:

static void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x8>
	...

08000f58 <delayInit>:

#include "Api_delay.h"
void delayInit( delay_t * delay, tick_t duration ){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	assert(delay!= NULL);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d105      	bne.n	8000f74 <delayInit+0x1c>
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <delayInit+0x30>)
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <delayInit+0x34>)
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <delayInit+0x38>)
 8000f70:	f002 fcbe 	bl	80038f0 <__assert_func>
 delay->duration= duration;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 delay->running=false;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	721a      	strb	r2, [r3, #8]
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	08004a58 	.word	0x08004a58
 8000f8c:	08004aa0 	.word	0x08004aa0
 8000f90:	08004a68 	.word	0x08004a68

08000f94 <delayRead>:

bool_t delayRead( delay_t * delay ){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	assert(delay!= NULL);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d105      	bne.n	8000fae <delayRead+0x1a>
 8000fa2:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <delayRead+0x68>)
 8000fa4:	4a16      	ldr	r2, [pc, #88]	; (8001000 <delayRead+0x6c>)
 8000fa6:	210a      	movs	r1, #10
 8000fa8:	4816      	ldr	r0, [pc, #88]	; (8001004 <delayRead+0x70>)
 8000faa:	f002 fca1 	bl	80038f0 <__assert_func>
	if((delay->running)==false ){
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7a1b      	ldrb	r3, [r3, #8]
 8000fb2:	f083 0301 	eor.w	r3, r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d007      	beq.n	8000fcc <delayRead+0x38>
		delay->startTime = HAL_GetTick();
 8000fbc:	f000 f88a 	bl	80010d4 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	721a      	strb	r2, [r3, #8]
	}

	if(delay->running){
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7a1b      	ldrb	r3, [r3, #8]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00c      	beq.n	8000fee <delayRead+0x5a>
		if((HAL_GetTick()-(delay->startTime))>=delay->duration){
 8000fd4:	f000 f87e 	bl	80010d4 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	1ad2      	subs	r2, r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d302      	bcc.n	8000fee <delayRead+0x5a>
			delay->running = false;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	721a      	strb	r2, [r3, #8]
		}
	}
return delay->running;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7a1b      	ldrb	r3, [r3, #8]

}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	08004a58 	.word	0x08004a58
 8001000:	08004aac 	.word	0x08004aac
 8001004:	08004a68 	.word	0x08004a68

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <HAL_Init+0x40>)
 8001012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_Init+0x40>)
 800101e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_Init+0x40>)
 800102a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 f931 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f808 	bl	800104c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103c:	f7ff fc12 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023c00 	.word	0x40023c00

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_InitTick+0x54>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f93b 	bl	80012e6 <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 f911 	bl	80012ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <HAL_InitTick+0x5c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000010 	.word	0x20000010
 80010a8:	2000000c 	.word	0x2000000c

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000010 	.word	0x20000010
 80010d0:	200005f8 	.word	0x200005f8

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	200005f8 	.word	0x200005f8

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000010 	.word	0x20000010

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800115c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff8e 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff47 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c0:	f7ff ff5c 	bl	800117c <__NVIC_GetPriorityGrouping>
 80012c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	6978      	ldr	r0, [r7, #20]
 80012cc:	f7ff ff8e 	bl	80011ec <NVIC_EncodePriority>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff5d 	bl	8001198 <__NVIC_SetPriority>
}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffb0 	bl	8001254 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	e165      	b.n	80015e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800131c:	2201      	movs	r2, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	429a      	cmp	r2, r3
 8001336:	f040 8154 	bne.w	80015e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	2b01      	cmp	r3, #1
 8001344:	d005      	beq.n	8001352 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800134e:	2b02      	cmp	r3, #2
 8001350:	d130      	bne.n	80013b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	2203      	movs	r2, #3
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001388:	2201      	movs	r2, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	f003 0201 	and.w	r2, r3, #1
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d017      	beq.n	80013f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d123      	bne.n	8001444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	08da      	lsrs	r2, r3, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3208      	adds	r2, #8
 8001404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	220f      	movs	r2, #15
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	08da      	lsrs	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3208      	adds	r2, #8
 800143e:	69b9      	ldr	r1, [r7, #24]
 8001440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0203 	and.w	r2, r3, #3
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80ae 	beq.w	80015e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b5d      	ldr	r3, [pc, #372]	; (8001600 <HAL_GPIO_Init+0x300>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a5c      	ldr	r2, [pc, #368]	; (8001600 <HAL_GPIO_Init+0x300>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b5a      	ldr	r3, [pc, #360]	; (8001600 <HAL_GPIO_Init+0x300>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014a2:	4a58      	ldr	r2, [pc, #352]	; (8001604 <HAL_GPIO_Init+0x304>)
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3302      	adds	r3, #2
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	220f      	movs	r2, #15
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4f      	ldr	r2, [pc, #316]	; (8001608 <HAL_GPIO_Init+0x308>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d025      	beq.n	800151a <HAL_GPIO_Init+0x21a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4e      	ldr	r2, [pc, #312]	; (800160c <HAL_GPIO_Init+0x30c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d01f      	beq.n	8001516 <HAL_GPIO_Init+0x216>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4d      	ldr	r2, [pc, #308]	; (8001610 <HAL_GPIO_Init+0x310>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d019      	beq.n	8001512 <HAL_GPIO_Init+0x212>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <HAL_GPIO_Init+0x314>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d013      	beq.n	800150e <HAL_GPIO_Init+0x20e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4b      	ldr	r2, [pc, #300]	; (8001618 <HAL_GPIO_Init+0x318>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00d      	beq.n	800150a <HAL_GPIO_Init+0x20a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4a      	ldr	r2, [pc, #296]	; (800161c <HAL_GPIO_Init+0x31c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d007      	beq.n	8001506 <HAL_GPIO_Init+0x206>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a49      	ldr	r2, [pc, #292]	; (8001620 <HAL_GPIO_Init+0x320>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d101      	bne.n	8001502 <HAL_GPIO_Init+0x202>
 80014fe:	2306      	movs	r3, #6
 8001500:	e00c      	b.n	800151c <HAL_GPIO_Init+0x21c>
 8001502:	2307      	movs	r3, #7
 8001504:	e00a      	b.n	800151c <HAL_GPIO_Init+0x21c>
 8001506:	2305      	movs	r3, #5
 8001508:	e008      	b.n	800151c <HAL_GPIO_Init+0x21c>
 800150a:	2304      	movs	r3, #4
 800150c:	e006      	b.n	800151c <HAL_GPIO_Init+0x21c>
 800150e:	2303      	movs	r3, #3
 8001510:	e004      	b.n	800151c <HAL_GPIO_Init+0x21c>
 8001512:	2302      	movs	r3, #2
 8001514:	e002      	b.n	800151c <HAL_GPIO_Init+0x21c>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_GPIO_Init+0x21c>
 800151a:	2300      	movs	r3, #0
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	f002 0203 	and.w	r2, r2, #3
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	4093      	lsls	r3, r2
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800152c:	4935      	ldr	r1, [pc, #212]	; (8001604 <HAL_GPIO_Init+0x304>)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	3302      	adds	r3, #2
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800153a:	4b3a      	ldr	r3, [pc, #232]	; (8001624 <HAL_GPIO_Init+0x324>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800155e:	4a31      	ldr	r2, [pc, #196]	; (8001624 <HAL_GPIO_Init+0x324>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001564:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <HAL_GPIO_Init+0x324>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001588:	4a26      	ldr	r2, [pc, #152]	; (8001624 <HAL_GPIO_Init+0x324>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <HAL_GPIO_Init+0x324>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015b2:	4a1c      	ldr	r2, [pc, #112]	; (8001624 <HAL_GPIO_Init+0x324>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_GPIO_Init+0x324>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <HAL_GPIO_Init+0x324>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3301      	adds	r3, #1
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	2b0f      	cmp	r3, #15
 80015ec:	f67f ae96 	bls.w	800131c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40013800 	.word	0x40013800
 8001608:	40020000 	.word	0x40020000
 800160c:	40020400 	.word	0x40020400
 8001610:	40020800 	.word	0x40020800
 8001614:	40020c00 	.word	0x40020c00
 8001618:	40021000 	.word	0x40021000
 800161c:	40021400 	.word	0x40021400
 8001620:	40021800 	.word	0x40021800
 8001624:	40013c00 	.word	0x40013c00

08001628 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	e001      	b.n	800164a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800169c:	887a      	ldrh	r2, [r7, #2]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4013      	ands	r3, r2
 80016a2:	041a      	lsls	r2, r3, #16
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	400b      	ands	r3, r1
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	619a      	str	r2, [r3, #24]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c0:	b08f      	sub	sp, #60	; 0x3c
 80016c2:	af0a      	add	r7, sp, #40	; 0x28
 80016c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e116      	b.n	80018fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d106      	bne.n	80016f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff f92a 	bl	8000944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2203      	movs	r2, #3
 80016f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f001 fe53 	bl	80033ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	687e      	ldr	r6, [r7, #4]
 800171c:	466d      	mov	r5, sp
 800171e:	f106 0410 	add.w	r4, r6, #16
 8001722:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001724:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800172a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800172e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001732:	1d33      	adds	r3, r6, #4
 8001734:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001736:	6838      	ldr	r0, [r7, #0]
 8001738:	f001 fdde 	bl	80032f8 <USB_CoreInit>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d005      	beq.n	800174e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2202      	movs	r2, #2
 8001746:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0d7      	b.n	80018fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f001 fe41 	bl	80033dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	e04a      	b.n	80017f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4413      	add	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	333d      	adds	r3, #61	; 0x3d
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001774:	7bfa      	ldrb	r2, [r7, #15]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	333c      	adds	r3, #60	; 0x3c
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001788:	7bfa      	ldrb	r2, [r7, #15]
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	b298      	uxth	r0, r3
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	3344      	adds	r3, #68	; 0x44
 800179c:	4602      	mov	r2, r0
 800179e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	3340      	adds	r3, #64	; 0x40
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3348      	adds	r3, #72	; 0x48
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	334c      	adds	r3, #76	; 0x4c
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	3354      	adds	r3, #84	; 0x54
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	3301      	adds	r3, #1
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d3af      	bcc.n	8001760 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	e044      	b.n	8001890 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001806:	7bfa      	ldrb	r2, [r7, #15]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800181c:	7bfa      	ldrb	r2, [r7, #15]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800182e:	7bfa      	ldrb	r2, [r7, #15]
 8001830:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4413      	add	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800185e:	7bfa      	ldrb	r2, [r7, #15]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	3301      	adds	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	429a      	cmp	r2, r3
 8001898:	d3b5      	bcc.n	8001806 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	687e      	ldr	r6, [r7, #4]
 80018a2:	466d      	mov	r5, sp
 80018a4:	f106 0410 	add.w	r4, r6, #16
 80018a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80018b8:	1d33      	adds	r3, r6, #4
 80018ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018bc:	6838      	ldr	r0, [r7, #0]
 80018be:	f001 fdd9 	bl	8003474 <USB_DevInit>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e014      	b.n	80018fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d102      	bne.n	80018f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f80a 	bl	8001906 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 ff97 	bl	800382a <USB_DevDisconnect>

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001906 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001906:	b480      	push	{r7}
 8001908:	b085      	sub	sp, #20
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	f043 0303 	orr.w	r3, r3, #3
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0cc      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d90c      	bls.n	800198c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b65      	ldr	r3, [pc, #404]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0b8      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a4:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019bc:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c8:	4b50      	ldr	r3, [pc, #320]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	494d      	ldr	r1, [pc, #308]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d044      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d119      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e07f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d003      	beq.n	8001a0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e06f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e067      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f023 0203 	bic.w	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4934      	ldr	r1, [pc, #208]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a40:	f7ff fb48 	bl	80010d4 <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7ff fb44 	bl	80010d4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e04f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 020c 	and.w	r2, r3, #12
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1eb      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d20c      	bcs.n	8001a98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e032      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4916      	ldr	r1, [pc, #88]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	490e      	ldr	r1, [pc, #56]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ad6:	f000 fb7f 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8001ada:	4602      	mov	r2, r0
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	490a      	ldr	r1, [pc, #40]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	5ccb      	ldrb	r3, [r1, r3]
 8001aea:	fa22 f303 	lsr.w	r3, r2, r3
 8001aee:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff faa8 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023c00 	.word	0x40023c00
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	08004a88 	.word	0x08004a88
 8001b14:	20000000 	.word	0x20000000
 8001b18:	2000000c 	.word	0x2000000c

08001b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b38:	f7ff fff0 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0a9b      	lsrs	r3, r3, #10
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	08004a98 	.word	0x08004a98

08001b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b60:	f7ff ffdc 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0b5b      	lsrs	r3, r3, #13
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	08004a98 	.word	0x08004a98

08001b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08c      	sub	sp, #48	; 0x30
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d010      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001bbc:	4b6f      	ldr	r3, [pc, #444]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bc2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bca:	496c      	ldr	r1, [pc, #432]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d010      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001bea:	4b64      	ldr	r3, [pc, #400]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bf0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf8:	4960      	ldr	r1, [pc, #384]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d017      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c18:	4b58      	ldr	r3, [pc, #352]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4955      	ldr	r1, [pc, #340]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c36:	d101      	bne.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001c44:	2301      	movs	r3, #1
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d017      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c54:	4b49      	ldr	r3, [pc, #292]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c62:	4946      	ldr	r1, [pc, #280]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c72:	d101      	bne.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001c74:	2301      	movs	r3, #1
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001c80:	2301      	movs	r3, #1
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0320 	and.w	r3, r3, #32
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 808a 	beq.w	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a38      	ldr	r2, [pc, #224]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001cae:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a33      	ldr	r2, [pc, #204]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cba:	f7ff fa0b 	bl	80010d4 <HAL_GetTick>
 8001cbe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001cc2:	f7ff fa07 	bl	80010d4 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e278      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001cd4:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ce0:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d02f      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cf8:	6a3a      	ldr	r2, [r7, #32]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d028      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cfe:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d06:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d08:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001d14:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d114      	bne.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001d26:	f7ff f9d5 	bl	80010d4 <HAL_GetTick>
 8001d2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7ff f9d1 	bl	80010d4 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e240      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0ee      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d5c:	d114      	bne.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d72:	4902      	ldr	r1, [pc, #8]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]
 8001d78:	e00c      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40007000 	.word	0x40007000
 8001d84:	42470e40 	.word	0x42470e40
 8001d88:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4a49      	ldr	r2, [pc, #292]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d92:	6093      	str	r3, [r2, #8]
 8001d94:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da0:	4944      	ldr	r1, [pc, #272]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001db8:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001dba:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00a      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001dc8:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	4937      	ldr	r1, [pc, #220]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00a      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001dea:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df8:	492e      	ldr	r1, [pc, #184]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d011      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e0c:	4b29      	ldr	r3, [pc, #164]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e12:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1a:	4926      	ldr	r1, [pc, #152]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00a      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	491a      	ldr	r1, [pc, #104]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d011      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e64:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e6c:	4911      	ldr	r1, [pc, #68]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d005      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e90:	f040 80ff 	bne.w	8002092 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e9a:	f7ff f91b 	bl	80010d4 <HAL_GetTick>
 8001e9e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ea0:	e00e      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ea2:	f7ff f917 	bl	80010d4 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d907      	bls.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e188      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	424711e0 	.word	0x424711e0
 8001ebc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ec0:	4b7e      	ldr	r3, [pc, #504]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1ea      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d009      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d028      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d124      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ef4:	4b71      	ldr	r3, [pc, #452]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001efa:	0c1b      	lsrs	r3, r3, #16
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	3301      	adds	r3, #1
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f06:	4b6d      	ldr	r3, [pc, #436]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f0c:	0e1b      	lsrs	r3, r3, #24
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	019b      	lsls	r3, r3, #6
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	085b      	lsrs	r3, r3, #1
 8001f24:	3b01      	subs	r3, #1
 8001f26:	041b      	lsls	r3, r3, #16
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	071b      	lsls	r3, r3, #28
 8001f36:	4961      	ldr	r1, [pc, #388]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d004      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f52:	d00a      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d035      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f68:	d130      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f6a:	4b54      	ldr	r3, [pc, #336]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f70:	0c1b      	lsrs	r3, r3, #16
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	3301      	adds	r3, #1
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f7c:	4b4f      	ldr	r3, [pc, #316]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f82:	0f1b      	lsrs	r3, r3, #28
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	019b      	lsls	r3, r3, #6
 8001f94:	431a      	orrs	r2, r3
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	085b      	lsrs	r3, r3, #1
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	041b      	lsls	r3, r3, #16
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	061b      	lsls	r3, r3, #24
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	071b      	lsls	r3, r3, #28
 8001fac:	4943      	ldr	r1, [pc, #268]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001fb4:	4b41      	ldr	r3, [pc, #260]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fba:	f023 021f 	bic.w	r2, r3, #31
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	493d      	ldr	r1, [pc, #244]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d029      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fe0:	d124      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001fe2:	4b36      	ldr	r3, [pc, #216]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fe8:	0c1b      	lsrs	r3, r3, #16
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ff4:	4b31      	ldr	r3, [pc, #196]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ffa:	0f1b      	lsrs	r3, r3, #28
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	019b      	lsls	r3, r3, #6
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	3b01      	subs	r3, #1
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	431a      	orrs	r2, r3
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	431a      	orrs	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	071b      	lsls	r3, r3, #28
 8002024:	4925      	ldr	r1, [pc, #148]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002034:	2b00      	cmp	r3, #0
 8002036:	d016      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	019b      	lsls	r3, r3, #6
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	3b01      	subs	r3, #1
 800204c:	041b      	lsls	r3, r3, #16
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	061b      	lsls	r3, r3, #24
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	071b      	lsls	r3, r3, #28
 800205e:	4917      	ldr	r1, [pc, #92]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800206c:	f7ff f832 	bl	80010d4 <HAL_GetTick>
 8002070:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002074:	f7ff f82e 	bl	80010d4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e09f      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002094:	2b01      	cmp	r3, #1
 8002096:	f040 8095 	bne.w	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020a0:	f7ff f818 	bl	80010d4 <HAL_GetTick>
 80020a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020a6:	e00f      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80020a8:	f7ff f814 	bl	80010d4 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d908      	bls.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e085      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	42470068 	.word	0x42470068
 80020c4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020c8:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020d4:	d0e8      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x566>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d02b      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d127      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80020fe:	4b34      	ldr	r3, [pc, #208]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002104:	0c1b      	lsrs	r3, r3, #16
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	3301      	adds	r3, #1
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699a      	ldr	r2, [r3, #24]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	019b      	lsls	r3, r3, #6
 800211a:	431a      	orrs	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	3b01      	subs	r3, #1
 8002122:	041b      	lsls	r3, r3, #16
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	061b      	lsls	r3, r3, #24
 800212c:	4928      	ldr	r1, [pc, #160]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002134:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800213a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	3b01      	subs	r3, #1
 8002144:	021b      	lsls	r3, r3, #8
 8002146:	4922      	ldr	r1, [pc, #136]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d01d      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002162:	d118      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	0e1b      	lsrs	r3, r3, #24
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	019b      	lsls	r3, r3, #6
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	085b      	lsrs	r3, r3, #1
 8002184:	3b01      	subs	r3, #1
 8002186:	041b      	lsls	r3, r3, #16
 8002188:	431a      	orrs	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	061b      	lsls	r3, r3, #24
 800218e:	4910      	ldr	r1, [pc, #64]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800219c:	f7fe ff9a 	bl	80010d4 <HAL_GetTick>
 80021a0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80021a4:	f7fe ff96 	bl	80010d4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e007      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021c2:	d1ef      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3730      	adds	r7, #48	; 0x30
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800
 80021d4:	42470070 	.word	0x42470070

080021d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021dc:	b0ae      	sub	sp, #184	; 0xb8
 80021de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021fe:	4bcb      	ldr	r3, [pc, #812]	; (800252c <HAL_RCC_GetSysClockFreq+0x354>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b0c      	cmp	r3, #12
 8002208:	f200 8206 	bhi.w	8002618 <HAL_RCC_GetSysClockFreq+0x440>
 800220c:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <HAL_RCC_GetSysClockFreq+0x3c>)
 800220e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002212:	bf00      	nop
 8002214:	08002249 	.word	0x08002249
 8002218:	08002619 	.word	0x08002619
 800221c:	08002619 	.word	0x08002619
 8002220:	08002619 	.word	0x08002619
 8002224:	08002251 	.word	0x08002251
 8002228:	08002619 	.word	0x08002619
 800222c:	08002619 	.word	0x08002619
 8002230:	08002619 	.word	0x08002619
 8002234:	08002259 	.word	0x08002259
 8002238:	08002619 	.word	0x08002619
 800223c:	08002619 	.word	0x08002619
 8002240:	08002619 	.word	0x08002619
 8002244:	08002449 	.word	0x08002449
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002248:	4bb9      	ldr	r3, [pc, #740]	; (8002530 <HAL_RCC_GetSysClockFreq+0x358>)
 800224a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800224e:	e1e7      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002250:	4bb8      	ldr	r3, [pc, #736]	; (8002534 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002252:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002256:	e1e3      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002258:	4bb4      	ldr	r3, [pc, #720]	; (800252c <HAL_RCC_GetSysClockFreq+0x354>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002264:	4bb1      	ldr	r3, [pc, #708]	; (800252c <HAL_RCC_GetSysClockFreq+0x354>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d071      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002270:	4bae      	ldr	r3, [pc, #696]	; (800252c <HAL_RCC_GetSysClockFreq+0x354>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	099b      	lsrs	r3, r3, #6
 8002276:	2200      	movs	r2, #0
 8002278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800227c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002280:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002288:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002296:	4622      	mov	r2, r4
 8002298:	462b      	mov	r3, r5
 800229a:	f04f 0000 	mov.w	r0, #0
 800229e:	f04f 0100 	mov.w	r1, #0
 80022a2:	0159      	lsls	r1, r3, #5
 80022a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a8:	0150      	lsls	r0, r2, #5
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4621      	mov	r1, r4
 80022b0:	1a51      	subs	r1, r2, r1
 80022b2:	6439      	str	r1, [r7, #64]	; 0x40
 80022b4:	4629      	mov	r1, r5
 80022b6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ba:	647b      	str	r3, [r7, #68]	; 0x44
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80022c8:	4649      	mov	r1, r9
 80022ca:	018b      	lsls	r3, r1, #6
 80022cc:	4641      	mov	r1, r8
 80022ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022d2:	4641      	mov	r1, r8
 80022d4:	018a      	lsls	r2, r1, #6
 80022d6:	4641      	mov	r1, r8
 80022d8:	1a51      	subs	r1, r2, r1
 80022da:	63b9      	str	r1, [r7, #56]	; 0x38
 80022dc:	4649      	mov	r1, r9
 80022de:	eb63 0301 	sbc.w	r3, r3, r1
 80022e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80022f0:	4649      	mov	r1, r9
 80022f2:	00cb      	lsls	r3, r1, #3
 80022f4:	4641      	mov	r1, r8
 80022f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022fa:	4641      	mov	r1, r8
 80022fc:	00ca      	lsls	r2, r1, #3
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	4603      	mov	r3, r0
 8002304:	4622      	mov	r2, r4
 8002306:	189b      	adds	r3, r3, r2
 8002308:	633b      	str	r3, [r7, #48]	; 0x30
 800230a:	462b      	mov	r3, r5
 800230c:	460a      	mov	r2, r1
 800230e:	eb42 0303 	adc.w	r3, r2, r3
 8002312:	637b      	str	r3, [r7, #52]	; 0x34
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002320:	4629      	mov	r1, r5
 8002322:	024b      	lsls	r3, r1, #9
 8002324:	4621      	mov	r1, r4
 8002326:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800232a:	4621      	mov	r1, r4
 800232c:	024a      	lsls	r2, r1, #9
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002336:	2200      	movs	r2, #0
 8002338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800233c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002340:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uldivmod>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4613      	mov	r3, r2
 800234e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002352:	e067      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002354:	4b75      	ldr	r3, [pc, #468]	; (800252c <HAL_RCC_GetSysClockFreq+0x354>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	099b      	lsrs	r3, r3, #6
 800235a:	2200      	movs	r2, #0
 800235c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002360:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002364:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236c:	67bb      	str	r3, [r7, #120]	; 0x78
 800236e:	2300      	movs	r3, #0
 8002370:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002372:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002376:	4622      	mov	r2, r4
 8002378:	462b      	mov	r3, r5
 800237a:	f04f 0000 	mov.w	r0, #0
 800237e:	f04f 0100 	mov.w	r1, #0
 8002382:	0159      	lsls	r1, r3, #5
 8002384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002388:	0150      	lsls	r0, r2, #5
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4621      	mov	r1, r4
 8002390:	1a51      	subs	r1, r2, r1
 8002392:	62b9      	str	r1, [r7, #40]	; 0x28
 8002394:	4629      	mov	r1, r5
 8002396:	eb63 0301 	sbc.w	r3, r3, r1
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80023a8:	4649      	mov	r1, r9
 80023aa:	018b      	lsls	r3, r1, #6
 80023ac:	4641      	mov	r1, r8
 80023ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023b2:	4641      	mov	r1, r8
 80023b4:	018a      	lsls	r2, r1, #6
 80023b6:	4641      	mov	r1, r8
 80023b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80023bc:	4649      	mov	r1, r9
 80023be:	eb63 0b01 	sbc.w	fp, r3, r1
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023d6:	4692      	mov	sl, r2
 80023d8:	469b      	mov	fp, r3
 80023da:	4623      	mov	r3, r4
 80023dc:	eb1a 0303 	adds.w	r3, sl, r3
 80023e0:	623b      	str	r3, [r7, #32]
 80023e2:	462b      	mov	r3, r5
 80023e4:	eb4b 0303 	adc.w	r3, fp, r3
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80023f6:	4629      	mov	r1, r5
 80023f8:	028b      	lsls	r3, r1, #10
 80023fa:	4621      	mov	r1, r4
 80023fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002400:	4621      	mov	r1, r4
 8002402:	028a      	lsls	r2, r1, #10
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800240c:	2200      	movs	r2, #0
 800240e:	673b      	str	r3, [r7, #112]	; 0x70
 8002410:	677a      	str	r2, [r7, #116]	; 0x74
 8002412:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002416:	f7fd ff4b 	bl	80002b0 <__aeabi_uldivmod>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4613      	mov	r3, r2
 8002420:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002424:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_RCC_GetSysClockFreq+0x354>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	3301      	adds	r3, #1
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800243a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800243e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002442:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002446:	e0eb      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002448:	4b38      	ldr	r3, [pc, #224]	; (800252c <HAL_RCC_GetSysClockFreq+0x354>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002450:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002454:	4b35      	ldr	r3, [pc, #212]	; (800252c <HAL_RCC_GetSysClockFreq+0x354>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d06b      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002460:	4b32      	ldr	r3, [pc, #200]	; (800252c <HAL_RCC_GetSysClockFreq+0x354>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	099b      	lsrs	r3, r3, #6
 8002466:	2200      	movs	r2, #0
 8002468:	66bb      	str	r3, [r7, #104]	; 0x68
 800246a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800246c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800246e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002472:	663b      	str	r3, [r7, #96]	; 0x60
 8002474:	2300      	movs	r3, #0
 8002476:	667b      	str	r3, [r7, #100]	; 0x64
 8002478:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800247c:	4622      	mov	r2, r4
 800247e:	462b      	mov	r3, r5
 8002480:	f04f 0000 	mov.w	r0, #0
 8002484:	f04f 0100 	mov.w	r1, #0
 8002488:	0159      	lsls	r1, r3, #5
 800248a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800248e:	0150      	lsls	r0, r2, #5
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4621      	mov	r1, r4
 8002496:	1a51      	subs	r1, r2, r1
 8002498:	61b9      	str	r1, [r7, #24]
 800249a:	4629      	mov	r1, r5
 800249c:	eb63 0301 	sbc.w	r3, r3, r1
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80024ae:	4659      	mov	r1, fp
 80024b0:	018b      	lsls	r3, r1, #6
 80024b2:	4651      	mov	r1, sl
 80024b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024b8:	4651      	mov	r1, sl
 80024ba:	018a      	lsls	r2, r1, #6
 80024bc:	4651      	mov	r1, sl
 80024be:	ebb2 0801 	subs.w	r8, r2, r1
 80024c2:	4659      	mov	r1, fp
 80024c4:	eb63 0901 	sbc.w	r9, r3, r1
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024dc:	4690      	mov	r8, r2
 80024de:	4699      	mov	r9, r3
 80024e0:	4623      	mov	r3, r4
 80024e2:	eb18 0303 	adds.w	r3, r8, r3
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	462b      	mov	r3, r5
 80024ea:	eb49 0303 	adc.w	r3, r9, r3
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80024fc:	4629      	mov	r1, r5
 80024fe:	024b      	lsls	r3, r1, #9
 8002500:	4621      	mov	r1, r4
 8002502:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002506:	4621      	mov	r1, r4
 8002508:	024a      	lsls	r2, r1, #9
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002512:	2200      	movs	r2, #0
 8002514:	65bb      	str	r3, [r7, #88]	; 0x58
 8002516:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002518:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800251c:	f7fd fec8 	bl	80002b0 <__aeabi_uldivmod>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4613      	mov	r3, r2
 8002526:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800252a:	e065      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x420>
 800252c:	40023800 	.word	0x40023800
 8002530:	00f42400 	.word	0x00f42400
 8002534:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002538:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_RCC_GetSysClockFreq+0x458>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	2200      	movs	r2, #0
 8002540:	4618      	mov	r0, r3
 8002542:	4611      	mov	r1, r2
 8002544:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002548:	653b      	str	r3, [r7, #80]	; 0x50
 800254a:	2300      	movs	r3, #0
 800254c:	657b      	str	r3, [r7, #84]	; 0x54
 800254e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002552:	4642      	mov	r2, r8
 8002554:	464b      	mov	r3, r9
 8002556:	f04f 0000 	mov.w	r0, #0
 800255a:	f04f 0100 	mov.w	r1, #0
 800255e:	0159      	lsls	r1, r3, #5
 8002560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002564:	0150      	lsls	r0, r2, #5
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4641      	mov	r1, r8
 800256c:	1a51      	subs	r1, r2, r1
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	4649      	mov	r1, r9
 8002572:	eb63 0301 	sbc.w	r3, r3, r1
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002584:	4659      	mov	r1, fp
 8002586:	018b      	lsls	r3, r1, #6
 8002588:	4651      	mov	r1, sl
 800258a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800258e:	4651      	mov	r1, sl
 8002590:	018a      	lsls	r2, r1, #6
 8002592:	4651      	mov	r1, sl
 8002594:	1a54      	subs	r4, r2, r1
 8002596:	4659      	mov	r1, fp
 8002598:	eb63 0501 	sbc.w	r5, r3, r1
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	00eb      	lsls	r3, r5, #3
 80025a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025aa:	00e2      	lsls	r2, r4, #3
 80025ac:	4614      	mov	r4, r2
 80025ae:	461d      	mov	r5, r3
 80025b0:	4643      	mov	r3, r8
 80025b2:	18e3      	adds	r3, r4, r3
 80025b4:	603b      	str	r3, [r7, #0]
 80025b6:	464b      	mov	r3, r9
 80025b8:	eb45 0303 	adc.w	r3, r5, r3
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ca:	4629      	mov	r1, r5
 80025cc:	028b      	lsls	r3, r1, #10
 80025ce:	4621      	mov	r1, r4
 80025d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025d4:	4621      	mov	r1, r4
 80025d6:	028a      	lsls	r2, r1, #10
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025e0:	2200      	movs	r2, #0
 80025e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80025e4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80025e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025ea:	f7fd fe61 	bl	80002b0 <__aeabi_uldivmod>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4613      	mov	r3, r2
 80025f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_RCC_GetSysClockFreq+0x458>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	0f1b      	lsrs	r3, r3, #28
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002606:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800260a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002616:	e003      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_RCC_GetSysClockFreq+0x45c>)
 800261a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800261e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002620:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002624:	4618      	mov	r0, r3
 8002626:	37b8      	adds	r7, #184	; 0xb8
 8002628:	46bd      	mov	sp, r7
 800262a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	00f42400 	.word	0x00f42400

08002638 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e28d      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8083 	beq.w	800275e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002658:	4b94      	ldr	r3, [pc, #592]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b04      	cmp	r3, #4
 8002662:	d019      	beq.n	8002698 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002664:	4b91      	ldr	r3, [pc, #580]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800266c:	2b08      	cmp	r3, #8
 800266e:	d106      	bne.n	800267e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002670:	4b8e      	ldr	r3, [pc, #568]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002678:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800267c:	d00c      	beq.n	8002698 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267e:	4b8b      	ldr	r3, [pc, #556]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002686:	2b0c      	cmp	r3, #12
 8002688:	d112      	bne.n	80026b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800268a:	4b88      	ldr	r3, [pc, #544]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002696:	d10b      	bne.n	80026b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	4b84      	ldr	r3, [pc, #528]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d05b      	beq.n	800275c <HAL_RCC_OscConfig+0x124>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d157      	bne.n	800275c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e25a      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b8:	d106      	bne.n	80026c8 <HAL_RCC_OscConfig+0x90>
 80026ba:	4b7c      	ldr	r3, [pc, #496]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a7b      	ldr	r2, [pc, #492]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e01d      	b.n	8002704 <HAL_RCC_OscConfig+0xcc>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0xb4>
 80026d2:	4b76      	ldr	r3, [pc, #472]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a75      	ldr	r2, [pc, #468]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 80026d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b73      	ldr	r3, [pc, #460]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a72      	ldr	r2, [pc, #456]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 80026e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e00b      	b.n	8002704 <HAL_RCC_OscConfig+0xcc>
 80026ec:	4b6f      	ldr	r3, [pc, #444]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a6e      	ldr	r2, [pc, #440]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 80026f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4b6c      	ldr	r3, [pc, #432]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a6b      	ldr	r2, [pc, #428]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 80026fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d013      	beq.n	8002734 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fce2 	bl	80010d4 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002714:	f7fe fcde 	bl	80010d4 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	; 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e21f      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	4b61      	ldr	r3, [pc, #388]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0xdc>
 8002732:	e014      	b.n	800275e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7fe fcce 	bl	80010d4 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800273c:	f7fe fcca 	bl	80010d4 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e20b      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274e:	4b57      	ldr	r3, [pc, #348]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x104>
 800275a:	e000      	b.n	800275e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d06f      	beq.n	800284a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800276a:	4b50      	ldr	r3, [pc, #320]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b00      	cmp	r3, #0
 8002774:	d017      	beq.n	80027a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002776:	4b4d      	ldr	r3, [pc, #308]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800277e:	2b08      	cmp	r3, #8
 8002780:	d105      	bne.n	800278e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002782:	4b4a      	ldr	r3, [pc, #296]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d11c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279a:	4b44      	ldr	r3, [pc, #272]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d116      	bne.n	80027d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a6:	4b41      	ldr	r3, [pc, #260]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_RCC_OscConfig+0x186>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e1d3      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027be:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4937      	ldr	r1, [pc, #220]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d2:	e03a      	b.n	800284a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027dc:	4b34      	ldr	r3, [pc, #208]	; (80028b0 <HAL_RCC_OscConfig+0x278>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7fe fc77 	bl	80010d4 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ea:	f7fe fc73 	bl	80010d4 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e1b4      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b28      	ldr	r3, [pc, #160]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4925      	ldr	r1, [pc, #148]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]
 800281c:	e015      	b.n	800284a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281e:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <HAL_RCC_OscConfig+0x278>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7fe fc56 	bl	80010d4 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282c:	f7fe fc52 	bl	80010d4 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e193      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d036      	beq.n	80028c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d016      	beq.n	800288c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_RCC_OscConfig+0x27c>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe fc36 	bl	80010d4 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800286c:	f7fe fc32 	bl	80010d4 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e173      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 8002880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x234>
 800288a:	e01b      	b.n	80028c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_RCC_OscConfig+0x27c>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002892:	f7fe fc1f 	bl	80010d4 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002898:	e00e      	b.n	80028b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800289a:	f7fe fc1b 	bl	80010d4 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d907      	bls.n	80028b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e15c      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
 80028ac:	40023800 	.word	0x40023800
 80028b0:	42470000 	.word	0x42470000
 80028b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b8:	4b8a      	ldr	r3, [pc, #552]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80028ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1ea      	bne.n	800289a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8097 	beq.w	8002a00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d6:	4b83      	ldr	r3, [pc, #524]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10f      	bne.n	8002902 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	4b7f      	ldr	r3, [pc, #508]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a7e      	ldr	r2, [pc, #504]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b7c      	ldr	r3, [pc, #496]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002902:	4b79      	ldr	r3, [pc, #484]	; (8002ae8 <HAL_RCC_OscConfig+0x4b0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800290e:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <HAL_RCC_OscConfig+0x4b0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a75      	ldr	r2, [pc, #468]	; (8002ae8 <HAL_RCC_OscConfig+0x4b0>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291a:	f7fe fbdb 	bl	80010d4 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002922:	f7fe fbd7 	bl	80010d4 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e118      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	4b6c      	ldr	r3, [pc, #432]	; (8002ae8 <HAL_RCC_OscConfig+0x4b0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d106      	bne.n	8002956 <HAL_RCC_OscConfig+0x31e>
 8002948:	4b66      	ldr	r3, [pc, #408]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	4a65      	ldr	r2, [pc, #404]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6713      	str	r3, [r2, #112]	; 0x70
 8002954:	e01c      	b.n	8002990 <HAL_RCC_OscConfig+0x358>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b05      	cmp	r3, #5
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x340>
 800295e:	4b61      	ldr	r3, [pc, #388]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002962:	4a60      	ldr	r2, [pc, #384]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	6713      	str	r3, [r2, #112]	; 0x70
 800296a:	4b5e      	ldr	r3, [pc, #376]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	4a5d      	ldr	r2, [pc, #372]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6713      	str	r3, [r2, #112]	; 0x70
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0x358>
 8002978:	4b5a      	ldr	r3, [pc, #360]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	4a59      	ldr	r2, [pc, #356]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	6713      	str	r3, [r2, #112]	; 0x70
 8002984:	4b57      	ldr	r3, [pc, #348]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	4a56      	ldr	r2, [pc, #344]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 800298a:	f023 0304 	bic.w	r3, r3, #4
 800298e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d015      	beq.n	80029c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7fe fb9c 	bl	80010d4 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a0:	f7fe fb98 	bl	80010d4 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e0d7      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b6:	4b4b      	ldr	r3, [pc, #300]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0ee      	beq.n	80029a0 <HAL_RCC_OscConfig+0x368>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c4:	f7fe fb86 	bl	80010d4 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029cc:	f7fe fb82 	bl	80010d4 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e0c1      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e2:	4b40      	ldr	r3, [pc, #256]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1ee      	bne.n	80029cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d105      	bne.n	8002a00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f4:	4b3b      	ldr	r3, [pc, #236]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	4a3a      	ldr	r2, [pc, #232]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80029fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80ad 	beq.w	8002b64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a0a:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d060      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d145      	bne.n	8002aaa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b33      	ldr	r3, [pc, #204]	; (8002aec <HAL_RCC_OscConfig+0x4b4>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fb56 	bl	80010d4 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7fe fb52 	bl	80010d4 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e093      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	4b29      	ldr	r3, [pc, #164]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69da      	ldr	r2, [r3, #28]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	019b      	lsls	r3, r3, #6
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	085b      	lsrs	r3, r3, #1
 8002a62:	3b01      	subs	r3, #1
 8002a64:	041b      	lsls	r3, r3, #16
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	071b      	lsls	r3, r3, #28
 8002a76:	491b      	ldr	r1, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_RCC_OscConfig+0x4b4>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fe fb27 	bl	80010d4 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8a:	f7fe fb23 	bl	80010d4 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e064      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x452>
 8002aa8:	e05c      	b.n	8002b64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <HAL_RCC_OscConfig+0x4b4>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fb10 	bl	80010d4 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe fb0c 	bl	80010d4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e04d      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x480>
 8002ad6:	e045      	b.n	8002b64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d107      	bne.n	8002af0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e040      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40007000 	.word	0x40007000
 8002aec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002af0:	4b1f      	ldr	r3, [pc, #124]	; (8002b70 <HAL_RCC_OscConfig+0x538>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d030      	beq.n	8002b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d129      	bne.n	8002b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d122      	bne.n	8002b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d119      	bne.n	8002b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	085b      	lsrs	r3, r3, #1
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d10f      	bne.n	8002b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800

08002b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e03f      	b.n	8002c06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fd fe8a 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2224      	movs	r2, #36	; 0x24
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f929 	bl	8002e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b08a      	sub	sp, #40	; 0x28
 8002c12:	af02      	add	r7, sp, #8
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	d17c      	bne.n	8002d28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <HAL_UART_Transmit+0x2c>
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e075      	b.n	8002d2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_UART_Transmit+0x3e>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e06e      	b.n	8002d2a <HAL_UART_Transmit+0x11c>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2221      	movs	r2, #33	; 0x21
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c62:	f7fe fa37 	bl	80010d4 <HAL_GetTick>
 8002c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	88fa      	ldrh	r2, [r7, #6]
 8002c72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7c:	d108      	bne.n	8002c90 <HAL_UART_Transmit+0x82>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d104      	bne.n	8002c90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	e003      	b.n	8002c98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ca0:	e02a      	b.n	8002cf8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f840 	bl	8002d32 <UART_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e036      	b.n	8002d2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10b      	bne.n	8002cda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	e007      	b.n	8002cea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	781a      	ldrb	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1cf      	bne.n	8002ca2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2140      	movs	r1, #64	; 0x40
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f810 	bl	8002d32 <UART_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e006      	b.n	8002d2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e000      	b.n	8002d2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d28:	2302      	movs	r3, #2
  }
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b090      	sub	sp, #64	; 0x40
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d42:	e050      	b.n	8002de6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4a:	d04c      	beq.n	8002de6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d52:	f7fe f9bf 	bl	80010d4 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d241      	bcs.n	8002de6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	330c      	adds	r3, #12
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	330c      	adds	r3, #12
 8002d80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d82:	637a      	str	r2, [r7, #52]	; 0x34
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e5      	bne.n	8002d62 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3314      	adds	r3, #20
 8002d9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	e853 3f00 	ldrex	r3, [r3]
 8002da4:	613b      	str	r3, [r7, #16]
   return(result);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3314      	adds	r3, #20
 8002db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002db6:	623a      	str	r2, [r7, #32]
 8002db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	69f9      	ldr	r1, [r7, #28]
 8002dbc:	6a3a      	ldr	r2, [r7, #32]
 8002dbe:	e841 2300 	strex	r3, r2, [r1]
 8002dc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1e5      	bne.n	8002d96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e00f      	b.n	8002e06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4013      	ands	r3, r2
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	bf0c      	ite	eq
 8002df6:	2301      	moveq	r3, #1
 8002df8:	2300      	movne	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d09f      	beq.n	8002d44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3740      	adds	r7, #64	; 0x40
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e14:	b0c0      	sub	sp, #256	; 0x100
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2c:	68d9      	ldr	r1, [r3, #12]
 8002e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	ea40 0301 	orr.w	r3, r0, r1
 8002e38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e68:	f021 010c 	bic.w	r1, r1, #12
 8002e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e76:	430b      	orrs	r3, r1
 8002e78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8a:	6999      	ldr	r1, [r3, #24]
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	ea40 0301 	orr.w	r3, r0, r1
 8002e96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b8f      	ldr	r3, [pc, #572]	; (80030dc <UART_SetConfig+0x2cc>)
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d005      	beq.n	8002eb0 <UART_SetConfig+0xa0>
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4b8d      	ldr	r3, [pc, #564]	; (80030e0 <UART_SetConfig+0x2d0>)
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d104      	bne.n	8002eba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eb0:	f7fe fe54 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8002eb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002eb8:	e003      	b.n	8002ec2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eba:	f7fe fe3b 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8002ebe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ecc:	f040 810c 	bne.w	80030e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002eda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ede:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	462b      	mov	r3, r5
 8002ee6:	1891      	adds	r1, r2, r2
 8002ee8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002eea:	415b      	adcs	r3, r3
 8002eec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	eb12 0801 	adds.w	r8, r2, r1
 8002ef8:	4629      	mov	r1, r5
 8002efa:	eb43 0901 	adc.w	r9, r3, r1
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f12:	4690      	mov	r8, r2
 8002f14:	4699      	mov	r9, r3
 8002f16:	4623      	mov	r3, r4
 8002f18:	eb18 0303 	adds.w	r3, r8, r3
 8002f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f20:	462b      	mov	r3, r5
 8002f22:	eb49 0303 	adc.w	r3, r9, r3
 8002f26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f3e:	460b      	mov	r3, r1
 8002f40:	18db      	adds	r3, r3, r3
 8002f42:	653b      	str	r3, [r7, #80]	; 0x50
 8002f44:	4613      	mov	r3, r2
 8002f46:	eb42 0303 	adc.w	r3, r2, r3
 8002f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f54:	f7fd f9ac 	bl	80002b0 <__aeabi_uldivmod>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4b61      	ldr	r3, [pc, #388]	; (80030e4 <UART_SetConfig+0x2d4>)
 8002f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	011c      	lsls	r4, r3, #4
 8002f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f78:	4642      	mov	r2, r8
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	1891      	adds	r1, r2, r2
 8002f7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f80:	415b      	adcs	r3, r3
 8002f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f88:	4641      	mov	r1, r8
 8002f8a:	eb12 0a01 	adds.w	sl, r2, r1
 8002f8e:	4649      	mov	r1, r9
 8002f90:	eb43 0b01 	adc.w	fp, r3, r1
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fa8:	4692      	mov	sl, r2
 8002faa:	469b      	mov	fp, r3
 8002fac:	4643      	mov	r3, r8
 8002fae:	eb1a 0303 	adds.w	r3, sl, r3
 8002fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	eb4b 0303 	adc.w	r3, fp, r3
 8002fbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fcc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	18db      	adds	r3, r3, r3
 8002fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8002fda:	4613      	mov	r3, r2
 8002fdc:	eb42 0303 	adc.w	r3, r2, r3
 8002fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fe6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002fea:	f7fd f961 	bl	80002b0 <__aeabi_uldivmod>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4b3b      	ldr	r3, [pc, #236]	; (80030e4 <UART_SetConfig+0x2d4>)
 8002ff6:	fba3 2301 	umull	r2, r3, r3, r1
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2264      	movs	r2, #100	; 0x64
 8002ffe:	fb02 f303 	mul.w	r3, r2, r3
 8003002:	1acb      	subs	r3, r1, r3
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800300a:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <UART_SetConfig+0x2d4>)
 800300c:	fba3 2302 	umull	r2, r3, r3, r2
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003018:	441c      	add	r4, r3
 800301a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800301e:	2200      	movs	r2, #0
 8003020:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003024:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003028:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800302c:	4642      	mov	r2, r8
 800302e:	464b      	mov	r3, r9
 8003030:	1891      	adds	r1, r2, r2
 8003032:	63b9      	str	r1, [r7, #56]	; 0x38
 8003034:	415b      	adcs	r3, r3
 8003036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003038:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800303c:	4641      	mov	r1, r8
 800303e:	1851      	adds	r1, r2, r1
 8003040:	6339      	str	r1, [r7, #48]	; 0x30
 8003042:	4649      	mov	r1, r9
 8003044:	414b      	adcs	r3, r1
 8003046:	637b      	str	r3, [r7, #52]	; 0x34
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003054:	4659      	mov	r1, fp
 8003056:	00cb      	lsls	r3, r1, #3
 8003058:	4651      	mov	r1, sl
 800305a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800305e:	4651      	mov	r1, sl
 8003060:	00ca      	lsls	r2, r1, #3
 8003062:	4610      	mov	r0, r2
 8003064:	4619      	mov	r1, r3
 8003066:	4603      	mov	r3, r0
 8003068:	4642      	mov	r2, r8
 800306a:	189b      	adds	r3, r3, r2
 800306c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003070:	464b      	mov	r3, r9
 8003072:	460a      	mov	r2, r1
 8003074:	eb42 0303 	adc.w	r3, r2, r3
 8003078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003088:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800308c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003090:	460b      	mov	r3, r1
 8003092:	18db      	adds	r3, r3, r3
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
 8003096:	4613      	mov	r3, r2
 8003098:	eb42 0303 	adc.w	r3, r2, r3
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800309e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030a6:	f7fd f903 	bl	80002b0 <__aeabi_uldivmod>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <UART_SetConfig+0x2d4>)
 80030b0:	fba3 1302 	umull	r1, r3, r3, r2
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	2164      	movs	r1, #100	; 0x64
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	3332      	adds	r3, #50	; 0x32
 80030c2:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <UART_SetConfig+0x2d4>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	f003 0207 	and.w	r2, r3, #7
 80030ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4422      	add	r2, r4
 80030d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030d8:	e105      	b.n	80032e6 <UART_SetConfig+0x4d6>
 80030da:	bf00      	nop
 80030dc:	40011000 	.word	0x40011000
 80030e0:	40011400 	.word	0x40011400
 80030e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ec:	2200      	movs	r2, #0
 80030ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030fa:	4642      	mov	r2, r8
 80030fc:	464b      	mov	r3, r9
 80030fe:	1891      	adds	r1, r2, r2
 8003100:	6239      	str	r1, [r7, #32]
 8003102:	415b      	adcs	r3, r3
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800310a:	4641      	mov	r1, r8
 800310c:	1854      	adds	r4, r2, r1
 800310e:	4649      	mov	r1, r9
 8003110:	eb43 0501 	adc.w	r5, r3, r1
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	00eb      	lsls	r3, r5, #3
 800311e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003122:	00e2      	lsls	r2, r4, #3
 8003124:	4614      	mov	r4, r2
 8003126:	461d      	mov	r5, r3
 8003128:	4643      	mov	r3, r8
 800312a:	18e3      	adds	r3, r4, r3
 800312c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003130:	464b      	mov	r3, r9
 8003132:	eb45 0303 	adc.w	r3, r5, r3
 8003136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800313a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003146:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003156:	4629      	mov	r1, r5
 8003158:	008b      	lsls	r3, r1, #2
 800315a:	4621      	mov	r1, r4
 800315c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003160:	4621      	mov	r1, r4
 8003162:	008a      	lsls	r2, r1, #2
 8003164:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003168:	f7fd f8a2 	bl	80002b0 <__aeabi_uldivmod>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4b60      	ldr	r3, [pc, #384]	; (80032f4 <UART_SetConfig+0x4e4>)
 8003172:	fba3 2302 	umull	r2, r3, r3, r2
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	011c      	lsls	r4, r3, #4
 800317a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800317e:	2200      	movs	r2, #0
 8003180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003184:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003188:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800318c:	4642      	mov	r2, r8
 800318e:	464b      	mov	r3, r9
 8003190:	1891      	adds	r1, r2, r2
 8003192:	61b9      	str	r1, [r7, #24]
 8003194:	415b      	adcs	r3, r3
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800319c:	4641      	mov	r1, r8
 800319e:	1851      	adds	r1, r2, r1
 80031a0:	6139      	str	r1, [r7, #16]
 80031a2:	4649      	mov	r1, r9
 80031a4:	414b      	adcs	r3, r1
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b4:	4659      	mov	r1, fp
 80031b6:	00cb      	lsls	r3, r1, #3
 80031b8:	4651      	mov	r1, sl
 80031ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031be:	4651      	mov	r1, sl
 80031c0:	00ca      	lsls	r2, r1, #3
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	4642      	mov	r2, r8
 80031ca:	189b      	adds	r3, r3, r2
 80031cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031d0:	464b      	mov	r3, r9
 80031d2:	460a      	mov	r2, r1
 80031d4:	eb42 0303 	adc.w	r3, r2, r3
 80031d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80031e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031f4:	4649      	mov	r1, r9
 80031f6:	008b      	lsls	r3, r1, #2
 80031f8:	4641      	mov	r1, r8
 80031fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031fe:	4641      	mov	r1, r8
 8003200:	008a      	lsls	r2, r1, #2
 8003202:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003206:	f7fd f853 	bl	80002b0 <__aeabi_uldivmod>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <UART_SetConfig+0x4e4>)
 8003210:	fba3 1302 	umull	r1, r3, r3, r2
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	2164      	movs	r1, #100	; 0x64
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	3332      	adds	r3, #50	; 0x32
 8003222:	4a34      	ldr	r2, [pc, #208]	; (80032f4 <UART_SetConfig+0x4e4>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800322e:	441c      	add	r4, r3
 8003230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003234:	2200      	movs	r2, #0
 8003236:	673b      	str	r3, [r7, #112]	; 0x70
 8003238:	677a      	str	r2, [r7, #116]	; 0x74
 800323a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800323e:	4642      	mov	r2, r8
 8003240:	464b      	mov	r3, r9
 8003242:	1891      	adds	r1, r2, r2
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	415b      	adcs	r3, r3
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800324e:	4641      	mov	r1, r8
 8003250:	1851      	adds	r1, r2, r1
 8003252:	6039      	str	r1, [r7, #0]
 8003254:	4649      	mov	r1, r9
 8003256:	414b      	adcs	r3, r1
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003266:	4659      	mov	r1, fp
 8003268:	00cb      	lsls	r3, r1, #3
 800326a:	4651      	mov	r1, sl
 800326c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003270:	4651      	mov	r1, sl
 8003272:	00ca      	lsls	r2, r1, #3
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	4603      	mov	r3, r0
 800327a:	4642      	mov	r2, r8
 800327c:	189b      	adds	r3, r3, r2
 800327e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003280:	464b      	mov	r3, r9
 8003282:	460a      	mov	r2, r1
 8003284:	eb42 0303 	adc.w	r3, r2, r3
 8003288:	66fb      	str	r3, [r7, #108]	; 0x6c
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	663b      	str	r3, [r7, #96]	; 0x60
 8003294:	667a      	str	r2, [r7, #100]	; 0x64
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032a2:	4649      	mov	r1, r9
 80032a4:	008b      	lsls	r3, r1, #2
 80032a6:	4641      	mov	r1, r8
 80032a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ac:	4641      	mov	r1, r8
 80032ae:	008a      	lsls	r2, r1, #2
 80032b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032b4:	f7fc fffc 	bl	80002b0 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <UART_SetConfig+0x4e4>)
 80032be:	fba3 1302 	umull	r1, r3, r3, r2
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	2164      	movs	r1, #100	; 0x64
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	3332      	adds	r3, #50	; 0x32
 80032d0:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <UART_SetConfig+0x4e4>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	f003 020f 	and.w	r2, r3, #15
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4422      	add	r2, r4
 80032e4:	609a      	str	r2, [r3, #8]
}
 80032e6:	bf00      	nop
 80032e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80032ec:	46bd      	mov	sp, r7
 80032ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032f2:	bf00      	nop
 80032f4:	51eb851f 	.word	0x51eb851f

080032f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032f8:	b084      	sub	sp, #16
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	f107 001c 	add.w	r0, r7, #28
 8003306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	2b01      	cmp	r3, #1
 800330e:	d122      	bne.n	8003356 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800333a:	2b01      	cmp	r3, #1
 800333c:	d105      	bne.n	800334a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fa9c 	bl	8003888 <USB_CoreReset>
 8003350:	4603      	mov	r3, r0
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e01a      	b.n	800338c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fa90 	bl	8003888 <USB_CoreReset>
 8003368:	4603      	mov	r3, r0
 800336a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800336c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	639a      	str	r2, [r3, #56]	; 0x38
 800337e:	e005      	b.n	800338c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	2b01      	cmp	r3, #1
 8003390:	d10b      	bne.n	80033aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f043 0206 	orr.w	r2, r3, #6
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f043 0220 	orr.w	r2, r3, #32
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033b6:	b004      	add	sp, #16
 80033b8:	4770      	bx	lr

080033ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f023 0201 	bic.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d115      	bne.n	800342a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800340a:	2001      	movs	r0, #1
 800340c:	f7fd fe6e 	bl	80010ec <HAL_Delay>
      ms++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3301      	adds	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fa28 	bl	800386c <USB_GetMode>
 800341c:	4603      	mov	r3, r0
 800341e:	2b01      	cmp	r3, #1
 8003420:	d01e      	beq.n	8003460 <USB_SetCurrentMode+0x84>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b31      	cmp	r3, #49	; 0x31
 8003426:	d9f0      	bls.n	800340a <USB_SetCurrentMode+0x2e>
 8003428:	e01a      	b.n	8003460 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d115      	bne.n	800345c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800343c:	2001      	movs	r0, #1
 800343e:	f7fd fe55 	bl	80010ec <HAL_Delay>
      ms++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3301      	adds	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fa0f 	bl	800386c <USB_GetMode>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <USB_SetCurrentMode+0x84>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b31      	cmp	r3, #49	; 0x31
 8003458:	d9f0      	bls.n	800343c <USB_SetCurrentMode+0x60>
 800345a:	e001      	b.n	8003460 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e005      	b.n	800346c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b32      	cmp	r3, #50	; 0x32
 8003464:	d101      	bne.n	800346a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003474:	b084      	sub	sp, #16
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	e009      	b.n	80034a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	3340      	adds	r3, #64	; 0x40
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	2200      	movs	r2, #0
 80034a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	3301      	adds	r3, #1
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	2b0e      	cmp	r3, #14
 80034ac:	d9f2      	bls.n	8003494 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80034ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d11c      	bne.n	80034ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c2:	f043 0302 	orr.w	r3, r3, #2
 80034c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e005      	b.n	80034fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003500:	461a      	mov	r2, r3
 8003502:	2300      	movs	r3, #0
 8003504:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350c:	4619      	mov	r1, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003514:	461a      	mov	r2, r3
 8003516:	680b      	ldr	r3, [r1, #0]
 8003518:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800351a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351c:	2b01      	cmp	r3, #1
 800351e:	d10c      	bne.n	800353a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d104      	bne.n	8003530 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003526:	2100      	movs	r1, #0
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f965 	bl	80037f8 <USB_SetDevSpeed>
 800352e:	e008      	b.n	8003542 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003530:	2101      	movs	r1, #1
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f960 	bl	80037f8 <USB_SetDevSpeed>
 8003538:	e003      	b.n	8003542 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800353a:	2103      	movs	r1, #3
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f95b 	bl	80037f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003542:	2110      	movs	r1, #16
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f8f3 	bl	8003730 <USB_FlushTxFifo>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f91f 	bl	8003798 <USB_FlushRxFifo>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356a:	461a      	mov	r2, r3
 800356c:	2300      	movs	r3, #0
 800356e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003576:	461a      	mov	r2, r3
 8003578:	2300      	movs	r3, #0
 800357a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003582:	461a      	mov	r2, r3
 8003584:	2300      	movs	r3, #0
 8003586:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003588:	2300      	movs	r3, #0
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	e043      	b.n	8003616 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4413      	add	r3, r2
 8003596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035a4:	d118      	bne.n	80035d8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b8:	461a      	mov	r2, r3
 80035ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	e013      	b.n	80035ea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ce:	461a      	mov	r2, r3
 80035d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e008      	b.n	80035ea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e4:	461a      	mov	r2, r3
 80035e6:	2300      	movs	r3, #0
 80035e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f6:	461a      	mov	r2, r3
 80035f8:	2300      	movs	r3, #0
 80035fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003608:	461a      	mov	r2, r3
 800360a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800360e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	3301      	adds	r3, #1
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	429a      	cmp	r2, r3
 800361c:	d3b7      	bcc.n	800358e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800361e:	2300      	movs	r3, #0
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	e043      	b.n	80036ac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800363a:	d118      	bne.n	800366e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364e:	461a      	mov	r2, r3
 8003650:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e013      	b.n	8003680 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003664:	461a      	mov	r2, r3
 8003666:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	e008      	b.n	8003680 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800367a:	461a      	mov	r2, r3
 800367c:	2300      	movs	r3, #0
 800367e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4413      	add	r3, r2
 8003688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368c:	461a      	mov	r2, r3
 800368e:	2300      	movs	r3, #0
 8003690:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4413      	add	r3, r2
 800369a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800369e:	461a      	mov	r2, r3
 80036a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	3301      	adds	r3, #1
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d3b7      	bcc.n	8003624 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80036d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	f043 0210 	orr.w	r2, r3, #16
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699a      	ldr	r2, [r3, #24]
 80036ec:	4b0f      	ldr	r3, [pc, #60]	; (800372c <USB_DevInit+0x2b8>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80036f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f043 0208 	orr.w	r2, r3, #8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d107      	bne.n	800371c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003714:	f043 0304 	orr.w	r3, r3, #4
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800371c:	7dfb      	ldrb	r3, [r7, #23]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003728:	b004      	add	sp, #16
 800372a:	4770      	bx	lr
 800372c:	803c3800 	.word	0x803c3800

08003730 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3301      	adds	r3, #1
 8003742:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a13      	ldr	r2, [pc, #76]	; (8003794 <USB_FlushTxFifo+0x64>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e01b      	b.n	8003788 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	daf2      	bge.n	800373e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	019b      	lsls	r3, r3, #6
 8003760:	f043 0220 	orr.w	r2, r3, #32
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	3301      	adds	r3, #1
 800376c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4a08      	ldr	r2, [pc, #32]	; (8003794 <USB_FlushTxFifo+0x64>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e006      	b.n	8003788 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b20      	cmp	r3, #32
 8003784:	d0f0      	beq.n	8003768 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	00030d40 	.word	0x00030d40

08003798 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3301      	adds	r3, #1
 80037a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a11      	ldr	r2, [pc, #68]	; (80037f4 <USB_FlushRxFifo+0x5c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e018      	b.n	80037e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	daf2      	bge.n	80037a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2210      	movs	r2, #16
 80037c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	3301      	adds	r3, #1
 80037cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a08      	ldr	r2, [pc, #32]	; (80037f4 <USB_FlushRxFifo+0x5c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e006      	b.n	80037e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	2b10      	cmp	r3, #16
 80037e4:	d0f0      	beq.n	80037c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	00030d40 	.word	0x00030d40

080037f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	68f9      	ldr	r1, [r7, #12]
 8003814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800382a:	b480      	push	{r7}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003844:	f023 0303 	bic.w	r3, r3, #3
 8003848:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003858:	f043 0302 	orr.w	r3, r3, #2
 800385c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f003 0301 	and.w	r3, r3, #1
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3301      	adds	r3, #1
 8003898:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4a13      	ldr	r2, [pc, #76]	; (80038ec <USB_CoreReset+0x64>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e01b      	b.n	80038de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	daf2      	bge.n	8003894 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f043 0201 	orr.w	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	3301      	adds	r3, #1
 80038c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4a09      	ldr	r2, [pc, #36]	; (80038ec <USB_CoreReset+0x64>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e006      	b.n	80038de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d0f0      	beq.n	80038be <USB_CoreReset+0x36>

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	00030d40 	.word	0x00030d40

080038f0 <__assert_func>:
 80038f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80038f2:	4614      	mov	r4, r2
 80038f4:	461a      	mov	r2, r3
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <__assert_func+0x2c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4605      	mov	r5, r0
 80038fc:	68d8      	ldr	r0, [r3, #12]
 80038fe:	b14c      	cbz	r4, 8003914 <__assert_func+0x24>
 8003900:	4b07      	ldr	r3, [pc, #28]	; (8003920 <__assert_func+0x30>)
 8003902:	9100      	str	r1, [sp, #0]
 8003904:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003908:	4906      	ldr	r1, [pc, #24]	; (8003924 <__assert_func+0x34>)
 800390a:	462b      	mov	r3, r5
 800390c:	f000 f814 	bl	8003938 <fiprintf>
 8003910:	f000 fbfe 	bl	8004110 <abort>
 8003914:	4b04      	ldr	r3, [pc, #16]	; (8003928 <__assert_func+0x38>)
 8003916:	461c      	mov	r4, r3
 8003918:	e7f3      	b.n	8003902 <__assert_func+0x12>
 800391a:	bf00      	nop
 800391c:	20000014 	.word	0x20000014
 8003920:	08004ab6 	.word	0x08004ab6
 8003924:	08004ac3 	.word	0x08004ac3
 8003928:	08004af1 	.word	0x08004af1

0800392c <__errno>:
 800392c:	4b01      	ldr	r3, [pc, #4]	; (8003934 <__errno+0x8>)
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000014 	.word	0x20000014

08003938 <fiprintf>:
 8003938:	b40e      	push	{r1, r2, r3}
 800393a:	b503      	push	{r0, r1, lr}
 800393c:	4601      	mov	r1, r0
 800393e:	ab03      	add	r3, sp, #12
 8003940:	4805      	ldr	r0, [pc, #20]	; (8003958 <fiprintf+0x20>)
 8003942:	f853 2b04 	ldr.w	r2, [r3], #4
 8003946:	6800      	ldr	r0, [r0, #0]
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	f000 f85d 	bl	8003a08 <_vfiprintf_r>
 800394e:	b002      	add	sp, #8
 8003950:	f85d eb04 	ldr.w	lr, [sp], #4
 8003954:	b003      	add	sp, #12
 8003956:	4770      	bx	lr
 8003958:	20000014 	.word	0x20000014

0800395c <__libc_init_array>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	4d0d      	ldr	r5, [pc, #52]	; (8003994 <__libc_init_array+0x38>)
 8003960:	4c0d      	ldr	r4, [pc, #52]	; (8003998 <__libc_init_array+0x3c>)
 8003962:	1b64      	subs	r4, r4, r5
 8003964:	10a4      	asrs	r4, r4, #2
 8003966:	2600      	movs	r6, #0
 8003968:	42a6      	cmp	r6, r4
 800396a:	d109      	bne.n	8003980 <__libc_init_array+0x24>
 800396c:	4d0b      	ldr	r5, [pc, #44]	; (800399c <__libc_init_array+0x40>)
 800396e:	4c0c      	ldr	r4, [pc, #48]	; (80039a0 <__libc_init_array+0x44>)
 8003970:	f000 ffe2 	bl	8004938 <_init>
 8003974:	1b64      	subs	r4, r4, r5
 8003976:	10a4      	asrs	r4, r4, #2
 8003978:	2600      	movs	r6, #0
 800397a:	42a6      	cmp	r6, r4
 800397c:	d105      	bne.n	800398a <__libc_init_array+0x2e>
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	f855 3b04 	ldr.w	r3, [r5], #4
 8003984:	4798      	blx	r3
 8003986:	3601      	adds	r6, #1
 8003988:	e7ee      	b.n	8003968 <__libc_init_array+0xc>
 800398a:	f855 3b04 	ldr.w	r3, [r5], #4
 800398e:	4798      	blx	r3
 8003990:	3601      	adds	r6, #1
 8003992:	e7f2      	b.n	800397a <__libc_init_array+0x1e>
 8003994:	08004b94 	.word	0x08004b94
 8003998:	08004b94 	.word	0x08004b94
 800399c:	08004b94 	.word	0x08004b94
 80039a0:	08004b98 	.word	0x08004b98

080039a4 <memset>:
 80039a4:	4402      	add	r2, r0
 80039a6:	4603      	mov	r3, r0
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d100      	bne.n	80039ae <memset+0xa>
 80039ac:	4770      	bx	lr
 80039ae:	f803 1b01 	strb.w	r1, [r3], #1
 80039b2:	e7f9      	b.n	80039a8 <memset+0x4>

080039b4 <__sfputc_r>:
 80039b4:	6893      	ldr	r3, [r2, #8]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	b410      	push	{r4}
 80039bc:	6093      	str	r3, [r2, #8]
 80039be:	da08      	bge.n	80039d2 <__sfputc_r+0x1e>
 80039c0:	6994      	ldr	r4, [r2, #24]
 80039c2:	42a3      	cmp	r3, r4
 80039c4:	db01      	blt.n	80039ca <__sfputc_r+0x16>
 80039c6:	290a      	cmp	r1, #10
 80039c8:	d103      	bne.n	80039d2 <__sfputc_r+0x1e>
 80039ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039ce:	f000 badf 	b.w	8003f90 <__swbuf_r>
 80039d2:	6813      	ldr	r3, [r2, #0]
 80039d4:	1c58      	adds	r0, r3, #1
 80039d6:	6010      	str	r0, [r2, #0]
 80039d8:	7019      	strb	r1, [r3, #0]
 80039da:	4608      	mov	r0, r1
 80039dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <__sfputs_r>:
 80039e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e4:	4606      	mov	r6, r0
 80039e6:	460f      	mov	r7, r1
 80039e8:	4614      	mov	r4, r2
 80039ea:	18d5      	adds	r5, r2, r3
 80039ec:	42ac      	cmp	r4, r5
 80039ee:	d101      	bne.n	80039f4 <__sfputs_r+0x12>
 80039f0:	2000      	movs	r0, #0
 80039f2:	e007      	b.n	8003a04 <__sfputs_r+0x22>
 80039f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039f8:	463a      	mov	r2, r7
 80039fa:	4630      	mov	r0, r6
 80039fc:	f7ff ffda 	bl	80039b4 <__sfputc_r>
 8003a00:	1c43      	adds	r3, r0, #1
 8003a02:	d1f3      	bne.n	80039ec <__sfputs_r+0xa>
 8003a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a08 <_vfiprintf_r>:
 8003a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a0c:	460d      	mov	r5, r1
 8003a0e:	b09d      	sub	sp, #116	; 0x74
 8003a10:	4614      	mov	r4, r2
 8003a12:	4698      	mov	r8, r3
 8003a14:	4606      	mov	r6, r0
 8003a16:	b118      	cbz	r0, 8003a20 <_vfiprintf_r+0x18>
 8003a18:	6983      	ldr	r3, [r0, #24]
 8003a1a:	b90b      	cbnz	r3, 8003a20 <_vfiprintf_r+0x18>
 8003a1c:	f000 fc9a 	bl	8004354 <__sinit>
 8003a20:	4b89      	ldr	r3, [pc, #548]	; (8003c48 <_vfiprintf_r+0x240>)
 8003a22:	429d      	cmp	r5, r3
 8003a24:	d11b      	bne.n	8003a5e <_vfiprintf_r+0x56>
 8003a26:	6875      	ldr	r5, [r6, #4]
 8003a28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a2a:	07d9      	lsls	r1, r3, #31
 8003a2c:	d405      	bmi.n	8003a3a <_vfiprintf_r+0x32>
 8003a2e:	89ab      	ldrh	r3, [r5, #12]
 8003a30:	059a      	lsls	r2, r3, #22
 8003a32:	d402      	bmi.n	8003a3a <_vfiprintf_r+0x32>
 8003a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a36:	f000 fd2b 	bl	8004490 <__retarget_lock_acquire_recursive>
 8003a3a:	89ab      	ldrh	r3, [r5, #12]
 8003a3c:	071b      	lsls	r3, r3, #28
 8003a3e:	d501      	bpl.n	8003a44 <_vfiprintf_r+0x3c>
 8003a40:	692b      	ldr	r3, [r5, #16]
 8003a42:	b9eb      	cbnz	r3, 8003a80 <_vfiprintf_r+0x78>
 8003a44:	4629      	mov	r1, r5
 8003a46:	4630      	mov	r0, r6
 8003a48:	f000 faf4 	bl	8004034 <__swsetup_r>
 8003a4c:	b1c0      	cbz	r0, 8003a80 <_vfiprintf_r+0x78>
 8003a4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a50:	07dc      	lsls	r4, r3, #31
 8003a52:	d50e      	bpl.n	8003a72 <_vfiprintf_r+0x6a>
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	b01d      	add	sp, #116	; 0x74
 8003a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a5e:	4b7b      	ldr	r3, [pc, #492]	; (8003c4c <_vfiprintf_r+0x244>)
 8003a60:	429d      	cmp	r5, r3
 8003a62:	d101      	bne.n	8003a68 <_vfiprintf_r+0x60>
 8003a64:	68b5      	ldr	r5, [r6, #8]
 8003a66:	e7df      	b.n	8003a28 <_vfiprintf_r+0x20>
 8003a68:	4b79      	ldr	r3, [pc, #484]	; (8003c50 <_vfiprintf_r+0x248>)
 8003a6a:	429d      	cmp	r5, r3
 8003a6c:	bf08      	it	eq
 8003a6e:	68f5      	ldreq	r5, [r6, #12]
 8003a70:	e7da      	b.n	8003a28 <_vfiprintf_r+0x20>
 8003a72:	89ab      	ldrh	r3, [r5, #12]
 8003a74:	0598      	lsls	r0, r3, #22
 8003a76:	d4ed      	bmi.n	8003a54 <_vfiprintf_r+0x4c>
 8003a78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a7a:	f000 fd0a 	bl	8004492 <__retarget_lock_release_recursive>
 8003a7e:	e7e9      	b.n	8003a54 <_vfiprintf_r+0x4c>
 8003a80:	2300      	movs	r3, #0
 8003a82:	9309      	str	r3, [sp, #36]	; 0x24
 8003a84:	2320      	movs	r3, #32
 8003a86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a8e:	2330      	movs	r3, #48	; 0x30
 8003a90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003c54 <_vfiprintf_r+0x24c>
 8003a94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a98:	f04f 0901 	mov.w	r9, #1
 8003a9c:	4623      	mov	r3, r4
 8003a9e:	469a      	mov	sl, r3
 8003aa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aa4:	b10a      	cbz	r2, 8003aaa <_vfiprintf_r+0xa2>
 8003aa6:	2a25      	cmp	r2, #37	; 0x25
 8003aa8:	d1f9      	bne.n	8003a9e <_vfiprintf_r+0x96>
 8003aaa:	ebba 0b04 	subs.w	fp, sl, r4
 8003aae:	d00b      	beq.n	8003ac8 <_vfiprintf_r+0xc0>
 8003ab0:	465b      	mov	r3, fp
 8003ab2:	4622      	mov	r2, r4
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f7ff ff93 	bl	80039e2 <__sfputs_r>
 8003abc:	3001      	adds	r0, #1
 8003abe:	f000 80aa 	beq.w	8003c16 <_vfiprintf_r+0x20e>
 8003ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ac4:	445a      	add	r2, fp
 8003ac6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80a2 	beq.w	8003c16 <_vfiprintf_r+0x20e>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003adc:	f10a 0a01 	add.w	sl, sl, #1
 8003ae0:	9304      	str	r3, [sp, #16]
 8003ae2:	9307      	str	r3, [sp, #28]
 8003ae4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ae8:	931a      	str	r3, [sp, #104]	; 0x68
 8003aea:	4654      	mov	r4, sl
 8003aec:	2205      	movs	r2, #5
 8003aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af2:	4858      	ldr	r0, [pc, #352]	; (8003c54 <_vfiprintf_r+0x24c>)
 8003af4:	f7fc fb8c 	bl	8000210 <memchr>
 8003af8:	9a04      	ldr	r2, [sp, #16]
 8003afa:	b9d8      	cbnz	r0, 8003b34 <_vfiprintf_r+0x12c>
 8003afc:	06d1      	lsls	r1, r2, #27
 8003afe:	bf44      	itt	mi
 8003b00:	2320      	movmi	r3, #32
 8003b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b06:	0713      	lsls	r3, r2, #28
 8003b08:	bf44      	itt	mi
 8003b0a:	232b      	movmi	r3, #43	; 0x2b
 8003b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b10:	f89a 3000 	ldrb.w	r3, [sl]
 8003b14:	2b2a      	cmp	r3, #42	; 0x2a
 8003b16:	d015      	beq.n	8003b44 <_vfiprintf_r+0x13c>
 8003b18:	9a07      	ldr	r2, [sp, #28]
 8003b1a:	4654      	mov	r4, sl
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	f04f 0c0a 	mov.w	ip, #10
 8003b22:	4621      	mov	r1, r4
 8003b24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b28:	3b30      	subs	r3, #48	; 0x30
 8003b2a:	2b09      	cmp	r3, #9
 8003b2c:	d94e      	bls.n	8003bcc <_vfiprintf_r+0x1c4>
 8003b2e:	b1b0      	cbz	r0, 8003b5e <_vfiprintf_r+0x156>
 8003b30:	9207      	str	r2, [sp, #28]
 8003b32:	e014      	b.n	8003b5e <_vfiprintf_r+0x156>
 8003b34:	eba0 0308 	sub.w	r3, r0, r8
 8003b38:	fa09 f303 	lsl.w	r3, r9, r3
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	9304      	str	r3, [sp, #16]
 8003b40:	46a2      	mov	sl, r4
 8003b42:	e7d2      	b.n	8003aea <_vfiprintf_r+0xe2>
 8003b44:	9b03      	ldr	r3, [sp, #12]
 8003b46:	1d19      	adds	r1, r3, #4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	9103      	str	r1, [sp, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	bfbb      	ittet	lt
 8003b50:	425b      	neglt	r3, r3
 8003b52:	f042 0202 	orrlt.w	r2, r2, #2
 8003b56:	9307      	strge	r3, [sp, #28]
 8003b58:	9307      	strlt	r3, [sp, #28]
 8003b5a:	bfb8      	it	lt
 8003b5c:	9204      	strlt	r2, [sp, #16]
 8003b5e:	7823      	ldrb	r3, [r4, #0]
 8003b60:	2b2e      	cmp	r3, #46	; 0x2e
 8003b62:	d10c      	bne.n	8003b7e <_vfiprintf_r+0x176>
 8003b64:	7863      	ldrb	r3, [r4, #1]
 8003b66:	2b2a      	cmp	r3, #42	; 0x2a
 8003b68:	d135      	bne.n	8003bd6 <_vfiprintf_r+0x1ce>
 8003b6a:	9b03      	ldr	r3, [sp, #12]
 8003b6c:	1d1a      	adds	r2, r3, #4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	9203      	str	r2, [sp, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	bfb8      	it	lt
 8003b76:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b7a:	3402      	adds	r4, #2
 8003b7c:	9305      	str	r3, [sp, #20]
 8003b7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003c64 <_vfiprintf_r+0x25c>
 8003b82:	7821      	ldrb	r1, [r4, #0]
 8003b84:	2203      	movs	r2, #3
 8003b86:	4650      	mov	r0, sl
 8003b88:	f7fc fb42 	bl	8000210 <memchr>
 8003b8c:	b140      	cbz	r0, 8003ba0 <_vfiprintf_r+0x198>
 8003b8e:	2340      	movs	r3, #64	; 0x40
 8003b90:	eba0 000a 	sub.w	r0, r0, sl
 8003b94:	fa03 f000 	lsl.w	r0, r3, r0
 8003b98:	9b04      	ldr	r3, [sp, #16]
 8003b9a:	4303      	orrs	r3, r0
 8003b9c:	3401      	adds	r4, #1
 8003b9e:	9304      	str	r3, [sp, #16]
 8003ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ba4:	482c      	ldr	r0, [pc, #176]	; (8003c58 <_vfiprintf_r+0x250>)
 8003ba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003baa:	2206      	movs	r2, #6
 8003bac:	f7fc fb30 	bl	8000210 <memchr>
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d03f      	beq.n	8003c34 <_vfiprintf_r+0x22c>
 8003bb4:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <_vfiprintf_r+0x254>)
 8003bb6:	bb1b      	cbnz	r3, 8003c00 <_vfiprintf_r+0x1f8>
 8003bb8:	9b03      	ldr	r3, [sp, #12]
 8003bba:	3307      	adds	r3, #7
 8003bbc:	f023 0307 	bic.w	r3, r3, #7
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	9303      	str	r3, [sp, #12]
 8003bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bc6:	443b      	add	r3, r7
 8003bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8003bca:	e767      	b.n	8003a9c <_vfiprintf_r+0x94>
 8003bcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bd0:	460c      	mov	r4, r1
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	e7a5      	b.n	8003b22 <_vfiprintf_r+0x11a>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	3401      	adds	r4, #1
 8003bda:	9305      	str	r3, [sp, #20]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f04f 0c0a 	mov.w	ip, #10
 8003be2:	4620      	mov	r0, r4
 8003be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003be8:	3a30      	subs	r2, #48	; 0x30
 8003bea:	2a09      	cmp	r2, #9
 8003bec:	d903      	bls.n	8003bf6 <_vfiprintf_r+0x1ee>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0c5      	beq.n	8003b7e <_vfiprintf_r+0x176>
 8003bf2:	9105      	str	r1, [sp, #20]
 8003bf4:	e7c3      	b.n	8003b7e <_vfiprintf_r+0x176>
 8003bf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e7f0      	b.n	8003be2 <_vfiprintf_r+0x1da>
 8003c00:	ab03      	add	r3, sp, #12
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	462a      	mov	r2, r5
 8003c06:	4b16      	ldr	r3, [pc, #88]	; (8003c60 <_vfiprintf_r+0x258>)
 8003c08:	a904      	add	r1, sp, #16
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f3af 8000 	nop.w
 8003c10:	4607      	mov	r7, r0
 8003c12:	1c78      	adds	r0, r7, #1
 8003c14:	d1d6      	bne.n	8003bc4 <_vfiprintf_r+0x1bc>
 8003c16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c18:	07d9      	lsls	r1, r3, #31
 8003c1a:	d405      	bmi.n	8003c28 <_vfiprintf_r+0x220>
 8003c1c:	89ab      	ldrh	r3, [r5, #12]
 8003c1e:	059a      	lsls	r2, r3, #22
 8003c20:	d402      	bmi.n	8003c28 <_vfiprintf_r+0x220>
 8003c22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c24:	f000 fc35 	bl	8004492 <__retarget_lock_release_recursive>
 8003c28:	89ab      	ldrh	r3, [r5, #12]
 8003c2a:	065b      	lsls	r3, r3, #25
 8003c2c:	f53f af12 	bmi.w	8003a54 <_vfiprintf_r+0x4c>
 8003c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c32:	e711      	b.n	8003a58 <_vfiprintf_r+0x50>
 8003c34:	ab03      	add	r3, sp, #12
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	462a      	mov	r2, r5
 8003c3a:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <_vfiprintf_r+0x258>)
 8003c3c:	a904      	add	r1, sp, #16
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f000 f880 	bl	8003d44 <_printf_i>
 8003c44:	e7e4      	b.n	8003c10 <_vfiprintf_r+0x208>
 8003c46:	bf00      	nop
 8003c48:	08004b4c 	.word	0x08004b4c
 8003c4c:	08004b6c 	.word	0x08004b6c
 8003c50:	08004b2c 	.word	0x08004b2c
 8003c54:	08004af8 	.word	0x08004af8
 8003c58:	08004b02 	.word	0x08004b02
 8003c5c:	00000000 	.word	0x00000000
 8003c60:	080039e3 	.word	0x080039e3
 8003c64:	08004afe 	.word	0x08004afe

08003c68 <_printf_common>:
 8003c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c6c:	4616      	mov	r6, r2
 8003c6e:	4699      	mov	r9, r3
 8003c70:	688a      	ldr	r2, [r1, #8]
 8003c72:	690b      	ldr	r3, [r1, #16]
 8003c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bfb8      	it	lt
 8003c7c:	4613      	movlt	r3, r2
 8003c7e:	6033      	str	r3, [r6, #0]
 8003c80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c84:	4607      	mov	r7, r0
 8003c86:	460c      	mov	r4, r1
 8003c88:	b10a      	cbz	r2, 8003c8e <_printf_common+0x26>
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	6033      	str	r3, [r6, #0]
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	0699      	lsls	r1, r3, #26
 8003c92:	bf42      	ittt	mi
 8003c94:	6833      	ldrmi	r3, [r6, #0]
 8003c96:	3302      	addmi	r3, #2
 8003c98:	6033      	strmi	r3, [r6, #0]
 8003c9a:	6825      	ldr	r5, [r4, #0]
 8003c9c:	f015 0506 	ands.w	r5, r5, #6
 8003ca0:	d106      	bne.n	8003cb0 <_printf_common+0x48>
 8003ca2:	f104 0a19 	add.w	sl, r4, #25
 8003ca6:	68e3      	ldr	r3, [r4, #12]
 8003ca8:	6832      	ldr	r2, [r6, #0]
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	42ab      	cmp	r3, r5
 8003cae:	dc26      	bgt.n	8003cfe <_printf_common+0x96>
 8003cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cb4:	1e13      	subs	r3, r2, #0
 8003cb6:	6822      	ldr	r2, [r4, #0]
 8003cb8:	bf18      	it	ne
 8003cba:	2301      	movne	r3, #1
 8003cbc:	0692      	lsls	r2, r2, #26
 8003cbe:	d42b      	bmi.n	8003d18 <_printf_common+0xb0>
 8003cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cc4:	4649      	mov	r1, r9
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	47c0      	blx	r8
 8003cca:	3001      	adds	r0, #1
 8003ccc:	d01e      	beq.n	8003d0c <_printf_common+0xa4>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	68e5      	ldr	r5, [r4, #12]
 8003cd2:	6832      	ldr	r2, [r6, #0]
 8003cd4:	f003 0306 	and.w	r3, r3, #6
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	bf08      	it	eq
 8003cdc:	1aad      	subeq	r5, r5, r2
 8003cde:	68a3      	ldr	r3, [r4, #8]
 8003ce0:	6922      	ldr	r2, [r4, #16]
 8003ce2:	bf0c      	ite	eq
 8003ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ce8:	2500      	movne	r5, #0
 8003cea:	4293      	cmp	r3, r2
 8003cec:	bfc4      	itt	gt
 8003cee:	1a9b      	subgt	r3, r3, r2
 8003cf0:	18ed      	addgt	r5, r5, r3
 8003cf2:	2600      	movs	r6, #0
 8003cf4:	341a      	adds	r4, #26
 8003cf6:	42b5      	cmp	r5, r6
 8003cf8:	d11a      	bne.n	8003d30 <_printf_common+0xc8>
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	e008      	b.n	8003d10 <_printf_common+0xa8>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	4652      	mov	r2, sl
 8003d02:	4649      	mov	r1, r9
 8003d04:	4638      	mov	r0, r7
 8003d06:	47c0      	blx	r8
 8003d08:	3001      	adds	r0, #1
 8003d0a:	d103      	bne.n	8003d14 <_printf_common+0xac>
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d14:	3501      	adds	r5, #1
 8003d16:	e7c6      	b.n	8003ca6 <_printf_common+0x3e>
 8003d18:	18e1      	adds	r1, r4, r3
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	2030      	movs	r0, #48	; 0x30
 8003d1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d22:	4422      	add	r2, r4
 8003d24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	e7c7      	b.n	8003cc0 <_printf_common+0x58>
 8003d30:	2301      	movs	r3, #1
 8003d32:	4622      	mov	r2, r4
 8003d34:	4649      	mov	r1, r9
 8003d36:	4638      	mov	r0, r7
 8003d38:	47c0      	blx	r8
 8003d3a:	3001      	adds	r0, #1
 8003d3c:	d0e6      	beq.n	8003d0c <_printf_common+0xa4>
 8003d3e:	3601      	adds	r6, #1
 8003d40:	e7d9      	b.n	8003cf6 <_printf_common+0x8e>
	...

08003d44 <_printf_i>:
 8003d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d48:	7e0f      	ldrb	r7, [r1, #24]
 8003d4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d4c:	2f78      	cmp	r7, #120	; 0x78
 8003d4e:	4691      	mov	r9, r2
 8003d50:	4680      	mov	r8, r0
 8003d52:	460c      	mov	r4, r1
 8003d54:	469a      	mov	sl, r3
 8003d56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d5a:	d807      	bhi.n	8003d6c <_printf_i+0x28>
 8003d5c:	2f62      	cmp	r7, #98	; 0x62
 8003d5e:	d80a      	bhi.n	8003d76 <_printf_i+0x32>
 8003d60:	2f00      	cmp	r7, #0
 8003d62:	f000 80d8 	beq.w	8003f16 <_printf_i+0x1d2>
 8003d66:	2f58      	cmp	r7, #88	; 0x58
 8003d68:	f000 80a3 	beq.w	8003eb2 <_printf_i+0x16e>
 8003d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d74:	e03a      	b.n	8003dec <_printf_i+0xa8>
 8003d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d7a:	2b15      	cmp	r3, #21
 8003d7c:	d8f6      	bhi.n	8003d6c <_printf_i+0x28>
 8003d7e:	a101      	add	r1, pc, #4	; (adr r1, 8003d84 <_printf_i+0x40>)
 8003d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d84:	08003ddd 	.word	0x08003ddd
 8003d88:	08003df1 	.word	0x08003df1
 8003d8c:	08003d6d 	.word	0x08003d6d
 8003d90:	08003d6d 	.word	0x08003d6d
 8003d94:	08003d6d 	.word	0x08003d6d
 8003d98:	08003d6d 	.word	0x08003d6d
 8003d9c:	08003df1 	.word	0x08003df1
 8003da0:	08003d6d 	.word	0x08003d6d
 8003da4:	08003d6d 	.word	0x08003d6d
 8003da8:	08003d6d 	.word	0x08003d6d
 8003dac:	08003d6d 	.word	0x08003d6d
 8003db0:	08003efd 	.word	0x08003efd
 8003db4:	08003e21 	.word	0x08003e21
 8003db8:	08003edf 	.word	0x08003edf
 8003dbc:	08003d6d 	.word	0x08003d6d
 8003dc0:	08003d6d 	.word	0x08003d6d
 8003dc4:	08003f1f 	.word	0x08003f1f
 8003dc8:	08003d6d 	.word	0x08003d6d
 8003dcc:	08003e21 	.word	0x08003e21
 8003dd0:	08003d6d 	.word	0x08003d6d
 8003dd4:	08003d6d 	.word	0x08003d6d
 8003dd8:	08003ee7 	.word	0x08003ee7
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	1d1a      	adds	r2, r3, #4
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	602a      	str	r2, [r5, #0]
 8003de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0a3      	b.n	8003f38 <_printf_i+0x1f4>
 8003df0:	6820      	ldr	r0, [r4, #0]
 8003df2:	6829      	ldr	r1, [r5, #0]
 8003df4:	0606      	lsls	r6, r0, #24
 8003df6:	f101 0304 	add.w	r3, r1, #4
 8003dfa:	d50a      	bpl.n	8003e12 <_printf_i+0xce>
 8003dfc:	680e      	ldr	r6, [r1, #0]
 8003dfe:	602b      	str	r3, [r5, #0]
 8003e00:	2e00      	cmp	r6, #0
 8003e02:	da03      	bge.n	8003e0c <_printf_i+0xc8>
 8003e04:	232d      	movs	r3, #45	; 0x2d
 8003e06:	4276      	negs	r6, r6
 8003e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e0c:	485e      	ldr	r0, [pc, #376]	; (8003f88 <_printf_i+0x244>)
 8003e0e:	230a      	movs	r3, #10
 8003e10:	e019      	b.n	8003e46 <_printf_i+0x102>
 8003e12:	680e      	ldr	r6, [r1, #0]
 8003e14:	602b      	str	r3, [r5, #0]
 8003e16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e1a:	bf18      	it	ne
 8003e1c:	b236      	sxthne	r6, r6
 8003e1e:	e7ef      	b.n	8003e00 <_printf_i+0xbc>
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	6820      	ldr	r0, [r4, #0]
 8003e24:	1d19      	adds	r1, r3, #4
 8003e26:	6029      	str	r1, [r5, #0]
 8003e28:	0601      	lsls	r1, r0, #24
 8003e2a:	d501      	bpl.n	8003e30 <_printf_i+0xec>
 8003e2c:	681e      	ldr	r6, [r3, #0]
 8003e2e:	e002      	b.n	8003e36 <_printf_i+0xf2>
 8003e30:	0646      	lsls	r6, r0, #25
 8003e32:	d5fb      	bpl.n	8003e2c <_printf_i+0xe8>
 8003e34:	881e      	ldrh	r6, [r3, #0]
 8003e36:	4854      	ldr	r0, [pc, #336]	; (8003f88 <_printf_i+0x244>)
 8003e38:	2f6f      	cmp	r7, #111	; 0x6f
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2308      	moveq	r3, #8
 8003e3e:	230a      	movne	r3, #10
 8003e40:	2100      	movs	r1, #0
 8003e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e46:	6865      	ldr	r5, [r4, #4]
 8003e48:	60a5      	str	r5, [r4, #8]
 8003e4a:	2d00      	cmp	r5, #0
 8003e4c:	bfa2      	ittt	ge
 8003e4e:	6821      	ldrge	r1, [r4, #0]
 8003e50:	f021 0104 	bicge.w	r1, r1, #4
 8003e54:	6021      	strge	r1, [r4, #0]
 8003e56:	b90e      	cbnz	r6, 8003e5c <_printf_i+0x118>
 8003e58:	2d00      	cmp	r5, #0
 8003e5a:	d04d      	beq.n	8003ef8 <_printf_i+0x1b4>
 8003e5c:	4615      	mov	r5, r2
 8003e5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e62:	fb03 6711 	mls	r7, r3, r1, r6
 8003e66:	5dc7      	ldrb	r7, [r0, r7]
 8003e68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e6c:	4637      	mov	r7, r6
 8003e6e:	42bb      	cmp	r3, r7
 8003e70:	460e      	mov	r6, r1
 8003e72:	d9f4      	bls.n	8003e5e <_printf_i+0x11a>
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d10b      	bne.n	8003e90 <_printf_i+0x14c>
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	07de      	lsls	r6, r3, #31
 8003e7c:	d508      	bpl.n	8003e90 <_printf_i+0x14c>
 8003e7e:	6923      	ldr	r3, [r4, #16]
 8003e80:	6861      	ldr	r1, [r4, #4]
 8003e82:	4299      	cmp	r1, r3
 8003e84:	bfde      	ittt	le
 8003e86:	2330      	movle	r3, #48	; 0x30
 8003e88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e90:	1b52      	subs	r2, r2, r5
 8003e92:	6122      	str	r2, [r4, #16]
 8003e94:	f8cd a000 	str.w	sl, [sp]
 8003e98:	464b      	mov	r3, r9
 8003e9a:	aa03      	add	r2, sp, #12
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	4640      	mov	r0, r8
 8003ea0:	f7ff fee2 	bl	8003c68 <_printf_common>
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d14c      	bne.n	8003f42 <_printf_i+0x1fe>
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eac:	b004      	add	sp, #16
 8003eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb2:	4835      	ldr	r0, [pc, #212]	; (8003f88 <_printf_i+0x244>)
 8003eb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003eb8:	6829      	ldr	r1, [r5, #0]
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ec0:	6029      	str	r1, [r5, #0]
 8003ec2:	061d      	lsls	r5, r3, #24
 8003ec4:	d514      	bpl.n	8003ef0 <_printf_i+0x1ac>
 8003ec6:	07df      	lsls	r7, r3, #31
 8003ec8:	bf44      	itt	mi
 8003eca:	f043 0320 	orrmi.w	r3, r3, #32
 8003ece:	6023      	strmi	r3, [r4, #0]
 8003ed0:	b91e      	cbnz	r6, 8003eda <_printf_i+0x196>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	f023 0320 	bic.w	r3, r3, #32
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	2310      	movs	r3, #16
 8003edc:	e7b0      	b.n	8003e40 <_printf_i+0xfc>
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	f043 0320 	orr.w	r3, r3, #32
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	2378      	movs	r3, #120	; 0x78
 8003ee8:	4828      	ldr	r0, [pc, #160]	; (8003f8c <_printf_i+0x248>)
 8003eea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003eee:	e7e3      	b.n	8003eb8 <_printf_i+0x174>
 8003ef0:	0659      	lsls	r1, r3, #25
 8003ef2:	bf48      	it	mi
 8003ef4:	b2b6      	uxthmi	r6, r6
 8003ef6:	e7e6      	b.n	8003ec6 <_printf_i+0x182>
 8003ef8:	4615      	mov	r5, r2
 8003efa:	e7bb      	b.n	8003e74 <_printf_i+0x130>
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	6826      	ldr	r6, [r4, #0]
 8003f00:	6961      	ldr	r1, [r4, #20]
 8003f02:	1d18      	adds	r0, r3, #4
 8003f04:	6028      	str	r0, [r5, #0]
 8003f06:	0635      	lsls	r5, r6, #24
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	d501      	bpl.n	8003f10 <_printf_i+0x1cc>
 8003f0c:	6019      	str	r1, [r3, #0]
 8003f0e:	e002      	b.n	8003f16 <_printf_i+0x1d2>
 8003f10:	0670      	lsls	r0, r6, #25
 8003f12:	d5fb      	bpl.n	8003f0c <_printf_i+0x1c8>
 8003f14:	8019      	strh	r1, [r3, #0]
 8003f16:	2300      	movs	r3, #0
 8003f18:	6123      	str	r3, [r4, #16]
 8003f1a:	4615      	mov	r5, r2
 8003f1c:	e7ba      	b.n	8003e94 <_printf_i+0x150>
 8003f1e:	682b      	ldr	r3, [r5, #0]
 8003f20:	1d1a      	adds	r2, r3, #4
 8003f22:	602a      	str	r2, [r5, #0]
 8003f24:	681d      	ldr	r5, [r3, #0]
 8003f26:	6862      	ldr	r2, [r4, #4]
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f7fc f970 	bl	8000210 <memchr>
 8003f30:	b108      	cbz	r0, 8003f36 <_printf_i+0x1f2>
 8003f32:	1b40      	subs	r0, r0, r5
 8003f34:	6060      	str	r0, [r4, #4]
 8003f36:	6863      	ldr	r3, [r4, #4]
 8003f38:	6123      	str	r3, [r4, #16]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f40:	e7a8      	b.n	8003e94 <_printf_i+0x150>
 8003f42:	6923      	ldr	r3, [r4, #16]
 8003f44:	462a      	mov	r2, r5
 8003f46:	4649      	mov	r1, r9
 8003f48:	4640      	mov	r0, r8
 8003f4a:	47d0      	blx	sl
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d0ab      	beq.n	8003ea8 <_printf_i+0x164>
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	079b      	lsls	r3, r3, #30
 8003f54:	d413      	bmi.n	8003f7e <_printf_i+0x23a>
 8003f56:	68e0      	ldr	r0, [r4, #12]
 8003f58:	9b03      	ldr	r3, [sp, #12]
 8003f5a:	4298      	cmp	r0, r3
 8003f5c:	bfb8      	it	lt
 8003f5e:	4618      	movlt	r0, r3
 8003f60:	e7a4      	b.n	8003eac <_printf_i+0x168>
 8003f62:	2301      	movs	r3, #1
 8003f64:	4632      	mov	r2, r6
 8003f66:	4649      	mov	r1, r9
 8003f68:	4640      	mov	r0, r8
 8003f6a:	47d0      	blx	sl
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d09b      	beq.n	8003ea8 <_printf_i+0x164>
 8003f70:	3501      	adds	r5, #1
 8003f72:	68e3      	ldr	r3, [r4, #12]
 8003f74:	9903      	ldr	r1, [sp, #12]
 8003f76:	1a5b      	subs	r3, r3, r1
 8003f78:	42ab      	cmp	r3, r5
 8003f7a:	dcf2      	bgt.n	8003f62 <_printf_i+0x21e>
 8003f7c:	e7eb      	b.n	8003f56 <_printf_i+0x212>
 8003f7e:	2500      	movs	r5, #0
 8003f80:	f104 0619 	add.w	r6, r4, #25
 8003f84:	e7f5      	b.n	8003f72 <_printf_i+0x22e>
 8003f86:	bf00      	nop
 8003f88:	08004b09 	.word	0x08004b09
 8003f8c:	08004b1a 	.word	0x08004b1a

08003f90 <__swbuf_r>:
 8003f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f92:	460e      	mov	r6, r1
 8003f94:	4614      	mov	r4, r2
 8003f96:	4605      	mov	r5, r0
 8003f98:	b118      	cbz	r0, 8003fa2 <__swbuf_r+0x12>
 8003f9a:	6983      	ldr	r3, [r0, #24]
 8003f9c:	b90b      	cbnz	r3, 8003fa2 <__swbuf_r+0x12>
 8003f9e:	f000 f9d9 	bl	8004354 <__sinit>
 8003fa2:	4b21      	ldr	r3, [pc, #132]	; (8004028 <__swbuf_r+0x98>)
 8003fa4:	429c      	cmp	r4, r3
 8003fa6:	d12b      	bne.n	8004000 <__swbuf_r+0x70>
 8003fa8:	686c      	ldr	r4, [r5, #4]
 8003faa:	69a3      	ldr	r3, [r4, #24]
 8003fac:	60a3      	str	r3, [r4, #8]
 8003fae:	89a3      	ldrh	r3, [r4, #12]
 8003fb0:	071a      	lsls	r2, r3, #28
 8003fb2:	d52f      	bpl.n	8004014 <__swbuf_r+0x84>
 8003fb4:	6923      	ldr	r3, [r4, #16]
 8003fb6:	b36b      	cbz	r3, 8004014 <__swbuf_r+0x84>
 8003fb8:	6923      	ldr	r3, [r4, #16]
 8003fba:	6820      	ldr	r0, [r4, #0]
 8003fbc:	1ac0      	subs	r0, r0, r3
 8003fbe:	6963      	ldr	r3, [r4, #20]
 8003fc0:	b2f6      	uxtb	r6, r6
 8003fc2:	4283      	cmp	r3, r0
 8003fc4:	4637      	mov	r7, r6
 8003fc6:	dc04      	bgt.n	8003fd2 <__swbuf_r+0x42>
 8003fc8:	4621      	mov	r1, r4
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f000 f92e 	bl	800422c <_fflush_r>
 8003fd0:	bb30      	cbnz	r0, 8004020 <__swbuf_r+0x90>
 8003fd2:	68a3      	ldr	r3, [r4, #8]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	60a3      	str	r3, [r4, #8]
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	6022      	str	r2, [r4, #0]
 8003fde:	701e      	strb	r6, [r3, #0]
 8003fe0:	6963      	ldr	r3, [r4, #20]
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	4283      	cmp	r3, r0
 8003fe6:	d004      	beq.n	8003ff2 <__swbuf_r+0x62>
 8003fe8:	89a3      	ldrh	r3, [r4, #12]
 8003fea:	07db      	lsls	r3, r3, #31
 8003fec:	d506      	bpl.n	8003ffc <__swbuf_r+0x6c>
 8003fee:	2e0a      	cmp	r6, #10
 8003ff0:	d104      	bne.n	8003ffc <__swbuf_r+0x6c>
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	f000 f919 	bl	800422c <_fflush_r>
 8003ffa:	b988      	cbnz	r0, 8004020 <__swbuf_r+0x90>
 8003ffc:	4638      	mov	r0, r7
 8003ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004000:	4b0a      	ldr	r3, [pc, #40]	; (800402c <__swbuf_r+0x9c>)
 8004002:	429c      	cmp	r4, r3
 8004004:	d101      	bne.n	800400a <__swbuf_r+0x7a>
 8004006:	68ac      	ldr	r4, [r5, #8]
 8004008:	e7cf      	b.n	8003faa <__swbuf_r+0x1a>
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <__swbuf_r+0xa0>)
 800400c:	429c      	cmp	r4, r3
 800400e:	bf08      	it	eq
 8004010:	68ec      	ldreq	r4, [r5, #12]
 8004012:	e7ca      	b.n	8003faa <__swbuf_r+0x1a>
 8004014:	4621      	mov	r1, r4
 8004016:	4628      	mov	r0, r5
 8004018:	f000 f80c 	bl	8004034 <__swsetup_r>
 800401c:	2800      	cmp	r0, #0
 800401e:	d0cb      	beq.n	8003fb8 <__swbuf_r+0x28>
 8004020:	f04f 37ff 	mov.w	r7, #4294967295
 8004024:	e7ea      	b.n	8003ffc <__swbuf_r+0x6c>
 8004026:	bf00      	nop
 8004028:	08004b4c 	.word	0x08004b4c
 800402c:	08004b6c 	.word	0x08004b6c
 8004030:	08004b2c 	.word	0x08004b2c

08004034 <__swsetup_r>:
 8004034:	4b32      	ldr	r3, [pc, #200]	; (8004100 <__swsetup_r+0xcc>)
 8004036:	b570      	push	{r4, r5, r6, lr}
 8004038:	681d      	ldr	r5, [r3, #0]
 800403a:	4606      	mov	r6, r0
 800403c:	460c      	mov	r4, r1
 800403e:	b125      	cbz	r5, 800404a <__swsetup_r+0x16>
 8004040:	69ab      	ldr	r3, [r5, #24]
 8004042:	b913      	cbnz	r3, 800404a <__swsetup_r+0x16>
 8004044:	4628      	mov	r0, r5
 8004046:	f000 f985 	bl	8004354 <__sinit>
 800404a:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <__swsetup_r+0xd0>)
 800404c:	429c      	cmp	r4, r3
 800404e:	d10f      	bne.n	8004070 <__swsetup_r+0x3c>
 8004050:	686c      	ldr	r4, [r5, #4]
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004058:	0719      	lsls	r1, r3, #28
 800405a:	d42c      	bmi.n	80040b6 <__swsetup_r+0x82>
 800405c:	06dd      	lsls	r5, r3, #27
 800405e:	d411      	bmi.n	8004084 <__swsetup_r+0x50>
 8004060:	2309      	movs	r3, #9
 8004062:	6033      	str	r3, [r6, #0]
 8004064:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004068:	81a3      	strh	r3, [r4, #12]
 800406a:	f04f 30ff 	mov.w	r0, #4294967295
 800406e:	e03e      	b.n	80040ee <__swsetup_r+0xba>
 8004070:	4b25      	ldr	r3, [pc, #148]	; (8004108 <__swsetup_r+0xd4>)
 8004072:	429c      	cmp	r4, r3
 8004074:	d101      	bne.n	800407a <__swsetup_r+0x46>
 8004076:	68ac      	ldr	r4, [r5, #8]
 8004078:	e7eb      	b.n	8004052 <__swsetup_r+0x1e>
 800407a:	4b24      	ldr	r3, [pc, #144]	; (800410c <__swsetup_r+0xd8>)
 800407c:	429c      	cmp	r4, r3
 800407e:	bf08      	it	eq
 8004080:	68ec      	ldreq	r4, [r5, #12]
 8004082:	e7e6      	b.n	8004052 <__swsetup_r+0x1e>
 8004084:	0758      	lsls	r0, r3, #29
 8004086:	d512      	bpl.n	80040ae <__swsetup_r+0x7a>
 8004088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800408a:	b141      	cbz	r1, 800409e <__swsetup_r+0x6a>
 800408c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004090:	4299      	cmp	r1, r3
 8004092:	d002      	beq.n	800409a <__swsetup_r+0x66>
 8004094:	4630      	mov	r0, r6
 8004096:	f000 fa63 	bl	8004560 <_free_r>
 800409a:	2300      	movs	r3, #0
 800409c:	6363      	str	r3, [r4, #52]	; 0x34
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040a4:	81a3      	strh	r3, [r4, #12]
 80040a6:	2300      	movs	r3, #0
 80040a8:	6063      	str	r3, [r4, #4]
 80040aa:	6923      	ldr	r3, [r4, #16]
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	89a3      	ldrh	r3, [r4, #12]
 80040b0:	f043 0308 	orr.w	r3, r3, #8
 80040b4:	81a3      	strh	r3, [r4, #12]
 80040b6:	6923      	ldr	r3, [r4, #16]
 80040b8:	b94b      	cbnz	r3, 80040ce <__swsetup_r+0x9a>
 80040ba:	89a3      	ldrh	r3, [r4, #12]
 80040bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c4:	d003      	beq.n	80040ce <__swsetup_r+0x9a>
 80040c6:	4621      	mov	r1, r4
 80040c8:	4630      	mov	r0, r6
 80040ca:	f000 fa09 	bl	80044e0 <__smakebuf_r>
 80040ce:	89a0      	ldrh	r0, [r4, #12]
 80040d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040d4:	f010 0301 	ands.w	r3, r0, #1
 80040d8:	d00a      	beq.n	80040f0 <__swsetup_r+0xbc>
 80040da:	2300      	movs	r3, #0
 80040dc:	60a3      	str	r3, [r4, #8]
 80040de:	6963      	ldr	r3, [r4, #20]
 80040e0:	425b      	negs	r3, r3
 80040e2:	61a3      	str	r3, [r4, #24]
 80040e4:	6923      	ldr	r3, [r4, #16]
 80040e6:	b943      	cbnz	r3, 80040fa <__swsetup_r+0xc6>
 80040e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040ec:	d1ba      	bne.n	8004064 <__swsetup_r+0x30>
 80040ee:	bd70      	pop	{r4, r5, r6, pc}
 80040f0:	0781      	lsls	r1, r0, #30
 80040f2:	bf58      	it	pl
 80040f4:	6963      	ldrpl	r3, [r4, #20]
 80040f6:	60a3      	str	r3, [r4, #8]
 80040f8:	e7f4      	b.n	80040e4 <__swsetup_r+0xb0>
 80040fa:	2000      	movs	r0, #0
 80040fc:	e7f7      	b.n	80040ee <__swsetup_r+0xba>
 80040fe:	bf00      	nop
 8004100:	20000014 	.word	0x20000014
 8004104:	08004b4c 	.word	0x08004b4c
 8004108:	08004b6c 	.word	0x08004b6c
 800410c:	08004b2c 	.word	0x08004b2c

08004110 <abort>:
 8004110:	b508      	push	{r3, lr}
 8004112:	2006      	movs	r0, #6
 8004114:	f000 fb3c 	bl	8004790 <raise>
 8004118:	2001      	movs	r0, #1
 800411a:	f7fc fcc5 	bl	8000aa8 <_exit>
	...

08004120 <__sflush_r>:
 8004120:	898a      	ldrh	r2, [r1, #12]
 8004122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004126:	4605      	mov	r5, r0
 8004128:	0710      	lsls	r0, r2, #28
 800412a:	460c      	mov	r4, r1
 800412c:	d458      	bmi.n	80041e0 <__sflush_r+0xc0>
 800412e:	684b      	ldr	r3, [r1, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	dc05      	bgt.n	8004140 <__sflush_r+0x20>
 8004134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	dc02      	bgt.n	8004140 <__sflush_r+0x20>
 800413a:	2000      	movs	r0, #0
 800413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004142:	2e00      	cmp	r6, #0
 8004144:	d0f9      	beq.n	800413a <__sflush_r+0x1a>
 8004146:	2300      	movs	r3, #0
 8004148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800414c:	682f      	ldr	r7, [r5, #0]
 800414e:	602b      	str	r3, [r5, #0]
 8004150:	d032      	beq.n	80041b8 <__sflush_r+0x98>
 8004152:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004154:	89a3      	ldrh	r3, [r4, #12]
 8004156:	075a      	lsls	r2, r3, #29
 8004158:	d505      	bpl.n	8004166 <__sflush_r+0x46>
 800415a:	6863      	ldr	r3, [r4, #4]
 800415c:	1ac0      	subs	r0, r0, r3
 800415e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004160:	b10b      	cbz	r3, 8004166 <__sflush_r+0x46>
 8004162:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004164:	1ac0      	subs	r0, r0, r3
 8004166:	2300      	movs	r3, #0
 8004168:	4602      	mov	r2, r0
 800416a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800416c:	6a21      	ldr	r1, [r4, #32]
 800416e:	4628      	mov	r0, r5
 8004170:	47b0      	blx	r6
 8004172:	1c43      	adds	r3, r0, #1
 8004174:	89a3      	ldrh	r3, [r4, #12]
 8004176:	d106      	bne.n	8004186 <__sflush_r+0x66>
 8004178:	6829      	ldr	r1, [r5, #0]
 800417a:	291d      	cmp	r1, #29
 800417c:	d82c      	bhi.n	80041d8 <__sflush_r+0xb8>
 800417e:	4a2a      	ldr	r2, [pc, #168]	; (8004228 <__sflush_r+0x108>)
 8004180:	40ca      	lsrs	r2, r1
 8004182:	07d6      	lsls	r6, r2, #31
 8004184:	d528      	bpl.n	80041d8 <__sflush_r+0xb8>
 8004186:	2200      	movs	r2, #0
 8004188:	6062      	str	r2, [r4, #4]
 800418a:	04d9      	lsls	r1, r3, #19
 800418c:	6922      	ldr	r2, [r4, #16]
 800418e:	6022      	str	r2, [r4, #0]
 8004190:	d504      	bpl.n	800419c <__sflush_r+0x7c>
 8004192:	1c42      	adds	r2, r0, #1
 8004194:	d101      	bne.n	800419a <__sflush_r+0x7a>
 8004196:	682b      	ldr	r3, [r5, #0]
 8004198:	b903      	cbnz	r3, 800419c <__sflush_r+0x7c>
 800419a:	6560      	str	r0, [r4, #84]	; 0x54
 800419c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800419e:	602f      	str	r7, [r5, #0]
 80041a0:	2900      	cmp	r1, #0
 80041a2:	d0ca      	beq.n	800413a <__sflush_r+0x1a>
 80041a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041a8:	4299      	cmp	r1, r3
 80041aa:	d002      	beq.n	80041b2 <__sflush_r+0x92>
 80041ac:	4628      	mov	r0, r5
 80041ae:	f000 f9d7 	bl	8004560 <_free_r>
 80041b2:	2000      	movs	r0, #0
 80041b4:	6360      	str	r0, [r4, #52]	; 0x34
 80041b6:	e7c1      	b.n	800413c <__sflush_r+0x1c>
 80041b8:	6a21      	ldr	r1, [r4, #32]
 80041ba:	2301      	movs	r3, #1
 80041bc:	4628      	mov	r0, r5
 80041be:	47b0      	blx	r6
 80041c0:	1c41      	adds	r1, r0, #1
 80041c2:	d1c7      	bne.n	8004154 <__sflush_r+0x34>
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0c4      	beq.n	8004154 <__sflush_r+0x34>
 80041ca:	2b1d      	cmp	r3, #29
 80041cc:	d001      	beq.n	80041d2 <__sflush_r+0xb2>
 80041ce:	2b16      	cmp	r3, #22
 80041d0:	d101      	bne.n	80041d6 <__sflush_r+0xb6>
 80041d2:	602f      	str	r7, [r5, #0]
 80041d4:	e7b1      	b.n	800413a <__sflush_r+0x1a>
 80041d6:	89a3      	ldrh	r3, [r4, #12]
 80041d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041dc:	81a3      	strh	r3, [r4, #12]
 80041de:	e7ad      	b.n	800413c <__sflush_r+0x1c>
 80041e0:	690f      	ldr	r7, [r1, #16]
 80041e2:	2f00      	cmp	r7, #0
 80041e4:	d0a9      	beq.n	800413a <__sflush_r+0x1a>
 80041e6:	0793      	lsls	r3, r2, #30
 80041e8:	680e      	ldr	r6, [r1, #0]
 80041ea:	bf08      	it	eq
 80041ec:	694b      	ldreq	r3, [r1, #20]
 80041ee:	600f      	str	r7, [r1, #0]
 80041f0:	bf18      	it	ne
 80041f2:	2300      	movne	r3, #0
 80041f4:	eba6 0807 	sub.w	r8, r6, r7
 80041f8:	608b      	str	r3, [r1, #8]
 80041fa:	f1b8 0f00 	cmp.w	r8, #0
 80041fe:	dd9c      	ble.n	800413a <__sflush_r+0x1a>
 8004200:	6a21      	ldr	r1, [r4, #32]
 8004202:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004204:	4643      	mov	r3, r8
 8004206:	463a      	mov	r2, r7
 8004208:	4628      	mov	r0, r5
 800420a:	47b0      	blx	r6
 800420c:	2800      	cmp	r0, #0
 800420e:	dc06      	bgt.n	800421e <__sflush_r+0xfe>
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004216:	81a3      	strh	r3, [r4, #12]
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	e78e      	b.n	800413c <__sflush_r+0x1c>
 800421e:	4407      	add	r7, r0
 8004220:	eba8 0800 	sub.w	r8, r8, r0
 8004224:	e7e9      	b.n	80041fa <__sflush_r+0xda>
 8004226:	bf00      	nop
 8004228:	20400001 	.word	0x20400001

0800422c <_fflush_r>:
 800422c:	b538      	push	{r3, r4, r5, lr}
 800422e:	690b      	ldr	r3, [r1, #16]
 8004230:	4605      	mov	r5, r0
 8004232:	460c      	mov	r4, r1
 8004234:	b913      	cbnz	r3, 800423c <_fflush_r+0x10>
 8004236:	2500      	movs	r5, #0
 8004238:	4628      	mov	r0, r5
 800423a:	bd38      	pop	{r3, r4, r5, pc}
 800423c:	b118      	cbz	r0, 8004246 <_fflush_r+0x1a>
 800423e:	6983      	ldr	r3, [r0, #24]
 8004240:	b90b      	cbnz	r3, 8004246 <_fflush_r+0x1a>
 8004242:	f000 f887 	bl	8004354 <__sinit>
 8004246:	4b14      	ldr	r3, [pc, #80]	; (8004298 <_fflush_r+0x6c>)
 8004248:	429c      	cmp	r4, r3
 800424a:	d11b      	bne.n	8004284 <_fflush_r+0x58>
 800424c:	686c      	ldr	r4, [r5, #4]
 800424e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0ef      	beq.n	8004236 <_fflush_r+0xa>
 8004256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004258:	07d0      	lsls	r0, r2, #31
 800425a:	d404      	bmi.n	8004266 <_fflush_r+0x3a>
 800425c:	0599      	lsls	r1, r3, #22
 800425e:	d402      	bmi.n	8004266 <_fflush_r+0x3a>
 8004260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004262:	f000 f915 	bl	8004490 <__retarget_lock_acquire_recursive>
 8004266:	4628      	mov	r0, r5
 8004268:	4621      	mov	r1, r4
 800426a:	f7ff ff59 	bl	8004120 <__sflush_r>
 800426e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004270:	07da      	lsls	r2, r3, #31
 8004272:	4605      	mov	r5, r0
 8004274:	d4e0      	bmi.n	8004238 <_fflush_r+0xc>
 8004276:	89a3      	ldrh	r3, [r4, #12]
 8004278:	059b      	lsls	r3, r3, #22
 800427a:	d4dd      	bmi.n	8004238 <_fflush_r+0xc>
 800427c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800427e:	f000 f908 	bl	8004492 <__retarget_lock_release_recursive>
 8004282:	e7d9      	b.n	8004238 <_fflush_r+0xc>
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <_fflush_r+0x70>)
 8004286:	429c      	cmp	r4, r3
 8004288:	d101      	bne.n	800428e <_fflush_r+0x62>
 800428a:	68ac      	ldr	r4, [r5, #8]
 800428c:	e7df      	b.n	800424e <_fflush_r+0x22>
 800428e:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <_fflush_r+0x74>)
 8004290:	429c      	cmp	r4, r3
 8004292:	bf08      	it	eq
 8004294:	68ec      	ldreq	r4, [r5, #12]
 8004296:	e7da      	b.n	800424e <_fflush_r+0x22>
 8004298:	08004b4c 	.word	0x08004b4c
 800429c:	08004b6c 	.word	0x08004b6c
 80042a0:	08004b2c 	.word	0x08004b2c

080042a4 <std>:
 80042a4:	2300      	movs	r3, #0
 80042a6:	b510      	push	{r4, lr}
 80042a8:	4604      	mov	r4, r0
 80042aa:	e9c0 3300 	strd	r3, r3, [r0]
 80042ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042b2:	6083      	str	r3, [r0, #8]
 80042b4:	8181      	strh	r1, [r0, #12]
 80042b6:	6643      	str	r3, [r0, #100]	; 0x64
 80042b8:	81c2      	strh	r2, [r0, #14]
 80042ba:	6183      	str	r3, [r0, #24]
 80042bc:	4619      	mov	r1, r3
 80042be:	2208      	movs	r2, #8
 80042c0:	305c      	adds	r0, #92	; 0x5c
 80042c2:	f7ff fb6f 	bl	80039a4 <memset>
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <std+0x38>)
 80042c8:	6263      	str	r3, [r4, #36]	; 0x24
 80042ca:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <std+0x3c>)
 80042cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80042ce:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <std+0x40>)
 80042d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <std+0x44>)
 80042d4:	6224      	str	r4, [r4, #32]
 80042d6:	6323      	str	r3, [r4, #48]	; 0x30
 80042d8:	bd10      	pop	{r4, pc}
 80042da:	bf00      	nop
 80042dc:	080047c9 	.word	0x080047c9
 80042e0:	080047eb 	.word	0x080047eb
 80042e4:	08004823 	.word	0x08004823
 80042e8:	08004847 	.word	0x08004847

080042ec <_cleanup_r>:
 80042ec:	4901      	ldr	r1, [pc, #4]	; (80042f4 <_cleanup_r+0x8>)
 80042ee:	f000 b8af 	b.w	8004450 <_fwalk_reent>
 80042f2:	bf00      	nop
 80042f4:	0800422d 	.word	0x0800422d

080042f8 <__sfmoreglue>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	2268      	movs	r2, #104	; 0x68
 80042fc:	1e4d      	subs	r5, r1, #1
 80042fe:	4355      	muls	r5, r2
 8004300:	460e      	mov	r6, r1
 8004302:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004306:	f000 f997 	bl	8004638 <_malloc_r>
 800430a:	4604      	mov	r4, r0
 800430c:	b140      	cbz	r0, 8004320 <__sfmoreglue+0x28>
 800430e:	2100      	movs	r1, #0
 8004310:	e9c0 1600 	strd	r1, r6, [r0]
 8004314:	300c      	adds	r0, #12
 8004316:	60a0      	str	r0, [r4, #8]
 8004318:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800431c:	f7ff fb42 	bl	80039a4 <memset>
 8004320:	4620      	mov	r0, r4
 8004322:	bd70      	pop	{r4, r5, r6, pc}

08004324 <__sfp_lock_acquire>:
 8004324:	4801      	ldr	r0, [pc, #4]	; (800432c <__sfp_lock_acquire+0x8>)
 8004326:	f000 b8b3 	b.w	8004490 <__retarget_lock_acquire_recursive>
 800432a:	bf00      	nop
 800432c:	200005fd 	.word	0x200005fd

08004330 <__sfp_lock_release>:
 8004330:	4801      	ldr	r0, [pc, #4]	; (8004338 <__sfp_lock_release+0x8>)
 8004332:	f000 b8ae 	b.w	8004492 <__retarget_lock_release_recursive>
 8004336:	bf00      	nop
 8004338:	200005fd 	.word	0x200005fd

0800433c <__sinit_lock_acquire>:
 800433c:	4801      	ldr	r0, [pc, #4]	; (8004344 <__sinit_lock_acquire+0x8>)
 800433e:	f000 b8a7 	b.w	8004490 <__retarget_lock_acquire_recursive>
 8004342:	bf00      	nop
 8004344:	200005fe 	.word	0x200005fe

08004348 <__sinit_lock_release>:
 8004348:	4801      	ldr	r0, [pc, #4]	; (8004350 <__sinit_lock_release+0x8>)
 800434a:	f000 b8a2 	b.w	8004492 <__retarget_lock_release_recursive>
 800434e:	bf00      	nop
 8004350:	200005fe 	.word	0x200005fe

08004354 <__sinit>:
 8004354:	b510      	push	{r4, lr}
 8004356:	4604      	mov	r4, r0
 8004358:	f7ff fff0 	bl	800433c <__sinit_lock_acquire>
 800435c:	69a3      	ldr	r3, [r4, #24]
 800435e:	b11b      	cbz	r3, 8004368 <__sinit+0x14>
 8004360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004364:	f7ff bff0 	b.w	8004348 <__sinit_lock_release>
 8004368:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800436c:	6523      	str	r3, [r4, #80]	; 0x50
 800436e:	4b13      	ldr	r3, [pc, #76]	; (80043bc <__sinit+0x68>)
 8004370:	4a13      	ldr	r2, [pc, #76]	; (80043c0 <__sinit+0x6c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	62a2      	str	r2, [r4, #40]	; 0x28
 8004376:	42a3      	cmp	r3, r4
 8004378:	bf04      	itt	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	61a3      	streq	r3, [r4, #24]
 800437e:	4620      	mov	r0, r4
 8004380:	f000 f820 	bl	80043c4 <__sfp>
 8004384:	6060      	str	r0, [r4, #4]
 8004386:	4620      	mov	r0, r4
 8004388:	f000 f81c 	bl	80043c4 <__sfp>
 800438c:	60a0      	str	r0, [r4, #8]
 800438e:	4620      	mov	r0, r4
 8004390:	f000 f818 	bl	80043c4 <__sfp>
 8004394:	2200      	movs	r2, #0
 8004396:	60e0      	str	r0, [r4, #12]
 8004398:	2104      	movs	r1, #4
 800439a:	6860      	ldr	r0, [r4, #4]
 800439c:	f7ff ff82 	bl	80042a4 <std>
 80043a0:	68a0      	ldr	r0, [r4, #8]
 80043a2:	2201      	movs	r2, #1
 80043a4:	2109      	movs	r1, #9
 80043a6:	f7ff ff7d 	bl	80042a4 <std>
 80043aa:	68e0      	ldr	r0, [r4, #12]
 80043ac:	2202      	movs	r2, #2
 80043ae:	2112      	movs	r1, #18
 80043b0:	f7ff ff78 	bl	80042a4 <std>
 80043b4:	2301      	movs	r3, #1
 80043b6:	61a3      	str	r3, [r4, #24]
 80043b8:	e7d2      	b.n	8004360 <__sinit+0xc>
 80043ba:	bf00      	nop
 80043bc:	08004af4 	.word	0x08004af4
 80043c0:	080042ed 	.word	0x080042ed

080043c4 <__sfp>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	4607      	mov	r7, r0
 80043c8:	f7ff ffac 	bl	8004324 <__sfp_lock_acquire>
 80043cc:	4b1e      	ldr	r3, [pc, #120]	; (8004448 <__sfp+0x84>)
 80043ce:	681e      	ldr	r6, [r3, #0]
 80043d0:	69b3      	ldr	r3, [r6, #24]
 80043d2:	b913      	cbnz	r3, 80043da <__sfp+0x16>
 80043d4:	4630      	mov	r0, r6
 80043d6:	f7ff ffbd 	bl	8004354 <__sinit>
 80043da:	3648      	adds	r6, #72	; 0x48
 80043dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	d503      	bpl.n	80043ec <__sfp+0x28>
 80043e4:	6833      	ldr	r3, [r6, #0]
 80043e6:	b30b      	cbz	r3, 800442c <__sfp+0x68>
 80043e8:	6836      	ldr	r6, [r6, #0]
 80043ea:	e7f7      	b.n	80043dc <__sfp+0x18>
 80043ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043f0:	b9d5      	cbnz	r5, 8004428 <__sfp+0x64>
 80043f2:	4b16      	ldr	r3, [pc, #88]	; (800444c <__sfp+0x88>)
 80043f4:	60e3      	str	r3, [r4, #12]
 80043f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043fa:	6665      	str	r5, [r4, #100]	; 0x64
 80043fc:	f000 f847 	bl	800448e <__retarget_lock_init_recursive>
 8004400:	f7ff ff96 	bl	8004330 <__sfp_lock_release>
 8004404:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004408:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800440c:	6025      	str	r5, [r4, #0]
 800440e:	61a5      	str	r5, [r4, #24]
 8004410:	2208      	movs	r2, #8
 8004412:	4629      	mov	r1, r5
 8004414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004418:	f7ff fac4 	bl	80039a4 <memset>
 800441c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004424:	4620      	mov	r0, r4
 8004426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004428:	3468      	adds	r4, #104	; 0x68
 800442a:	e7d9      	b.n	80043e0 <__sfp+0x1c>
 800442c:	2104      	movs	r1, #4
 800442e:	4638      	mov	r0, r7
 8004430:	f7ff ff62 	bl	80042f8 <__sfmoreglue>
 8004434:	4604      	mov	r4, r0
 8004436:	6030      	str	r0, [r6, #0]
 8004438:	2800      	cmp	r0, #0
 800443a:	d1d5      	bne.n	80043e8 <__sfp+0x24>
 800443c:	f7ff ff78 	bl	8004330 <__sfp_lock_release>
 8004440:	230c      	movs	r3, #12
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	e7ee      	b.n	8004424 <__sfp+0x60>
 8004446:	bf00      	nop
 8004448:	08004af4 	.word	0x08004af4
 800444c:	ffff0001 	.word	0xffff0001

08004450 <_fwalk_reent>:
 8004450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004454:	4606      	mov	r6, r0
 8004456:	4688      	mov	r8, r1
 8004458:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800445c:	2700      	movs	r7, #0
 800445e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004462:	f1b9 0901 	subs.w	r9, r9, #1
 8004466:	d505      	bpl.n	8004474 <_fwalk_reent+0x24>
 8004468:	6824      	ldr	r4, [r4, #0]
 800446a:	2c00      	cmp	r4, #0
 800446c:	d1f7      	bne.n	800445e <_fwalk_reent+0xe>
 800446e:	4638      	mov	r0, r7
 8004470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004474:	89ab      	ldrh	r3, [r5, #12]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d907      	bls.n	800448a <_fwalk_reent+0x3a>
 800447a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800447e:	3301      	adds	r3, #1
 8004480:	d003      	beq.n	800448a <_fwalk_reent+0x3a>
 8004482:	4629      	mov	r1, r5
 8004484:	4630      	mov	r0, r6
 8004486:	47c0      	blx	r8
 8004488:	4307      	orrs	r7, r0
 800448a:	3568      	adds	r5, #104	; 0x68
 800448c:	e7e9      	b.n	8004462 <_fwalk_reent+0x12>

0800448e <__retarget_lock_init_recursive>:
 800448e:	4770      	bx	lr

08004490 <__retarget_lock_acquire_recursive>:
 8004490:	4770      	bx	lr

08004492 <__retarget_lock_release_recursive>:
 8004492:	4770      	bx	lr

08004494 <__swhatbuf_r>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	460e      	mov	r6, r1
 8004498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800449c:	2900      	cmp	r1, #0
 800449e:	b096      	sub	sp, #88	; 0x58
 80044a0:	4614      	mov	r4, r2
 80044a2:	461d      	mov	r5, r3
 80044a4:	da08      	bge.n	80044b8 <__swhatbuf_r+0x24>
 80044a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	602a      	str	r2, [r5, #0]
 80044ae:	061a      	lsls	r2, r3, #24
 80044b0:	d410      	bmi.n	80044d4 <__swhatbuf_r+0x40>
 80044b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044b6:	e00e      	b.n	80044d6 <__swhatbuf_r+0x42>
 80044b8:	466a      	mov	r2, sp
 80044ba:	f000 f9eb 	bl	8004894 <_fstat_r>
 80044be:	2800      	cmp	r0, #0
 80044c0:	dbf1      	blt.n	80044a6 <__swhatbuf_r+0x12>
 80044c2:	9a01      	ldr	r2, [sp, #4]
 80044c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044cc:	425a      	negs	r2, r3
 80044ce:	415a      	adcs	r2, r3
 80044d0:	602a      	str	r2, [r5, #0]
 80044d2:	e7ee      	b.n	80044b2 <__swhatbuf_r+0x1e>
 80044d4:	2340      	movs	r3, #64	; 0x40
 80044d6:	2000      	movs	r0, #0
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	b016      	add	sp, #88	; 0x58
 80044dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080044e0 <__smakebuf_r>:
 80044e0:	898b      	ldrh	r3, [r1, #12]
 80044e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044e4:	079d      	lsls	r5, r3, #30
 80044e6:	4606      	mov	r6, r0
 80044e8:	460c      	mov	r4, r1
 80044ea:	d507      	bpl.n	80044fc <__smakebuf_r+0x1c>
 80044ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	6123      	str	r3, [r4, #16]
 80044f4:	2301      	movs	r3, #1
 80044f6:	6163      	str	r3, [r4, #20]
 80044f8:	b002      	add	sp, #8
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	ab01      	add	r3, sp, #4
 80044fe:	466a      	mov	r2, sp
 8004500:	f7ff ffc8 	bl	8004494 <__swhatbuf_r>
 8004504:	9900      	ldr	r1, [sp, #0]
 8004506:	4605      	mov	r5, r0
 8004508:	4630      	mov	r0, r6
 800450a:	f000 f895 	bl	8004638 <_malloc_r>
 800450e:	b948      	cbnz	r0, 8004524 <__smakebuf_r+0x44>
 8004510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004514:	059a      	lsls	r2, r3, #22
 8004516:	d4ef      	bmi.n	80044f8 <__smakebuf_r+0x18>
 8004518:	f023 0303 	bic.w	r3, r3, #3
 800451c:	f043 0302 	orr.w	r3, r3, #2
 8004520:	81a3      	strh	r3, [r4, #12]
 8004522:	e7e3      	b.n	80044ec <__smakebuf_r+0xc>
 8004524:	4b0d      	ldr	r3, [pc, #52]	; (800455c <__smakebuf_r+0x7c>)
 8004526:	62b3      	str	r3, [r6, #40]	; 0x28
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	6020      	str	r0, [r4, #0]
 800452c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004530:	81a3      	strh	r3, [r4, #12]
 8004532:	9b00      	ldr	r3, [sp, #0]
 8004534:	6163      	str	r3, [r4, #20]
 8004536:	9b01      	ldr	r3, [sp, #4]
 8004538:	6120      	str	r0, [r4, #16]
 800453a:	b15b      	cbz	r3, 8004554 <__smakebuf_r+0x74>
 800453c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004540:	4630      	mov	r0, r6
 8004542:	f000 f9b9 	bl	80048b8 <_isatty_r>
 8004546:	b128      	cbz	r0, 8004554 <__smakebuf_r+0x74>
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	f023 0303 	bic.w	r3, r3, #3
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	81a3      	strh	r3, [r4, #12]
 8004554:	89a0      	ldrh	r0, [r4, #12]
 8004556:	4305      	orrs	r5, r0
 8004558:	81a5      	strh	r5, [r4, #12]
 800455a:	e7cd      	b.n	80044f8 <__smakebuf_r+0x18>
 800455c:	080042ed 	.word	0x080042ed

08004560 <_free_r>:
 8004560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004562:	2900      	cmp	r1, #0
 8004564:	d044      	beq.n	80045f0 <_free_r+0x90>
 8004566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800456a:	9001      	str	r0, [sp, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	f1a1 0404 	sub.w	r4, r1, #4
 8004572:	bfb8      	it	lt
 8004574:	18e4      	addlt	r4, r4, r3
 8004576:	f000 f9c1 	bl	80048fc <__malloc_lock>
 800457a:	4a1e      	ldr	r2, [pc, #120]	; (80045f4 <_free_r+0x94>)
 800457c:	9801      	ldr	r0, [sp, #4]
 800457e:	6813      	ldr	r3, [r2, #0]
 8004580:	b933      	cbnz	r3, 8004590 <_free_r+0x30>
 8004582:	6063      	str	r3, [r4, #4]
 8004584:	6014      	str	r4, [r2, #0]
 8004586:	b003      	add	sp, #12
 8004588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800458c:	f000 b9bc 	b.w	8004908 <__malloc_unlock>
 8004590:	42a3      	cmp	r3, r4
 8004592:	d908      	bls.n	80045a6 <_free_r+0x46>
 8004594:	6825      	ldr	r5, [r4, #0]
 8004596:	1961      	adds	r1, r4, r5
 8004598:	428b      	cmp	r3, r1
 800459a:	bf01      	itttt	eq
 800459c:	6819      	ldreq	r1, [r3, #0]
 800459e:	685b      	ldreq	r3, [r3, #4]
 80045a0:	1949      	addeq	r1, r1, r5
 80045a2:	6021      	streq	r1, [r4, #0]
 80045a4:	e7ed      	b.n	8004582 <_free_r+0x22>
 80045a6:	461a      	mov	r2, r3
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	b10b      	cbz	r3, 80045b0 <_free_r+0x50>
 80045ac:	42a3      	cmp	r3, r4
 80045ae:	d9fa      	bls.n	80045a6 <_free_r+0x46>
 80045b0:	6811      	ldr	r1, [r2, #0]
 80045b2:	1855      	adds	r5, r2, r1
 80045b4:	42a5      	cmp	r5, r4
 80045b6:	d10b      	bne.n	80045d0 <_free_r+0x70>
 80045b8:	6824      	ldr	r4, [r4, #0]
 80045ba:	4421      	add	r1, r4
 80045bc:	1854      	adds	r4, r2, r1
 80045be:	42a3      	cmp	r3, r4
 80045c0:	6011      	str	r1, [r2, #0]
 80045c2:	d1e0      	bne.n	8004586 <_free_r+0x26>
 80045c4:	681c      	ldr	r4, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	6053      	str	r3, [r2, #4]
 80045ca:	4421      	add	r1, r4
 80045cc:	6011      	str	r1, [r2, #0]
 80045ce:	e7da      	b.n	8004586 <_free_r+0x26>
 80045d0:	d902      	bls.n	80045d8 <_free_r+0x78>
 80045d2:	230c      	movs	r3, #12
 80045d4:	6003      	str	r3, [r0, #0]
 80045d6:	e7d6      	b.n	8004586 <_free_r+0x26>
 80045d8:	6825      	ldr	r5, [r4, #0]
 80045da:	1961      	adds	r1, r4, r5
 80045dc:	428b      	cmp	r3, r1
 80045de:	bf04      	itt	eq
 80045e0:	6819      	ldreq	r1, [r3, #0]
 80045e2:	685b      	ldreq	r3, [r3, #4]
 80045e4:	6063      	str	r3, [r4, #4]
 80045e6:	bf04      	itt	eq
 80045e8:	1949      	addeq	r1, r1, r5
 80045ea:	6021      	streq	r1, [r4, #0]
 80045ec:	6054      	str	r4, [r2, #4]
 80045ee:	e7ca      	b.n	8004586 <_free_r+0x26>
 80045f0:	b003      	add	sp, #12
 80045f2:	bd30      	pop	{r4, r5, pc}
 80045f4:	20000600 	.word	0x20000600

080045f8 <sbrk_aligned>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	4e0e      	ldr	r6, [pc, #56]	; (8004634 <sbrk_aligned+0x3c>)
 80045fc:	460c      	mov	r4, r1
 80045fe:	6831      	ldr	r1, [r6, #0]
 8004600:	4605      	mov	r5, r0
 8004602:	b911      	cbnz	r1, 800460a <sbrk_aligned+0x12>
 8004604:	f000 f88c 	bl	8004720 <_sbrk_r>
 8004608:	6030      	str	r0, [r6, #0]
 800460a:	4621      	mov	r1, r4
 800460c:	4628      	mov	r0, r5
 800460e:	f000 f887 	bl	8004720 <_sbrk_r>
 8004612:	1c43      	adds	r3, r0, #1
 8004614:	d00a      	beq.n	800462c <sbrk_aligned+0x34>
 8004616:	1cc4      	adds	r4, r0, #3
 8004618:	f024 0403 	bic.w	r4, r4, #3
 800461c:	42a0      	cmp	r0, r4
 800461e:	d007      	beq.n	8004630 <sbrk_aligned+0x38>
 8004620:	1a21      	subs	r1, r4, r0
 8004622:	4628      	mov	r0, r5
 8004624:	f000 f87c 	bl	8004720 <_sbrk_r>
 8004628:	3001      	adds	r0, #1
 800462a:	d101      	bne.n	8004630 <sbrk_aligned+0x38>
 800462c:	f04f 34ff 	mov.w	r4, #4294967295
 8004630:	4620      	mov	r0, r4
 8004632:	bd70      	pop	{r4, r5, r6, pc}
 8004634:	20000604 	.word	0x20000604

08004638 <_malloc_r>:
 8004638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800463c:	1ccd      	adds	r5, r1, #3
 800463e:	f025 0503 	bic.w	r5, r5, #3
 8004642:	3508      	adds	r5, #8
 8004644:	2d0c      	cmp	r5, #12
 8004646:	bf38      	it	cc
 8004648:	250c      	movcc	r5, #12
 800464a:	2d00      	cmp	r5, #0
 800464c:	4607      	mov	r7, r0
 800464e:	db01      	blt.n	8004654 <_malloc_r+0x1c>
 8004650:	42a9      	cmp	r1, r5
 8004652:	d905      	bls.n	8004660 <_malloc_r+0x28>
 8004654:	230c      	movs	r3, #12
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	2600      	movs	r6, #0
 800465a:	4630      	mov	r0, r6
 800465c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004660:	4e2e      	ldr	r6, [pc, #184]	; (800471c <_malloc_r+0xe4>)
 8004662:	f000 f94b 	bl	80048fc <__malloc_lock>
 8004666:	6833      	ldr	r3, [r6, #0]
 8004668:	461c      	mov	r4, r3
 800466a:	bb34      	cbnz	r4, 80046ba <_malloc_r+0x82>
 800466c:	4629      	mov	r1, r5
 800466e:	4638      	mov	r0, r7
 8004670:	f7ff ffc2 	bl	80045f8 <sbrk_aligned>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	4604      	mov	r4, r0
 8004678:	d14d      	bne.n	8004716 <_malloc_r+0xde>
 800467a:	6834      	ldr	r4, [r6, #0]
 800467c:	4626      	mov	r6, r4
 800467e:	2e00      	cmp	r6, #0
 8004680:	d140      	bne.n	8004704 <_malloc_r+0xcc>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	4631      	mov	r1, r6
 8004686:	4638      	mov	r0, r7
 8004688:	eb04 0803 	add.w	r8, r4, r3
 800468c:	f000 f848 	bl	8004720 <_sbrk_r>
 8004690:	4580      	cmp	r8, r0
 8004692:	d13a      	bne.n	800470a <_malloc_r+0xd2>
 8004694:	6821      	ldr	r1, [r4, #0]
 8004696:	3503      	adds	r5, #3
 8004698:	1a6d      	subs	r5, r5, r1
 800469a:	f025 0503 	bic.w	r5, r5, #3
 800469e:	3508      	adds	r5, #8
 80046a0:	2d0c      	cmp	r5, #12
 80046a2:	bf38      	it	cc
 80046a4:	250c      	movcc	r5, #12
 80046a6:	4629      	mov	r1, r5
 80046a8:	4638      	mov	r0, r7
 80046aa:	f7ff ffa5 	bl	80045f8 <sbrk_aligned>
 80046ae:	3001      	adds	r0, #1
 80046b0:	d02b      	beq.n	800470a <_malloc_r+0xd2>
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	442b      	add	r3, r5
 80046b6:	6023      	str	r3, [r4, #0]
 80046b8:	e00e      	b.n	80046d8 <_malloc_r+0xa0>
 80046ba:	6822      	ldr	r2, [r4, #0]
 80046bc:	1b52      	subs	r2, r2, r5
 80046be:	d41e      	bmi.n	80046fe <_malloc_r+0xc6>
 80046c0:	2a0b      	cmp	r2, #11
 80046c2:	d916      	bls.n	80046f2 <_malloc_r+0xba>
 80046c4:	1961      	adds	r1, r4, r5
 80046c6:	42a3      	cmp	r3, r4
 80046c8:	6025      	str	r5, [r4, #0]
 80046ca:	bf18      	it	ne
 80046cc:	6059      	strne	r1, [r3, #4]
 80046ce:	6863      	ldr	r3, [r4, #4]
 80046d0:	bf08      	it	eq
 80046d2:	6031      	streq	r1, [r6, #0]
 80046d4:	5162      	str	r2, [r4, r5]
 80046d6:	604b      	str	r3, [r1, #4]
 80046d8:	4638      	mov	r0, r7
 80046da:	f104 060b 	add.w	r6, r4, #11
 80046de:	f000 f913 	bl	8004908 <__malloc_unlock>
 80046e2:	f026 0607 	bic.w	r6, r6, #7
 80046e6:	1d23      	adds	r3, r4, #4
 80046e8:	1af2      	subs	r2, r6, r3
 80046ea:	d0b6      	beq.n	800465a <_malloc_r+0x22>
 80046ec:	1b9b      	subs	r3, r3, r6
 80046ee:	50a3      	str	r3, [r4, r2]
 80046f0:	e7b3      	b.n	800465a <_malloc_r+0x22>
 80046f2:	6862      	ldr	r2, [r4, #4]
 80046f4:	42a3      	cmp	r3, r4
 80046f6:	bf0c      	ite	eq
 80046f8:	6032      	streq	r2, [r6, #0]
 80046fa:	605a      	strne	r2, [r3, #4]
 80046fc:	e7ec      	b.n	80046d8 <_malloc_r+0xa0>
 80046fe:	4623      	mov	r3, r4
 8004700:	6864      	ldr	r4, [r4, #4]
 8004702:	e7b2      	b.n	800466a <_malloc_r+0x32>
 8004704:	4634      	mov	r4, r6
 8004706:	6876      	ldr	r6, [r6, #4]
 8004708:	e7b9      	b.n	800467e <_malloc_r+0x46>
 800470a:	230c      	movs	r3, #12
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	4638      	mov	r0, r7
 8004710:	f000 f8fa 	bl	8004908 <__malloc_unlock>
 8004714:	e7a1      	b.n	800465a <_malloc_r+0x22>
 8004716:	6025      	str	r5, [r4, #0]
 8004718:	e7de      	b.n	80046d8 <_malloc_r+0xa0>
 800471a:	bf00      	nop
 800471c:	20000600 	.word	0x20000600

08004720 <_sbrk_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4d06      	ldr	r5, [pc, #24]	; (800473c <_sbrk_r+0x1c>)
 8004724:	2300      	movs	r3, #0
 8004726:	4604      	mov	r4, r0
 8004728:	4608      	mov	r0, r1
 800472a:	602b      	str	r3, [r5, #0]
 800472c:	f7fc fa34 	bl	8000b98 <_sbrk>
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d102      	bne.n	800473a <_sbrk_r+0x1a>
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	b103      	cbz	r3, 800473a <_sbrk_r+0x1a>
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	bd38      	pop	{r3, r4, r5, pc}
 800473c:	20000608 	.word	0x20000608

08004740 <_raise_r>:
 8004740:	291f      	cmp	r1, #31
 8004742:	b538      	push	{r3, r4, r5, lr}
 8004744:	4604      	mov	r4, r0
 8004746:	460d      	mov	r5, r1
 8004748:	d904      	bls.n	8004754 <_raise_r+0x14>
 800474a:	2316      	movs	r3, #22
 800474c:	6003      	str	r3, [r0, #0]
 800474e:	f04f 30ff 	mov.w	r0, #4294967295
 8004752:	bd38      	pop	{r3, r4, r5, pc}
 8004754:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004756:	b112      	cbz	r2, 800475e <_raise_r+0x1e>
 8004758:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800475c:	b94b      	cbnz	r3, 8004772 <_raise_r+0x32>
 800475e:	4620      	mov	r0, r4
 8004760:	f000 f830 	bl	80047c4 <_getpid_r>
 8004764:	462a      	mov	r2, r5
 8004766:	4601      	mov	r1, r0
 8004768:	4620      	mov	r0, r4
 800476a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800476e:	f000 b817 	b.w	80047a0 <_kill_r>
 8004772:	2b01      	cmp	r3, #1
 8004774:	d00a      	beq.n	800478c <_raise_r+0x4c>
 8004776:	1c59      	adds	r1, r3, #1
 8004778:	d103      	bne.n	8004782 <_raise_r+0x42>
 800477a:	2316      	movs	r3, #22
 800477c:	6003      	str	r3, [r0, #0]
 800477e:	2001      	movs	r0, #1
 8004780:	e7e7      	b.n	8004752 <_raise_r+0x12>
 8004782:	2400      	movs	r4, #0
 8004784:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004788:	4628      	mov	r0, r5
 800478a:	4798      	blx	r3
 800478c:	2000      	movs	r0, #0
 800478e:	e7e0      	b.n	8004752 <_raise_r+0x12>

08004790 <raise>:
 8004790:	4b02      	ldr	r3, [pc, #8]	; (800479c <raise+0xc>)
 8004792:	4601      	mov	r1, r0
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	f7ff bfd3 	b.w	8004740 <_raise_r>
 800479a:	bf00      	nop
 800479c:	20000014 	.word	0x20000014

080047a0 <_kill_r>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	4d07      	ldr	r5, [pc, #28]	; (80047c0 <_kill_r+0x20>)
 80047a4:	2300      	movs	r3, #0
 80047a6:	4604      	mov	r4, r0
 80047a8:	4608      	mov	r0, r1
 80047aa:	4611      	mov	r1, r2
 80047ac:	602b      	str	r3, [r5, #0]
 80047ae:	f7fc f96b 	bl	8000a88 <_kill>
 80047b2:	1c43      	adds	r3, r0, #1
 80047b4:	d102      	bne.n	80047bc <_kill_r+0x1c>
 80047b6:	682b      	ldr	r3, [r5, #0]
 80047b8:	b103      	cbz	r3, 80047bc <_kill_r+0x1c>
 80047ba:	6023      	str	r3, [r4, #0]
 80047bc:	bd38      	pop	{r3, r4, r5, pc}
 80047be:	bf00      	nop
 80047c0:	20000608 	.word	0x20000608

080047c4 <_getpid_r>:
 80047c4:	f7fc b958 	b.w	8000a78 <_getpid>

080047c8 <__sread>:
 80047c8:	b510      	push	{r4, lr}
 80047ca:	460c      	mov	r4, r1
 80047cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047d0:	f000 f8a0 	bl	8004914 <_read_r>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	bfab      	itete	ge
 80047d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047da:	89a3      	ldrhlt	r3, [r4, #12]
 80047dc:	181b      	addge	r3, r3, r0
 80047de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047e2:	bfac      	ite	ge
 80047e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80047e6:	81a3      	strhlt	r3, [r4, #12]
 80047e8:	bd10      	pop	{r4, pc}

080047ea <__swrite>:
 80047ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047ee:	461f      	mov	r7, r3
 80047f0:	898b      	ldrh	r3, [r1, #12]
 80047f2:	05db      	lsls	r3, r3, #23
 80047f4:	4605      	mov	r5, r0
 80047f6:	460c      	mov	r4, r1
 80047f8:	4616      	mov	r6, r2
 80047fa:	d505      	bpl.n	8004808 <__swrite+0x1e>
 80047fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004800:	2302      	movs	r3, #2
 8004802:	2200      	movs	r2, #0
 8004804:	f000 f868 	bl	80048d8 <_lseek_r>
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800480e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004812:	81a3      	strh	r3, [r4, #12]
 8004814:	4632      	mov	r2, r6
 8004816:	463b      	mov	r3, r7
 8004818:	4628      	mov	r0, r5
 800481a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800481e:	f000 b817 	b.w	8004850 <_write_r>

08004822 <__sseek>:
 8004822:	b510      	push	{r4, lr}
 8004824:	460c      	mov	r4, r1
 8004826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800482a:	f000 f855 	bl	80048d8 <_lseek_r>
 800482e:	1c43      	adds	r3, r0, #1
 8004830:	89a3      	ldrh	r3, [r4, #12]
 8004832:	bf15      	itete	ne
 8004834:	6560      	strne	r0, [r4, #84]	; 0x54
 8004836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800483a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800483e:	81a3      	strheq	r3, [r4, #12]
 8004840:	bf18      	it	ne
 8004842:	81a3      	strhne	r3, [r4, #12]
 8004844:	bd10      	pop	{r4, pc}

08004846 <__sclose>:
 8004846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484a:	f000 b813 	b.w	8004874 <_close_r>
	...

08004850 <_write_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4d07      	ldr	r5, [pc, #28]	; (8004870 <_write_r+0x20>)
 8004854:	4604      	mov	r4, r0
 8004856:	4608      	mov	r0, r1
 8004858:	4611      	mov	r1, r2
 800485a:	2200      	movs	r2, #0
 800485c:	602a      	str	r2, [r5, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	f7fc f949 	bl	8000af6 <_write>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <_write_r+0x1e>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	b103      	cbz	r3, 800486e <_write_r+0x1e>
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	20000608 	.word	0x20000608

08004874 <_close_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4d06      	ldr	r5, [pc, #24]	; (8004890 <_close_r+0x1c>)
 8004878:	2300      	movs	r3, #0
 800487a:	4604      	mov	r4, r0
 800487c:	4608      	mov	r0, r1
 800487e:	602b      	str	r3, [r5, #0]
 8004880:	f7fc f955 	bl	8000b2e <_close>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	d102      	bne.n	800488e <_close_r+0x1a>
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	b103      	cbz	r3, 800488e <_close_r+0x1a>
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	bd38      	pop	{r3, r4, r5, pc}
 8004890:	20000608 	.word	0x20000608

08004894 <_fstat_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4d07      	ldr	r5, [pc, #28]	; (80048b4 <_fstat_r+0x20>)
 8004898:	2300      	movs	r3, #0
 800489a:	4604      	mov	r4, r0
 800489c:	4608      	mov	r0, r1
 800489e:	4611      	mov	r1, r2
 80048a0:	602b      	str	r3, [r5, #0]
 80048a2:	f7fc f950 	bl	8000b46 <_fstat>
 80048a6:	1c43      	adds	r3, r0, #1
 80048a8:	d102      	bne.n	80048b0 <_fstat_r+0x1c>
 80048aa:	682b      	ldr	r3, [r5, #0]
 80048ac:	b103      	cbz	r3, 80048b0 <_fstat_r+0x1c>
 80048ae:	6023      	str	r3, [r4, #0]
 80048b0:	bd38      	pop	{r3, r4, r5, pc}
 80048b2:	bf00      	nop
 80048b4:	20000608 	.word	0x20000608

080048b8 <_isatty_r>:
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	4d06      	ldr	r5, [pc, #24]	; (80048d4 <_isatty_r+0x1c>)
 80048bc:	2300      	movs	r3, #0
 80048be:	4604      	mov	r4, r0
 80048c0:	4608      	mov	r0, r1
 80048c2:	602b      	str	r3, [r5, #0]
 80048c4:	f7fc f94f 	bl	8000b66 <_isatty>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	d102      	bne.n	80048d2 <_isatty_r+0x1a>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	b103      	cbz	r3, 80048d2 <_isatty_r+0x1a>
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	bd38      	pop	{r3, r4, r5, pc}
 80048d4:	20000608 	.word	0x20000608

080048d8 <_lseek_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4d07      	ldr	r5, [pc, #28]	; (80048f8 <_lseek_r+0x20>)
 80048dc:	4604      	mov	r4, r0
 80048de:	4608      	mov	r0, r1
 80048e0:	4611      	mov	r1, r2
 80048e2:	2200      	movs	r2, #0
 80048e4:	602a      	str	r2, [r5, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f7fc f948 	bl	8000b7c <_lseek>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	d102      	bne.n	80048f6 <_lseek_r+0x1e>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	b103      	cbz	r3, 80048f6 <_lseek_r+0x1e>
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
 80048f8:	20000608 	.word	0x20000608

080048fc <__malloc_lock>:
 80048fc:	4801      	ldr	r0, [pc, #4]	; (8004904 <__malloc_lock+0x8>)
 80048fe:	f7ff bdc7 	b.w	8004490 <__retarget_lock_acquire_recursive>
 8004902:	bf00      	nop
 8004904:	200005fc 	.word	0x200005fc

08004908 <__malloc_unlock>:
 8004908:	4801      	ldr	r0, [pc, #4]	; (8004910 <__malloc_unlock+0x8>)
 800490a:	f7ff bdc2 	b.w	8004492 <__retarget_lock_release_recursive>
 800490e:	bf00      	nop
 8004910:	200005fc 	.word	0x200005fc

08004914 <_read_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4d07      	ldr	r5, [pc, #28]	; (8004934 <_read_r+0x20>)
 8004918:	4604      	mov	r4, r0
 800491a:	4608      	mov	r0, r1
 800491c:	4611      	mov	r1, r2
 800491e:	2200      	movs	r2, #0
 8004920:	602a      	str	r2, [r5, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	f7fc f8ca 	bl	8000abc <_read>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_read_r+0x1e>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	b103      	cbz	r3, 8004932 <_read_r+0x1e>
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	20000608 	.word	0x20000608

08004938 <_init>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	bf00      	nop
 800493c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493e:	bc08      	pop	{r3}
 8004940:	469e      	mov	lr, r3
 8004942:	4770      	bx	lr

08004944 <_fini>:
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	bf00      	nop
 8004948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494a:	bc08      	pop	{r3}
 800494c:	469e      	mov	lr, r3
 800494e:	4770      	bx	lr

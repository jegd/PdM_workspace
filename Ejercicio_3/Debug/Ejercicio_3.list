
Ejercicio_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003138  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080032fc  080032fc  000132fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800331c  0800331c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003324  08003324  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003324  08003324  00013324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003328  08003328  00013328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800332c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  2000000c  08003338  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  08003338  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb08  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cec  00000000  00000000  0002cb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0002e830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002f228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ddc  00000000  00000000  0002fb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb97  00000000  00000000  00050944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6994  00000000  00000000  0005d4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123e6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028fc  00000000  00000000  00123ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080032e4 	.word	0x080032e4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080032e4 	.word	0x080032e4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fb61 	bl	8000bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f867 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f929 	bl	800076c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800051a:	f000 f8cf 	bl	80006bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800051e:	f000 f8f7 	bl	8000710 <MX_USB_OTG_FS_PCD_Init>

//Duraciones de delays ms
tick_t duracion_1=200;;
 8000522:	23c8      	movs	r3, #200	; 0xc8
 8000524:	61bb      	str	r3, [r7, #24]
delay_t delay_1;
//Vector con leds
uint16_t led[3] = {LD1_Pin,LD2_Pin,LD3_Pin};
 8000526:	4a2d      	ldr	r2, [pc, #180]	; (80005dc <main+0xd4>)
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800052e:	6018      	str	r0, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	8019      	strh	r1, [r3, #0]
delayInit(&delay_1,duracion_1);
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	69b9      	ldr	r1, [r7, #24]
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fb0f 	bl	8000b5e <delayInit>
#define numero_luces 3
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
uint8_t i=0;
 8000540:	2300      	movs	r3, #0
 8000542:	77fb      	strb	r3, [r7, #31]
  while (1)
  {
	if(!(delayRead(&delay_1)))
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fb19 	bl	8000b80 <delayRead>
 800054e:	4603      	mov	r3, r0
 8000550:	f083 0301 	eor.w	r3, r3, #1
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0f4      	beq.n	8000544 <main+0x3c>
		{
		  i++;
 800055a:	7ffb      	ldrb	r3, [r7, #31]
 800055c:	3301      	adds	r3, #1
 800055e:	77fb      	strb	r3, [r7, #31]
			  switch(i)
 8000560:	7ffb      	ldrb	r3, [r7, #31]
 8000562:	3b01      	subs	r3, #1
 8000564:	2b05      	cmp	r3, #5
 8000566:	d833      	bhi.n	80005d0 <main+0xc8>
 8000568:	a201      	add	r2, pc, #4	; (adr r2, 8000570 <main+0x68>)
 800056a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056e:	bf00      	nop
 8000570:	08000589 	.word	0x08000589
 8000574:	08000595 	.word	0x08000595
 8000578:	080005a1 	.word	0x080005a1
 800057c:	080005ad 	.word	0x080005ad
 8000580:	080005b9 	.word	0x080005b9
 8000584:	080005c5 	.word	0x080005c5
			  {
			  case 1:
				  HAL_GPIO_TogglePin(GPIOB, led[0]);
 8000588:	88bb      	ldrh	r3, [r7, #4]
 800058a:	4619      	mov	r1, r3
 800058c:	4814      	ldr	r0, [pc, #80]	; (80005e0 <main+0xd8>)
 800058e:	f000 fe4a 	bl	8001226 <HAL_GPIO_TogglePin>
				  break;
 8000592:	e01d      	b.n	80005d0 <main+0xc8>
			  case 2:
				  HAL_GPIO_TogglePin(GPIOB, led[0]);
 8000594:	88bb      	ldrh	r3, [r7, #4]
 8000596:	4619      	mov	r1, r3
 8000598:	4811      	ldr	r0, [pc, #68]	; (80005e0 <main+0xd8>)
 800059a:	f000 fe44 	bl	8001226 <HAL_GPIO_TogglePin>
				  break;
 800059e:	e017      	b.n	80005d0 <main+0xc8>
			  case 3:
				  HAL_GPIO_TogglePin(GPIOB, led[1]);
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	4619      	mov	r1, r3
 80005a4:	480e      	ldr	r0, [pc, #56]	; (80005e0 <main+0xd8>)
 80005a6:	f000 fe3e 	bl	8001226 <HAL_GPIO_TogglePin>
			  	  break;
 80005aa:	e011      	b.n	80005d0 <main+0xc8>
			  case 4:
				  HAL_GPIO_TogglePin(GPIOB, led[1]);
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	4619      	mov	r1, r3
 80005b0:	480b      	ldr	r0, [pc, #44]	; (80005e0 <main+0xd8>)
 80005b2:	f000 fe38 	bl	8001226 <HAL_GPIO_TogglePin>
			  	  break;
 80005b6:	e00b      	b.n	80005d0 <main+0xc8>
			  case 5:
				  HAL_GPIO_TogglePin(GPIOB, led[2]);
 80005b8:	893b      	ldrh	r3, [r7, #8]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <main+0xd8>)
 80005be:	f000 fe32 	bl	8001226 <HAL_GPIO_TogglePin>
				  break;
 80005c2:	e005      	b.n	80005d0 <main+0xc8>
			  case 6:
				  HAL_GPIO_TogglePin(GPIOB, led[2]);
 80005c4:	893b      	ldrh	r3, [r7, #8]
 80005c6:	4619      	mov	r1, r3
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <main+0xd8>)
 80005ca:	f000 fe2c 	bl	8001226 <HAL_GPIO_TogglePin>
				  break;
 80005ce:	bf00      	nop

			  }
			  if(i>6)
 80005d0:	7ffb      	ldrb	r3, [r7, #31]
 80005d2:	2b06      	cmp	r3, #6
 80005d4:	d9b6      	bls.n	8000544 <main+0x3c>
				  i=0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	77fb      	strb	r3, [r7, #31]
	if(!(delayRead(&delay_1)))
 80005da:	e7b3      	b.n	8000544 <main+0x3c>
 80005dc:	080032fc 	.word	0x080032fc
 80005e0:	40020400 	.word	0x40020400

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2234      	movs	r2, #52	; 0x34
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fe6e 	bl	80032d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <SystemClock_Config+0xd0>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a22      	ldr	r2, [pc, #136]	; (80006b8 <SystemClock_Config+0xd4>)
 800062e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <SystemClock_Config+0xd4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000644:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000658:	23a8      	movs	r3, #168	; 0xa8
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000660:	2307      	movs	r3, #7
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fdb1 	bl	80021d4 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000678:	f000 f926 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000688:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2105      	movs	r1, #5
 800069a:	4618      	mov	r0, r3
 800069c:	f000 ff26 	bl	80014ec <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a6:	f000 f90f 	bl	80008c8 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_USART3_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006f4:	f002 f80c 	bl	8002710 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f8e3 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000028 	.word	0x20000028
 800070c:	40004800 	.word	0x40004800

08000710 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000716:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800071a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071e:	2206      	movs	r2, #6
 8000720:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000724:	2202      	movs	r2, #2
 8000726:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000730:	2202      	movs	r2, #2
 8000732:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000736:	2201      	movs	r2, #1
 8000738:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000748:	2201      	movs	r2, #1
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000754:	f000 fd81 	bl	800125a <HAL_PCD_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f8b3 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000006c 	.word	0x2000006c

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <MX_GPIO_Init+0x14c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a4b      	ldr	r2, [pc, #300]	; (80008b8 <MX_GPIO_Init+0x14c>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b49      	ldr	r3, [pc, #292]	; (80008b8 <MX_GPIO_Init+0x14c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	4b45      	ldr	r3, [pc, #276]	; (80008b8 <MX_GPIO_Init+0x14c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a44      	ldr	r2, [pc, #272]	; (80008b8 <MX_GPIO_Init+0x14c>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b42      	ldr	r3, [pc, #264]	; (80008b8 <MX_GPIO_Init+0x14c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b3e      	ldr	r3, [pc, #248]	; (80008b8 <MX_GPIO_Init+0x14c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a3d      	ldr	r2, [pc, #244]	; (80008b8 <MX_GPIO_Init+0x14c>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b3b      	ldr	r3, [pc, #236]	; (80008b8 <MX_GPIO_Init+0x14c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <MX_GPIO_Init+0x14c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a36      	ldr	r2, [pc, #216]	; (80008b8 <MX_GPIO_Init+0x14c>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <MX_GPIO_Init+0x14c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <MX_GPIO_Init+0x14c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a2f      	ldr	r2, [pc, #188]	; (80008b8 <MX_GPIO_Init+0x14c>)
 80007fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <MX_GPIO_Init+0x14c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <MX_GPIO_Init+0x14c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a28      	ldr	r2, [pc, #160]	; (80008b8 <MX_GPIO_Init+0x14c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <MX_GPIO_Init+0x14c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000830:	4822      	ldr	r0, [pc, #136]	; (80008bc <MX_GPIO_Init+0x150>)
 8000832:	f000 fcdf 	bl	80011f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	4821      	ldr	r0, [pc, #132]	; (80008c0 <MX_GPIO_Init+0x154>)
 800083c:	f000 fcda 	bl	80011f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000846:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	481b      	ldr	r0, [pc, #108]	; (80008c4 <MX_GPIO_Init+0x158>)
 8000858:	f000 fb38 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800085c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	4811      	ldr	r0, [pc, #68]	; (80008bc <MX_GPIO_Init+0x150>)
 8000876:	f000 fb29 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <MX_GPIO_Init+0x154>)
 8000892:	f000 fb1b 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_GPIO_Init+0x154>)
 80008aa:	f000 fb0f 	bl	8000ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ae:	bf00      	nop
 80008b0:	3730      	adds	r7, #48	; 0x30
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40021800 	.word	0x40021800
 80008c4:	40020800 	.word	0x40020800

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a0f      	ldr	r2, [pc, #60]	; (8000920 <HAL_MspInit+0x4c>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x4c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a19      	ldr	r2, [pc, #100]	; (80009a8 <HAL_UART_MspInit+0x84>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d12c      	bne.n	80009a0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <HAL_UART_MspInit+0x88>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_UART_MspInit+0x88>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800097e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000990:	2307      	movs	r3, #7
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <HAL_UART_MspInit+0x8c>)
 800099c:	f000 fa96 	bl	8000ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	; 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40004800 	.word	0x40004800
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020c00 	.word	0x40020c00

080009b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b0a0      	sub	sp, #128	; 0x80
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	225c      	movs	r2, #92	; 0x5c
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f002 fc7d 	bl	80032d4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009e2:	d14e      	bne.n	8000a82 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80009e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80009ea:	2300      	movs	r3, #0
 80009ec:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fe94 	bl	8001720 <HAL_RCCEx_PeriphCLKConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80009fe:	f7ff ff63 	bl	80008c8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <HAL_PCD_MspInit+0xd8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a20      	ldr	r2, [pc, #128]	; (8000a8c <HAL_PCD_MspInit+0xd8>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <HAL_PCD_MspInit+0xd8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a1e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a22:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a30:	230a      	movs	r3, #10
 8000a32:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4815      	ldr	r0, [pc, #84]	; (8000a90 <HAL_PCD_MspInit+0xdc>)
 8000a3c:	f000 fa46 	bl	8000ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a44:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a52:	4619      	mov	r1, r3
 8000a54:	480e      	ldr	r0, [pc, #56]	; (8000a90 <HAL_PCD_MspInit+0xdc>)
 8000a56:	f000 fa39 	bl	8000ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_PCD_MspInit+0xd8>)
 8000a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <HAL_PCD_MspInit+0xd8>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	6353      	str	r3, [r2, #52]	; 0x34
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_PCD_MspInit+0xd8>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_PCD_MspInit+0xd8>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_PCD_MspInit+0xd8>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3780      	adds	r7, #128	; 0x80
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f8ca 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <SystemInit+0x20>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <SystemInit+0x20>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b12:	490e      	ldr	r1, [pc, #56]	; (8000b4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b28:	4c0b      	ldr	r4, [pc, #44]	; (8000b58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b36:	f7ff ffd7 	bl	8000ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f002 fba7 	bl	800328c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3e:	f7ff fce3 	bl	8000508 <main>
  bx  lr    
 8000b42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b50:	0800332c 	.word	0x0800332c
  ldr r2, =_sbss
 8000b54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b58:	2000057c 	.word	0x2000057c

08000b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC_IRQHandler>

08000b5e <delayInit>:

#include "Api_delay.h"
void delayInit( delay_t * delay, tick_t duration ){
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	6039      	str	r1, [r7, #0]

 delay->duration= duration;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 delay->running=false;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	721a      	strb	r2, [r3, #8]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <delayRead>:

bool_t delayRead( delay_t * delay ){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

	if((delay->running)==false ){
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	7a1b      	ldrb	r3, [r3, #8]
 8000b8c:	f083 0301 	eor.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d007      	beq.n	8000ba6 <delayRead+0x26>
		delay->startTime = HAL_GetTick();
 8000b96:	f000 f883 	bl	8000ca0 <HAL_GetTick>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	721a      	strb	r2, [r3, #8]
	}

	if(delay->running){
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	7a1b      	ldrb	r3, [r3, #8]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00c      	beq.n	8000bc8 <delayRead+0x48>
		if((HAL_GetTick()-(delay->startTime))>=delay->duration){
 8000bae:	f000 f877 	bl	8000ca0 <HAL_GetTick>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	1ad2      	subs	r2, r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d302      	bcc.n	8000bc8 <delayRead+0x48>
			delay->running = false;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	721a      	strb	r2, [r3, #8]
		}
	}
return delay->running;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7a1b      	ldrb	r3, [r3, #8]

}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <HAL_Init+0x40>)
 8000bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <HAL_Init+0x40>)
 8000bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <HAL_Init+0x40>)
 8000bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 f931 	bl	8000e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f000 f808 	bl	8000c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c08:	f7ff fe64 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023c00 	.word	0x40023c00

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x54>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_InitTick+0x58>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f93b 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00e      	b.n	8000c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d80a      	bhi.n	8000c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f000 f911 	bl	8000e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c58:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <HAL_InitTick+0x5c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x20>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_IncTick+0x24>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <HAL_IncTick+0x24>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000578 	.word	0x20000578

08000ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <HAL_GetTick+0x14>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000578 	.word	0x20000578

08000cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc0:	f7ff ffee 	bl	8000ca0 <HAL_GetTick>
 8000cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd0:	d005      	beq.n	8000cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <HAL_Delay+0x44>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4413      	add	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cde:	bf00      	nop
 8000ce0:	f7ff ffde 	bl	8000ca0 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d8f7      	bhi.n	8000ce0 <HAL_Delay+0x28>
  {
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008

08000d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <__NVIC_GetPriorityGrouping+0x18>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	f003 0307 	and.w	r3, r3, #7
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db0a      	blt.n	8000d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	490c      	ldr	r1, [pc, #48]	; (8000db0 <__NVIC_SetPriority+0x4c>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	440b      	add	r3, r1
 8000d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d8c:	e00a      	b.n	8000da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4908      	ldr	r1, [pc, #32]	; (8000db4 <__NVIC_SetPriority+0x50>)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	3b04      	subs	r3, #4
 8000d9c:	0112      	lsls	r2, r2, #4
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	440b      	add	r3, r1
 8000da2:	761a      	strb	r2, [r3, #24]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f1c3 0307 	rsb	r3, r3, #7
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	bf28      	it	cs
 8000dd6:	2304      	movcs	r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d902      	bls.n	8000de8 <NVIC_EncodePriority+0x30>
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3b03      	subs	r3, #3
 8000de6:	e000      	b.n	8000dea <NVIC_EncodePriority+0x32>
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43da      	mvns	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	43d9      	mvns	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	4313      	orrs	r3, r2
         );
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3724      	adds	r7, #36	; 0x24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e30:	d301      	bcc.n	8000e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00f      	b.n	8000e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <SysTick_Config+0x40>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3e:	210f      	movs	r1, #15
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f7ff ff8e 	bl	8000d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <SysTick_Config+0x40>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <SysTick_Config+0x40>)
 8000e50:	2207      	movs	r2, #7
 8000e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010

08000e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff47 	bl	8000d00 <__NVIC_SetPriorityGrouping>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8c:	f7ff ff5c 	bl	8000d48 <__NVIC_GetPriorityGrouping>
 8000e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f7ff ff8e 	bl	8000db8 <NVIC_EncodePriority>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5d 	bl	8000d64 <__NVIC_SetPriority>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ffb0 	bl	8000e20 <SysTick_Config>
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	e165      	b.n	80011b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 8154 	bne.w	80011ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d005      	beq.n	8000f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d130      	bne.n	8000f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f003 0201 	and.w	r2, r3, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d017      	beq.n	8000fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d123      	bne.n	8001010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	69b9      	ldr	r1, [r7, #24]
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80ae 	beq.w	80011ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b5d      	ldr	r3, [pc, #372]	; (80011cc <HAL_GPIO_Init+0x300>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a5c      	ldr	r2, [pc, #368]	; (80011cc <HAL_GPIO_Init+0x300>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b5a      	ldr	r3, [pc, #360]	; (80011cc <HAL_GPIO_Init+0x300>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106e:	4a58      	ldr	r2, [pc, #352]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4f      	ldr	r2, [pc, #316]	; (80011d4 <HAL_GPIO_Init+0x308>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d025      	beq.n	80010e6 <HAL_GPIO_Init+0x21a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4e      	ldr	r2, [pc, #312]	; (80011d8 <HAL_GPIO_Init+0x30c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01f      	beq.n	80010e2 <HAL_GPIO_Init+0x216>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4d      	ldr	r2, [pc, #308]	; (80011dc <HAL_GPIO_Init+0x310>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d019      	beq.n	80010de <HAL_GPIO_Init+0x212>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4c      	ldr	r2, [pc, #304]	; (80011e0 <HAL_GPIO_Init+0x314>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0x20e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4b      	ldr	r2, [pc, #300]	; (80011e4 <HAL_GPIO_Init+0x318>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00d      	beq.n	80010d6 <HAL_GPIO_Init+0x20a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4a      	ldr	r2, [pc, #296]	; (80011e8 <HAL_GPIO_Init+0x31c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x206>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a49      	ldr	r2, [pc, #292]	; (80011ec <HAL_GPIO_Init+0x320>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_GPIO_Init+0x202>
 80010ca:	2306      	movs	r3, #6
 80010cc:	e00c      	b.n	80010e8 <HAL_GPIO_Init+0x21c>
 80010ce:	2307      	movs	r3, #7
 80010d0:	e00a      	b.n	80010e8 <HAL_GPIO_Init+0x21c>
 80010d2:	2305      	movs	r3, #5
 80010d4:	e008      	b.n	80010e8 <HAL_GPIO_Init+0x21c>
 80010d6:	2304      	movs	r3, #4
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x21c>
 80010da:	2303      	movs	r3, #3
 80010dc:	e004      	b.n	80010e8 <HAL_GPIO_Init+0x21c>
 80010de:	2302      	movs	r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x21c>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x21c>
 80010e6:	2300      	movs	r3, #0
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	f002 0203 	and.w	r2, r2, #3
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4093      	lsls	r3, r2
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f8:	4935      	ldr	r1, [pc, #212]	; (80011d0 <HAL_GPIO_Init+0x304>)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001106:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <HAL_GPIO_Init+0x324>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112a:	4a31      	ldr	r2, [pc, #196]	; (80011f0 <HAL_GPIO_Init+0x324>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001130:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <HAL_GPIO_Init+0x324>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001154:	4a26      	ldr	r2, [pc, #152]	; (80011f0 <HAL_GPIO_Init+0x324>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800115a:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <HAL_GPIO_Init+0x324>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800117e:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <HAL_GPIO_Init+0x324>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <HAL_GPIO_Init+0x324>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a8:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <HAL_GPIO_Init+0x324>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	f67f ae96 	bls.w	8000ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40013800 	.word	0x40013800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40021400 	.word	0x40021400
 80011ec:	40021800 	.word	0x40021800
 80011f0:	40013c00 	.word	0x40013c00

080011f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
 8001200:	4613      	mov	r3, r2
 8001202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001204:	787b      	ldrb	r3, [r7, #1]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001210:	e003      	b.n	800121a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	041a      	lsls	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	619a      	str	r2, [r3, #24]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001226:	b480      	push	{r7}
 8001228:	b085      	sub	sp, #20
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001238:	887a      	ldrh	r2, [r7, #2]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4013      	ands	r3, r2
 800123e:	041a      	lsls	r2, r3, #16
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43d9      	mvns	r1, r3
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	400b      	ands	r3, r1
 8001248:	431a      	orrs	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	619a      	str	r2, [r3, #24]
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800125a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125c:	b08f      	sub	sp, #60	; 0x3c
 800125e:	af0a      	add	r7, sp, #40	; 0x28
 8001260:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e116      	b.n	800149a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d106      	bne.n	800128c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fb94 	bl	80009b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2203      	movs	r2, #3
 8001290:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 fd53 	bl	8002d56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	687e      	ldr	r6, [r7, #4]
 80012b8:	466d      	mov	r5, sp
 80012ba:	f106 0410 	add.w	r4, r6, #16
 80012be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80012ce:	1d33      	adds	r3, r6, #4
 80012d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f001 fcde 	bl	8002c94 <USB_CoreInit>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2202      	movs	r2, #2
 80012e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e0d7      	b.n	800149a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 fd41 	bl	8002d78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	e04a      	b.n	8001392 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4413      	add	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	333d      	adds	r3, #61	; 0x3d
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	333c      	adds	r3, #60	; 0x3c
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	b298      	uxth	r0, r3
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	3344      	adds	r3, #68	; 0x44
 8001338:	4602      	mov	r2, r0
 800133a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	3340      	adds	r3, #64	; 0x40
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	3348      	adds	r3, #72	; 0x48
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	334c      	adds	r3, #76	; 0x4c
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	3354      	adds	r3, #84	; 0x54
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	3301      	adds	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	7bfa      	ldrb	r2, [r7, #15]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	d3af      	bcc.n	80012fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e044      	b.n	800142c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4413      	add	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	3301      	adds	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	429a      	cmp	r2, r3
 8001434:	d3b5      	bcc.n	80013a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	687e      	ldr	r6, [r7, #4]
 800143e:	466d      	mov	r5, sp
 8001440:	f106 0410 	add.w	r4, r6, #16
 8001444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800144c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001450:	e885 0003 	stmia.w	r5, {r0, r1}
 8001454:	1d33      	adds	r3, r6, #4
 8001456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f001 fcd9 	bl	8002e10 <USB_DevInit>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2202      	movs	r2, #2
 8001468:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e014      	b.n	800149a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	2b01      	cmp	r3, #1
 8001486:	d102      	bne.n	800148e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f80a 	bl	80014a2 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f001 fe97 	bl	80031c6 <USB_DevDisconnect>

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014a2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	f043 0303 	orr.w	r3, r3, #3
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0cc      	b.n	800169a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001500:	4b68      	ldr	r3, [pc, #416]	; (80016a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 030f 	and.w	r3, r3, #15
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d90c      	bls.n	8001528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150e:	4b65      	ldr	r3, [pc, #404]	; (80016a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001516:	4b63      	ldr	r3, [pc, #396]	; (80016a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d001      	beq.n	8001528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0b8      	b.n	800169a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d020      	beq.n	8001576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001540:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4a58      	ldr	r2, [pc, #352]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800154a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001558:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	4a52      	ldr	r2, [pc, #328]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001564:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	494d      	ldr	r1, [pc, #308]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	4313      	orrs	r3, r2
 8001574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d044      	beq.n	800160c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d107      	bne.n	800159a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d119      	bne.n	80015ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e07f      	b.n	800169a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d003      	beq.n	80015aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d107      	bne.n	80015ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015aa:	4b3f      	ldr	r3, [pc, #252]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d109      	bne.n	80015ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e06f      	b.n	800169a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ba:	4b3b      	ldr	r3, [pc, #236]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e067      	b.n	800169a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ca:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f023 0203 	bic.w	r2, r3, #3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4934      	ldr	r1, [pc, #208]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015dc:	f7ff fb60 	bl	8000ca0 <HAL_GetTick>
 80015e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e2:	e00a      	b.n	80015fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e4:	f7ff fb5c 	bl	8000ca0 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e04f      	b.n	800169a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 020c 	and.w	r2, r3, #12
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	429a      	cmp	r2, r3
 800160a:	d1eb      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <HAL_RCC_ClockConfig+0x1b8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d20c      	bcs.n	8001634 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d001      	beq.n	8001634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e032      	b.n	800169a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4916      	ldr	r1, [pc, #88]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d009      	beq.n	8001672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	490e      	ldr	r1, [pc, #56]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	4313      	orrs	r3, r2
 8001670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001672:	f000 fb7f 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 8001676:	4602      	mov	r2, r0
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	490a      	ldr	r1, [pc, #40]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 8001684:	5ccb      	ldrb	r3, [r1, r3]
 8001686:	fa22 f303 	lsr.w	r3, r2, r3
 800168a:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fac0 	bl	8000c18 <HAL_InitTick>

  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023c00 	.word	0x40023c00
 80016a8:	40023800 	.word	0x40023800
 80016ac:	08003304 	.word	0x08003304
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000004 	.word	0x20000004

080016b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_RCC_GetHCLKFreq+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000000 	.word	0x20000000

080016d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016d4:	f7ff fff0 	bl	80016b8 <HAL_RCC_GetHCLKFreq>
 80016d8:	4602      	mov	r2, r0
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	0a9b      	lsrs	r3, r3, #10
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	4903      	ldr	r1, [pc, #12]	; (80016f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40023800 	.word	0x40023800
 80016f4:	08003314 	.word	0x08003314

080016f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016fc:	f7ff ffdc 	bl	80016b8 <HAL_RCC_GetHCLKFreq>
 8001700:	4602      	mov	r2, r0
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	0b5b      	lsrs	r3, r3, #13
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	4903      	ldr	r1, [pc, #12]	; (800171c <HAL_RCC_GetPCLK2Freq+0x24>)
 800170e:	5ccb      	ldrb	r3, [r1, r3]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001714:	4618      	mov	r0, r3
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	08003314 	.word	0x08003314

08001720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08c      	sub	sp, #48	; 0x30
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d010      	beq.n	800177a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001758:	4b6f      	ldr	r3, [pc, #444]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800175a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800175e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001766:	496c      	ldr	r1, [pc, #432]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001768:	4313      	orrs	r3, r2
 800176a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001776:	2301      	movs	r3, #1
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d010      	beq.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001786:	4b64      	ldr	r3, [pc, #400]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800178c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001794:	4960      	ldr	r1, [pc, #384]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001796:	4313      	orrs	r3, r2
 8001798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d017      	beq.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017b4:	4b58      	ldr	r3, [pc, #352]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4955      	ldr	r1, [pc, #340]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017d2:	d101      	bne.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80017d4:	2301      	movs	r3, #1
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80017e0:	2301      	movs	r3, #1
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d017      	beq.n	8001820 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80017f0:	4b49      	ldr	r3, [pc, #292]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fe:	4946      	ldr	r1, [pc, #280]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001800:	4313      	orrs	r3, r2
 8001802:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800180e:	d101      	bne.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001810:	2301      	movs	r3, #1
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800181c:	2301      	movs	r3, #1
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0320 	and.w	r3, r3, #32
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 808a 	beq.w	8001942 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a38      	ldr	r2, [pc, #224]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800184a:	4b34      	ldr	r3, [pc, #208]	; (800191c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a33      	ldr	r2, [pc, #204]	; (800191c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001854:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001856:	f7ff fa23 	bl	8000ca0 <HAL_GetTick>
 800185a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800185e:	f7ff fa1f 	bl	8000ca0 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e278      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800187c:	4b26      	ldr	r3, [pc, #152]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001884:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d02f      	beq.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001894:	6a3a      	ldr	r2, [r7, #32]
 8001896:	429a      	cmp	r2, r3
 8001898:	d028      	beq.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018a2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80018b0:	4a19      	ldr	r2, [pc, #100]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d114      	bne.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80018c2:	f7ff f9ed 	bl	8000ca0 <HAL_GetTick>
 80018c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff f9e9 	bl	8000ca0 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e240      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0ee      	beq.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018f8:	d114      	bne.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800190a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800190e:	4902      	ldr	r1, [pc, #8]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001910:	4313      	orrs	r3, r2
 8001912:	608b      	str	r3, [r1, #8]
 8001914:	e00c      	b.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40007000 	.word	0x40007000
 8001920:	42470e40 	.word	0x42470e40
 8001924:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4a49      	ldr	r2, [pc, #292]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800192a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800192e:	6093      	str	r3, [r2, #8]
 8001930:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001932:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193c:	4944      	ldr	r1, [pc, #272]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800193e:	4313      	orrs	r3, r2
 8001940:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001954:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001956:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00a      	beq.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001964:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4937      	ldr	r1, [pc, #220]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001974:	4313      	orrs	r3, r2
 8001976:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00a      	beq.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001986:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001994:	492e      	ldr	r1, [pc, #184]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001996:	4313      	orrs	r3, r2
 8001998:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d011      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80019a8:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ae:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b6:	4926      	ldr	r1, [pc, #152]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80019c6:	d101      	bne.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80019c8:	2301      	movs	r3, #1
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00a      	beq.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80019d8:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	491a      	ldr	r1, [pc, #104]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d011      	beq.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a00:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a08:	4911      	ldr	r1, [pc, #68]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a18:	d101      	bne.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d005      	beq.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a2c:	f040 80ff 	bne.w	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a36:	f7ff f933 	bl	8000ca0 <HAL_GetTick>
 8001a3a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a3c:	e00e      	b.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001a3e:	f7ff f92f 	bl	8000ca0 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d907      	bls.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e188      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	424711e0 	.word	0x424711e0
 8001a58:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a5c:	4b7e      	ldr	r3, [pc, #504]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1ea      	bne.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d009      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d028      	beq.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d124      	bne.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001a90:	4b71      	ldr	r3, [pc, #452]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a96:	0c1b      	lsrs	r3, r3, #16
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001aa2:	4b6d      	ldr	r3, [pc, #436]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aa8:	0e1b      	lsrs	r3, r3, #24
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	019b      	lsls	r3, r3, #6
 8001aba:	431a      	orrs	r2, r3
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	085b      	lsrs	r3, r3, #1
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	041b      	lsls	r3, r3, #16
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	061b      	lsls	r3, r3, #24
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	071b      	lsls	r3, r3, #28
 8001ad2:	4961      	ldr	r1, [pc, #388]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d004      	beq.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001aee:	d00a      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d035      	beq.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b04:	d130      	bne.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b06:	4b54      	ldr	r3, [pc, #336]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b0c:	0c1b      	lsrs	r3, r3, #16
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	3301      	adds	r3, #1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b18:	4b4f      	ldr	r3, [pc, #316]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b1e:	0f1b      	lsrs	r3, r3, #28
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	019b      	lsls	r3, r3, #6
 8001b30:	431a      	orrs	r2, r3
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	3b01      	subs	r3, #1
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	061b      	lsls	r3, r3, #24
 8001b42:	431a      	orrs	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	071b      	lsls	r3, r3, #28
 8001b48:	4943      	ldr	r1, [pc, #268]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b50:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b56:	f023 021f 	bic.w	r2, r3, #31
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	493d      	ldr	r1, [pc, #244]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d029      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b7c:	d124      	bne.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b7e:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b90:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b96:	0f1b      	lsrs	r3, r3, #28
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	019b      	lsls	r3, r3, #6
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	085b      	lsrs	r3, r3, #1
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	041b      	lsls	r3, r3, #16
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	061b      	lsls	r3, r3, #24
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	071b      	lsls	r3, r3, #28
 8001bc0:	4925      	ldr	r1, [pc, #148]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d016      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	019b      	lsls	r3, r3, #6
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	3b01      	subs	r3, #1
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	061b      	lsls	r3, r3, #24
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	071b      	lsls	r3, r3, #28
 8001bfa:	4917      	ldr	r1, [pc, #92]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c08:	f7ff f84a 	bl	8000ca0 <HAL_GetTick>
 8001c0c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c10:	f7ff f846 	bl	8000ca0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e09f      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	f040 8095 	bne.w	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c3c:	f7ff f830 	bl	8000ca0 <HAL_GetTick>
 8001c40:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c42:	e00f      	b.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c44:	f7ff f82c 	bl	8000ca0 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d908      	bls.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e085      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	42470068 	.word	0x42470068
 8001c60:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c64:	4b41      	ldr	r3, [pc, #260]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c70:	d0e8      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d02b      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d127      	bne.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001c9a:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca0:	0c1b      	lsrs	r3, r3, #16
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	019b      	lsls	r3, r3, #6
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	085b      	lsrs	r3, r3, #1
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	061b      	lsls	r3, r3, #24
 8001cc8:	4928      	ldr	r1, [pc, #160]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001cd0:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cd6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	4922      	ldr	r1, [pc, #136]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d01d      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cfe:	d118      	bne.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d00:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d06:	0e1b      	lsrs	r3, r3, #24
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	019b      	lsls	r3, r3, #6
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	085b      	lsrs	r3, r3, #1
 8001d20:	3b01      	subs	r3, #1
 8001d22:	041b      	lsls	r3, r3, #16
 8001d24:	431a      	orrs	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	061b      	lsls	r3, r3, #24
 8001d2a:	4910      	ldr	r1, [pc, #64]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001d32:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d38:	f7fe ffb2 	bl	8000ca0 <HAL_GetTick>
 8001d3c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001d40:	f7fe ffae 	bl	8000ca0 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e007      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d5e:	d1ef      	bne.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3730      	adds	r7, #48	; 0x30
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	42470070 	.word	0x42470070

08001d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d78:	b0ae      	sub	sp, #184	; 0xb8
 8001d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d9a:	4bcb      	ldr	r3, [pc, #812]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	f200 8206 	bhi.w	80021b4 <HAL_RCC_GetSysClockFreq+0x440>
 8001da8:	a201      	add	r2, pc, #4	; (adr r2, 8001db0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dae:	bf00      	nop
 8001db0:	08001de5 	.word	0x08001de5
 8001db4:	080021b5 	.word	0x080021b5
 8001db8:	080021b5 	.word	0x080021b5
 8001dbc:	080021b5 	.word	0x080021b5
 8001dc0:	08001ded 	.word	0x08001ded
 8001dc4:	080021b5 	.word	0x080021b5
 8001dc8:	080021b5 	.word	0x080021b5
 8001dcc:	080021b5 	.word	0x080021b5
 8001dd0:	08001df5 	.word	0x08001df5
 8001dd4:	080021b5 	.word	0x080021b5
 8001dd8:	080021b5 	.word	0x080021b5
 8001ddc:	080021b5 	.word	0x080021b5
 8001de0:	08001fe5 	.word	0x08001fe5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4bb9      	ldr	r3, [pc, #740]	; (80020cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001de6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001dea:	e1e7      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dec:	4bb8      	ldr	r3, [pc, #736]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001dee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001df2:	e1e3      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001df4:	4bb4      	ldr	r3, [pc, #720]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e00:	4bb1      	ldr	r3, [pc, #708]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d071      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0c:	4bae      	ldr	r3, [pc, #696]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	2200      	movs	r2, #0
 8001e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e18:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e32:	4622      	mov	r2, r4
 8001e34:	462b      	mov	r3, r5
 8001e36:	f04f 0000 	mov.w	r0, #0
 8001e3a:	f04f 0100 	mov.w	r1, #0
 8001e3e:	0159      	lsls	r1, r3, #5
 8001e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e44:	0150      	lsls	r0, r2, #5
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	1a51      	subs	r1, r2, r1
 8001e4e:	6439      	str	r1, [r7, #64]	; 0x40
 8001e50:	4629      	mov	r1, r5
 8001e52:	eb63 0301 	sbc.w	r3, r3, r1
 8001e56:	647b      	str	r3, [r7, #68]	; 0x44
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001e64:	4649      	mov	r1, r9
 8001e66:	018b      	lsls	r3, r1, #6
 8001e68:	4641      	mov	r1, r8
 8001e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e6e:	4641      	mov	r1, r8
 8001e70:	018a      	lsls	r2, r1, #6
 8001e72:	4641      	mov	r1, r8
 8001e74:	1a51      	subs	r1, r2, r1
 8001e76:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e78:	4649      	mov	r1, r9
 8001e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001e8c:	4649      	mov	r1, r9
 8001e8e:	00cb      	lsls	r3, r1, #3
 8001e90:	4641      	mov	r1, r8
 8001e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e96:	4641      	mov	r1, r8
 8001e98:	00ca      	lsls	r2, r1, #3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4622      	mov	r2, r4
 8001ea2:	189b      	adds	r3, r3, r2
 8001ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	460a      	mov	r2, r1
 8001eaa:	eb42 0303 	adc.w	r3, r2, r3
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	024b      	lsls	r3, r1, #9
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	024a      	lsls	r2, r1, #9
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ed8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001edc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ee0:	f7fe f990 	bl	8000204 <__aeabi_uldivmod>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4613      	mov	r3, r2
 8001eea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001eee:	e067      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef0:	4b75      	ldr	r3, [pc, #468]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	099b      	lsrs	r3, r3, #6
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001efc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001f00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f08:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f0e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001f12:	4622      	mov	r2, r4
 8001f14:	462b      	mov	r3, r5
 8001f16:	f04f 0000 	mov.w	r0, #0
 8001f1a:	f04f 0100 	mov.w	r1, #0
 8001f1e:	0159      	lsls	r1, r3, #5
 8001f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f24:	0150      	lsls	r0, r2, #5
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	1a51      	subs	r1, r2, r1
 8001f2e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f30:	4629      	mov	r1, r5
 8001f32:	eb63 0301 	sbc.w	r3, r3, r1
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001f44:	4649      	mov	r1, r9
 8001f46:	018b      	lsls	r3, r1, #6
 8001f48:	4641      	mov	r1, r8
 8001f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f4e:	4641      	mov	r1, r8
 8001f50:	018a      	lsls	r2, r1, #6
 8001f52:	4641      	mov	r1, r8
 8001f54:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f58:	4649      	mov	r1, r9
 8001f5a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f6a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f72:	4692      	mov	sl, r2
 8001f74:	469b      	mov	fp, r3
 8001f76:	4623      	mov	r3, r4
 8001f78:	eb1a 0303 	adds.w	r3, sl, r3
 8001f7c:	623b      	str	r3, [r7, #32]
 8001f7e:	462b      	mov	r3, r5
 8001f80:	eb4b 0303 	adc.w	r3, fp, r3
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f92:	4629      	mov	r1, r5
 8001f94:	028b      	lsls	r3, r1, #10
 8001f96:	4621      	mov	r1, r4
 8001f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	028a      	lsls	r2, r1, #10
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fa8:	2200      	movs	r2, #0
 8001faa:	673b      	str	r3, [r7, #112]	; 0x70
 8001fac:	677a      	str	r2, [r7, #116]	; 0x74
 8001fae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001fb2:	f7fe f927 	bl	8000204 <__aeabi_uldivmod>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4613      	mov	r3, r2
 8001fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fc0:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	0c1b      	lsrs	r3, r3, #16
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001fd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001fd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001fe2:	e0eb      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fe4:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ff0:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d06b      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffc:	4b32      	ldr	r3, [pc, #200]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	099b      	lsrs	r3, r3, #6
 8002002:	2200      	movs	r2, #0
 8002004:	66bb      	str	r3, [r7, #104]	; 0x68
 8002006:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800200a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800200e:	663b      	str	r3, [r7, #96]	; 0x60
 8002010:	2300      	movs	r3, #0
 8002012:	667b      	str	r3, [r7, #100]	; 0x64
 8002014:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002018:	4622      	mov	r2, r4
 800201a:	462b      	mov	r3, r5
 800201c:	f04f 0000 	mov.w	r0, #0
 8002020:	f04f 0100 	mov.w	r1, #0
 8002024:	0159      	lsls	r1, r3, #5
 8002026:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800202a:	0150      	lsls	r0, r2, #5
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4621      	mov	r1, r4
 8002032:	1a51      	subs	r1, r2, r1
 8002034:	61b9      	str	r1, [r7, #24]
 8002036:	4629      	mov	r1, r5
 8002038:	eb63 0301 	sbc.w	r3, r3, r1
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800204a:	4659      	mov	r1, fp
 800204c:	018b      	lsls	r3, r1, #6
 800204e:	4651      	mov	r1, sl
 8002050:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002054:	4651      	mov	r1, sl
 8002056:	018a      	lsls	r2, r1, #6
 8002058:	4651      	mov	r1, sl
 800205a:	ebb2 0801 	subs.w	r8, r2, r1
 800205e:	4659      	mov	r1, fp
 8002060:	eb63 0901 	sbc.w	r9, r3, r1
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002070:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002074:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002078:	4690      	mov	r8, r2
 800207a:	4699      	mov	r9, r3
 800207c:	4623      	mov	r3, r4
 800207e:	eb18 0303 	adds.w	r3, r8, r3
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	462b      	mov	r3, r5
 8002086:	eb49 0303 	adc.w	r3, r9, r3
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002098:	4629      	mov	r1, r5
 800209a:	024b      	lsls	r3, r1, #9
 800209c:	4621      	mov	r1, r4
 800209e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020a2:	4621      	mov	r1, r4
 80020a4:	024a      	lsls	r2, r1, #9
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020ae:	2200      	movs	r2, #0
 80020b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80020b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020b8:	f7fe f8a4 	bl	8000204 <__aeabi_uldivmod>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4613      	mov	r3, r2
 80020c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020c6:	e065      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x420>
 80020c8:	40023800 	.word	0x40023800
 80020cc:	00f42400 	.word	0x00f42400
 80020d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d4:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <HAL_RCC_GetSysClockFreq+0x458>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	2200      	movs	r2, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	4611      	mov	r1, r2
 80020e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020e4:	653b      	str	r3, [r7, #80]	; 0x50
 80020e6:	2300      	movs	r3, #0
 80020e8:	657b      	str	r3, [r7, #84]	; 0x54
 80020ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80020ee:	4642      	mov	r2, r8
 80020f0:	464b      	mov	r3, r9
 80020f2:	f04f 0000 	mov.w	r0, #0
 80020f6:	f04f 0100 	mov.w	r1, #0
 80020fa:	0159      	lsls	r1, r3, #5
 80020fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002100:	0150      	lsls	r0, r2, #5
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4641      	mov	r1, r8
 8002108:	1a51      	subs	r1, r2, r1
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	4649      	mov	r1, r9
 800210e:	eb63 0301 	sbc.w	r3, r3, r1
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002120:	4659      	mov	r1, fp
 8002122:	018b      	lsls	r3, r1, #6
 8002124:	4651      	mov	r1, sl
 8002126:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800212a:	4651      	mov	r1, sl
 800212c:	018a      	lsls	r2, r1, #6
 800212e:	4651      	mov	r1, sl
 8002130:	1a54      	subs	r4, r2, r1
 8002132:	4659      	mov	r1, fp
 8002134:	eb63 0501 	sbc.w	r5, r3, r1
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	00eb      	lsls	r3, r5, #3
 8002142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002146:	00e2      	lsls	r2, r4, #3
 8002148:	4614      	mov	r4, r2
 800214a:	461d      	mov	r5, r3
 800214c:	4643      	mov	r3, r8
 800214e:	18e3      	adds	r3, r4, r3
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	464b      	mov	r3, r9
 8002154:	eb45 0303 	adc.w	r3, r5, r3
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002166:	4629      	mov	r1, r5
 8002168:	028b      	lsls	r3, r1, #10
 800216a:	4621      	mov	r1, r4
 800216c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002170:	4621      	mov	r1, r4
 8002172:	028a      	lsls	r2, r1, #10
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800217c:	2200      	movs	r2, #0
 800217e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002180:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002182:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002186:	f7fe f83d 	bl	8000204 <__aeabi_uldivmod>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4613      	mov	r3, r2
 8002190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002194:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <HAL_RCC_GetSysClockFreq+0x458>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	0f1b      	lsrs	r3, r3, #28
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80021a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021b2:	e003      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80021b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	37b8      	adds	r7, #184	; 0xb8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	00f42400 	.word	0x00f42400

080021d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e28d      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8083 	beq.w	80022fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021f4:	4b94      	ldr	r3, [pc, #592]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d019      	beq.n	8002234 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002200:	4b91      	ldr	r3, [pc, #580]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002208:	2b08      	cmp	r3, #8
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800220c:	4b8e      	ldr	r3, [pc, #568]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002218:	d00c      	beq.n	8002234 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221a:	4b8b      	ldr	r3, [pc, #556]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d112      	bne.n	800224c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002226:	4b88      	ldr	r3, [pc, #544]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002232:	d10b      	bne.n	800224c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	4b84      	ldr	r3, [pc, #528]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d05b      	beq.n	80022f8 <HAL_RCC_OscConfig+0x124>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d157      	bne.n	80022f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e25a      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002254:	d106      	bne.n	8002264 <HAL_RCC_OscConfig+0x90>
 8002256:	4b7c      	ldr	r3, [pc, #496]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7b      	ldr	r2, [pc, #492]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e01d      	b.n	80022a0 <HAL_RCC_OscConfig+0xcc>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0xb4>
 800226e:	4b76      	ldr	r3, [pc, #472]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a75      	ldr	r2, [pc, #468]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b73      	ldr	r3, [pc, #460]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a72      	ldr	r2, [pc, #456]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xcc>
 8002288:	4b6f      	ldr	r3, [pc, #444]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a6e      	ldr	r2, [pc, #440]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b6c      	ldr	r3, [pc, #432]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a6b      	ldr	r2, [pc, #428]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe fcfa 	bl	8000ca0 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b0:	f7fe fcf6 	bl	8000ca0 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e21f      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b61      	ldr	r3, [pc, #388]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0xdc>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe fce6 	bl	8000ca0 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d8:	f7fe fce2 	bl	8000ca0 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e20b      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	4b57      	ldr	r3, [pc, #348]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x104>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d06f      	beq.n	80023e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002306:	4b50      	ldr	r3, [pc, #320]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b00      	cmp	r3, #0
 8002310:	d017      	beq.n	8002342 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002312:	4b4d      	ldr	r3, [pc, #308]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800231a:	2b08      	cmp	r3, #8
 800231c:	d105      	bne.n	800232a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800231e:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00b      	beq.n	8002342 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232a:	4b47      	ldr	r3, [pc, #284]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d11c      	bne.n	8002370 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002336:	4b44      	ldr	r3, [pc, #272]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d116      	bne.n	8002370 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	4b41      	ldr	r3, [pc, #260]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_RCC_OscConfig+0x186>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e1d3      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235a:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4937      	ldr	r1, [pc, #220]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	e03a      	b.n	80023e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d020      	beq.n	80023ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002378:	4b34      	ldr	r3, [pc, #208]	; (800244c <HAL_RCC_OscConfig+0x278>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe fc8f 	bl	8000ca0 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002386:	f7fe fc8b 	bl	8000ca0 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e1b4      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	4b28      	ldr	r3, [pc, #160]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4925      	ldr	r1, [pc, #148]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]
 80023b8:	e015      	b.n	80023e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ba:	4b24      	ldr	r3, [pc, #144]	; (800244c <HAL_RCC_OscConfig+0x278>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe fc6e 	bl	8000ca0 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c8:	f7fe fc6a 	bl	8000ca0 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e193      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d036      	beq.n	8002460 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d016      	beq.n	8002428 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_RCC_OscConfig+0x27c>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002400:	f7fe fc4e 	bl	8000ca0 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002408:	f7fe fc4a 	bl	8000ca0 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e173      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 800241c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x234>
 8002426:	e01b      	b.n	8002460 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_RCC_OscConfig+0x27c>)
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe fc37 	bl	8000ca0 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	e00e      	b.n	8002454 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002436:	f7fe fc33 	bl	8000ca0 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d907      	bls.n	8002454 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e15c      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
 8002448:	40023800 	.word	0x40023800
 800244c:	42470000 	.word	0x42470000
 8002450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002454:	4b8a      	ldr	r3, [pc, #552]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ea      	bne.n	8002436 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8097 	beq.w	800259c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002472:	4b83      	ldr	r3, [pc, #524]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	4b7f      	ldr	r3, [pc, #508]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a7e      	ldr	r2, [pc, #504]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b7c      	ldr	r3, [pc, #496]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249e:	4b79      	ldr	r3, [pc, #484]	; (8002684 <HAL_RCC_OscConfig+0x4b0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d118      	bne.n	80024dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024aa:	4b76      	ldr	r3, [pc, #472]	; (8002684 <HAL_RCC_OscConfig+0x4b0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a75      	ldr	r2, [pc, #468]	; (8002684 <HAL_RCC_OscConfig+0x4b0>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b6:	f7fe fbf3 	bl	8000ca0 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024be:	f7fe fbef 	bl	8000ca0 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e118      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	4b6c      	ldr	r3, [pc, #432]	; (8002684 <HAL_RCC_OscConfig+0x4b0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x31e>
 80024e4:	4b66      	ldr	r3, [pc, #408]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4a65      	ldr	r2, [pc, #404]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6713      	str	r3, [r2, #112]	; 0x70
 80024f0:	e01c      	b.n	800252c <HAL_RCC_OscConfig+0x358>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x340>
 80024fa:	4b61      	ldr	r3, [pc, #388]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a60      	ldr	r2, [pc, #384]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
 8002506:	4b5e      	ldr	r3, [pc, #376]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	4a5d      	ldr	r2, [pc, #372]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6713      	str	r3, [r2, #112]	; 0x70
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0x358>
 8002514:	4b5a      	ldr	r3, [pc, #360]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	4a59      	ldr	r2, [pc, #356]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	6713      	str	r3, [r2, #112]	; 0x70
 8002520:	4b57      	ldr	r3, [pc, #348]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	4a56      	ldr	r2, [pc, #344]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002526:	f023 0304 	bic.w	r3, r3, #4
 800252a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d015      	beq.n	8002560 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7fe fbb4 	bl	8000ca0 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253a:	e00a      	b.n	8002552 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7fe fbb0 	bl	8000ca0 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	; 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e0d7      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002552:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0ee      	beq.n	800253c <HAL_RCC_OscConfig+0x368>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fe fb9e 	bl	8000ca0 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7fe fb9a 	bl	8000ca0 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0c1      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257e:	4b40      	ldr	r3, [pc, #256]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1ee      	bne.n	8002568 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d105      	bne.n	800259c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	4a3a      	ldr	r2, [pc, #232]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80ad 	beq.w	8002700 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025a6:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d060      	beq.n	8002674 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d145      	bne.n	8002646 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b33      	ldr	r3, [pc, #204]	; (8002688 <HAL_RCC_OscConfig+0x4b4>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fb6e 	bl	8000ca0 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe fb6a 	bl	8000ca0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e093      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	019b      	lsls	r3, r3, #6
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	085b      	lsrs	r3, r3, #1
 80025fe:	3b01      	subs	r3, #1
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	061b      	lsls	r3, r3, #24
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	071b      	lsls	r3, r3, #28
 8002612:	491b      	ldr	r1, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x4b4>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe fb3f 	bl	8000ca0 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002626:	f7fe fb3b 	bl	8000ca0 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e064      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x452>
 8002644:	e05c      	b.n	8002700 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_RCC_OscConfig+0x4b4>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fb28 	bl	8000ca0 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe fb24 	bl	8000ca0 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e04d      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x480>
 8002672:	e045      	b.n	8002700 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d107      	bne.n	800268c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e040      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
 8002680:	40023800 	.word	0x40023800
 8002684:	40007000 	.word	0x40007000
 8002688:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800268c:	4b1f      	ldr	r3, [pc, #124]	; (800270c <HAL_RCC_OscConfig+0x538>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d030      	beq.n	80026fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d129      	bne.n	80026fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d122      	bne.n	80026fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026bc:	4013      	ands	r3, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d119      	bne.n	80026fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	3b01      	subs	r3, #1
 80026d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d10f      	bne.n	80026fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e03f      	b.n	80027a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe f8f4 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2224      	movs	r2, #36	; 0x24
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f829 	bl	80027ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b0:	b0c0      	sub	sp, #256	; 0x100
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c8:	68d9      	ldr	r1, [r3, #12]
 80027ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	ea40 0301 	orr.w	r3, r0, r1
 80027d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002804:	f021 010c 	bic.w	r1, r1, #12
 8002808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002812:	430b      	orrs	r3, r1
 8002814:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002826:	6999      	ldr	r1, [r3, #24]
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	ea40 0301 	orr.w	r3, r0, r1
 8002832:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b8f      	ldr	r3, [pc, #572]	; (8002a78 <UART_SetConfig+0x2cc>)
 800283c:	429a      	cmp	r2, r3
 800283e:	d005      	beq.n	800284c <UART_SetConfig+0xa0>
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	4b8d      	ldr	r3, [pc, #564]	; (8002a7c <UART_SetConfig+0x2d0>)
 8002848:	429a      	cmp	r2, r3
 800284a:	d104      	bne.n	8002856 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800284c:	f7fe ff54 	bl	80016f8 <HAL_RCC_GetPCLK2Freq>
 8002850:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002854:	e003      	b.n	800285e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002856:	f7fe ff3b 	bl	80016d0 <HAL_RCC_GetPCLK1Freq>
 800285a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800285e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002868:	f040 810c 	bne.w	8002a84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800286c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002870:	2200      	movs	r2, #0
 8002872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002876:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800287a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800287e:	4622      	mov	r2, r4
 8002880:	462b      	mov	r3, r5
 8002882:	1891      	adds	r1, r2, r2
 8002884:	65b9      	str	r1, [r7, #88]	; 0x58
 8002886:	415b      	adcs	r3, r3
 8002888:	65fb      	str	r3, [r7, #92]	; 0x5c
 800288a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800288e:	4621      	mov	r1, r4
 8002890:	eb12 0801 	adds.w	r8, r2, r1
 8002894:	4629      	mov	r1, r5
 8002896:	eb43 0901 	adc.w	r9, r3, r1
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ae:	4690      	mov	r8, r2
 80028b0:	4699      	mov	r9, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	eb18 0303 	adds.w	r3, r8, r3
 80028b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028bc:	462b      	mov	r3, r5
 80028be:	eb49 0303 	adc.w	r3, r9, r3
 80028c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80028da:	460b      	mov	r3, r1
 80028dc:	18db      	adds	r3, r3, r3
 80028de:	653b      	str	r3, [r7, #80]	; 0x50
 80028e0:	4613      	mov	r3, r2
 80028e2:	eb42 0303 	adc.w	r3, r2, r3
 80028e6:	657b      	str	r3, [r7, #84]	; 0x54
 80028e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028f0:	f7fd fc88 	bl	8000204 <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4b61      	ldr	r3, [pc, #388]	; (8002a80 <UART_SetConfig+0x2d4>)
 80028fa:	fba3 2302 	umull	r2, r3, r3, r2
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	011c      	lsls	r4, r3, #4
 8002902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002906:	2200      	movs	r2, #0
 8002908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800290c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002910:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002914:	4642      	mov	r2, r8
 8002916:	464b      	mov	r3, r9
 8002918:	1891      	adds	r1, r2, r2
 800291a:	64b9      	str	r1, [r7, #72]	; 0x48
 800291c:	415b      	adcs	r3, r3
 800291e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002920:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002924:	4641      	mov	r1, r8
 8002926:	eb12 0a01 	adds.w	sl, r2, r1
 800292a:	4649      	mov	r1, r9
 800292c:	eb43 0b01 	adc.w	fp, r3, r1
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800293c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002944:	4692      	mov	sl, r2
 8002946:	469b      	mov	fp, r3
 8002948:	4643      	mov	r3, r8
 800294a:	eb1a 0303 	adds.w	r3, sl, r3
 800294e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002952:	464b      	mov	r3, r9
 8002954:	eb4b 0303 	adc.w	r3, fp, r3
 8002958:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002968:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800296c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002970:	460b      	mov	r3, r1
 8002972:	18db      	adds	r3, r3, r3
 8002974:	643b      	str	r3, [r7, #64]	; 0x40
 8002976:	4613      	mov	r3, r2
 8002978:	eb42 0303 	adc.w	r3, r2, r3
 800297c:	647b      	str	r3, [r7, #68]	; 0x44
 800297e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002982:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002986:	f7fd fc3d 	bl	8000204 <__aeabi_uldivmod>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4611      	mov	r1, r2
 8002990:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <UART_SetConfig+0x2d4>)
 8002992:	fba3 2301 	umull	r2, r3, r3, r1
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2264      	movs	r2, #100	; 0x64
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	1acb      	subs	r3, r1, r3
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80029a6:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <UART_SetConfig+0x2d4>)
 80029a8:	fba3 2302 	umull	r2, r3, r3, r2
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029b4:	441c      	add	r4, r3
 80029b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ba:	2200      	movs	r2, #0
 80029bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80029c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80029c8:	4642      	mov	r2, r8
 80029ca:	464b      	mov	r3, r9
 80029cc:	1891      	adds	r1, r2, r2
 80029ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80029d0:	415b      	adcs	r3, r3
 80029d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029d8:	4641      	mov	r1, r8
 80029da:	1851      	adds	r1, r2, r1
 80029dc:	6339      	str	r1, [r7, #48]	; 0x30
 80029de:	4649      	mov	r1, r9
 80029e0:	414b      	adcs	r3, r1
 80029e2:	637b      	str	r3, [r7, #52]	; 0x34
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80029f0:	4659      	mov	r1, fp
 80029f2:	00cb      	lsls	r3, r1, #3
 80029f4:	4651      	mov	r1, sl
 80029f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029fa:	4651      	mov	r1, sl
 80029fc:	00ca      	lsls	r2, r1, #3
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	4603      	mov	r3, r0
 8002a04:	4642      	mov	r2, r8
 8002a06:	189b      	adds	r3, r3, r2
 8002a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a0c:	464b      	mov	r3, r9
 8002a0e:	460a      	mov	r2, r1
 8002a10:	eb42 0303 	adc.w	r3, r2, r3
 8002a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	18db      	adds	r3, r3, r3
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a32:	4613      	mov	r3, r2
 8002a34:	eb42 0303 	adc.w	r3, r2, r3
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a42:	f7fd fbdf 	bl	8000204 <__aeabi_uldivmod>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <UART_SetConfig+0x2d4>)
 8002a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	2164      	movs	r1, #100	; 0x64
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	3332      	adds	r3, #50	; 0x32
 8002a5e:	4a08      	ldr	r2, [pc, #32]	; (8002a80 <UART_SetConfig+0x2d4>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	f003 0207 	and.w	r2, r3, #7
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4422      	add	r2, r4
 8002a72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a74:	e105      	b.n	8002c82 <UART_SetConfig+0x4d6>
 8002a76:	bf00      	nop
 8002a78:	40011000 	.word	0x40011000
 8002a7c:	40011400 	.word	0x40011400
 8002a80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a96:	4642      	mov	r2, r8
 8002a98:	464b      	mov	r3, r9
 8002a9a:	1891      	adds	r1, r2, r2
 8002a9c:	6239      	str	r1, [r7, #32]
 8002a9e:	415b      	adcs	r3, r3
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002aa6:	4641      	mov	r1, r8
 8002aa8:	1854      	adds	r4, r2, r1
 8002aaa:	4649      	mov	r1, r9
 8002aac:	eb43 0501 	adc.w	r5, r3, r1
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	00eb      	lsls	r3, r5, #3
 8002aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002abe:	00e2      	lsls	r2, r4, #3
 8002ac0:	4614      	mov	r4, r2
 8002ac2:	461d      	mov	r5, r3
 8002ac4:	4643      	mov	r3, r8
 8002ac6:	18e3      	adds	r3, r4, r3
 8002ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002acc:	464b      	mov	r3, r9
 8002ace:	eb45 0303 	adc.w	r3, r5, r3
 8002ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ae2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002af2:	4629      	mov	r1, r5
 8002af4:	008b      	lsls	r3, r1, #2
 8002af6:	4621      	mov	r1, r4
 8002af8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002afc:	4621      	mov	r1, r4
 8002afe:	008a      	lsls	r2, r1, #2
 8002b00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b04:	f7fd fb7e 	bl	8000204 <__aeabi_uldivmod>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4b60      	ldr	r3, [pc, #384]	; (8002c90 <UART_SetConfig+0x4e4>)
 8002b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	011c      	lsls	r4, r3, #4
 8002b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b28:	4642      	mov	r2, r8
 8002b2a:	464b      	mov	r3, r9
 8002b2c:	1891      	adds	r1, r2, r2
 8002b2e:	61b9      	str	r1, [r7, #24]
 8002b30:	415b      	adcs	r3, r3
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b38:	4641      	mov	r1, r8
 8002b3a:	1851      	adds	r1, r2, r1
 8002b3c:	6139      	str	r1, [r7, #16]
 8002b3e:	4649      	mov	r1, r9
 8002b40:	414b      	adcs	r3, r1
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b50:	4659      	mov	r1, fp
 8002b52:	00cb      	lsls	r3, r1, #3
 8002b54:	4651      	mov	r1, sl
 8002b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b5a:	4651      	mov	r1, sl
 8002b5c:	00ca      	lsls	r2, r1, #3
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	4603      	mov	r3, r0
 8002b64:	4642      	mov	r2, r8
 8002b66:	189b      	adds	r3, r3, r2
 8002b68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b6c:	464b      	mov	r3, r9
 8002b6e:	460a      	mov	r2, r1
 8002b70:	eb42 0303 	adc.w	r3, r2, r3
 8002b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b90:	4649      	mov	r1, r9
 8002b92:	008b      	lsls	r3, r1, #2
 8002b94:	4641      	mov	r1, r8
 8002b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b9a:	4641      	mov	r1, r8
 8002b9c:	008a      	lsls	r2, r1, #2
 8002b9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ba2:	f7fd fb2f 	bl	8000204 <__aeabi_uldivmod>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <UART_SetConfig+0x4e4>)
 8002bac:	fba3 1302 	umull	r1, r3, r3, r2
 8002bb0:	095b      	lsrs	r3, r3, #5
 8002bb2:	2164      	movs	r1, #100	; 0x64
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	3332      	adds	r3, #50	; 0x32
 8002bbe:	4a34      	ldr	r2, [pc, #208]	; (8002c90 <UART_SetConfig+0x4e4>)
 8002bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bca:	441c      	add	r4, r3
 8002bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	673b      	str	r3, [r7, #112]	; 0x70
 8002bd4:	677a      	str	r2, [r7, #116]	; 0x74
 8002bd6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002bda:	4642      	mov	r2, r8
 8002bdc:	464b      	mov	r3, r9
 8002bde:	1891      	adds	r1, r2, r2
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	415b      	adcs	r3, r3
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bea:	4641      	mov	r1, r8
 8002bec:	1851      	adds	r1, r2, r1
 8002bee:	6039      	str	r1, [r7, #0]
 8002bf0:	4649      	mov	r1, r9
 8002bf2:	414b      	adcs	r3, r1
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c02:	4659      	mov	r1, fp
 8002c04:	00cb      	lsls	r3, r1, #3
 8002c06:	4651      	mov	r1, sl
 8002c08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c0c:	4651      	mov	r1, sl
 8002c0e:	00ca      	lsls	r2, r1, #3
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	4603      	mov	r3, r0
 8002c16:	4642      	mov	r2, r8
 8002c18:	189b      	adds	r3, r3, r2
 8002c1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c1c:	464b      	mov	r3, r9
 8002c1e:	460a      	mov	r2, r1
 8002c20:	eb42 0303 	adc.w	r3, r2, r3
 8002c24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	663b      	str	r3, [r7, #96]	; 0x60
 8002c30:	667a      	str	r2, [r7, #100]	; 0x64
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c3e:	4649      	mov	r1, r9
 8002c40:	008b      	lsls	r3, r1, #2
 8002c42:	4641      	mov	r1, r8
 8002c44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c48:	4641      	mov	r1, r8
 8002c4a:	008a      	lsls	r2, r1, #2
 8002c4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c50:	f7fd fad8 	bl	8000204 <__aeabi_uldivmod>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <UART_SetConfig+0x4e4>)
 8002c5a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2164      	movs	r1, #100	; 0x64
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	3332      	adds	r3, #50	; 0x32
 8002c6c:	4a08      	ldr	r2, [pc, #32]	; (8002c90 <UART_SetConfig+0x4e4>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	f003 020f 	and.w	r2, r3, #15
 8002c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4422      	add	r2, r4
 8002c80:	609a      	str	r2, [r3, #8]
}
 8002c82:	bf00      	nop
 8002c84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c8e:	bf00      	nop
 8002c90:	51eb851f 	.word	0x51eb851f

08002c94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c94:	b084      	sub	sp, #16
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	f107 001c 	add.w	r0, r7, #28
 8002ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d122      	bne.n	8002cf2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d105      	bne.n	8002ce6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fa9c 	bl	8003224 <USB_CoreReset>
 8002cec:	4603      	mov	r3, r0
 8002cee:	73fb      	strb	r3, [r7, #15]
 8002cf0:	e01a      	b.n	8002d28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fa90 	bl	8003224 <USB_CoreReset>
 8002d04:	4603      	mov	r3, r0
 8002d06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38
 8002d1a:	e005      	b.n	8002d28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10b      	bne.n	8002d46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f043 0206 	orr.w	r2, r3, #6
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f043 0220 	orr.w	r2, r3, #32
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d52:	b004      	add	sp, #16
 8002d54:	4770      	bx	lr

08002d56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f023 0201 	bic.w	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d115      	bne.n	8002dc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002da6:	2001      	movs	r0, #1
 8002da8:	f7fd ff86 	bl	8000cb8 <HAL_Delay>
      ms++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	3301      	adds	r3, #1
 8002db0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fa28 	bl	8003208 <USB_GetMode>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d01e      	beq.n	8002dfc <USB_SetCurrentMode+0x84>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b31      	cmp	r3, #49	; 0x31
 8002dc2:	d9f0      	bls.n	8002da6 <USB_SetCurrentMode+0x2e>
 8002dc4:	e01a      	b.n	8002dfc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d115      	bne.n	8002df8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002dd8:	2001      	movs	r0, #1
 8002dda:	f7fd ff6d 	bl	8000cb8 <HAL_Delay>
      ms++;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3301      	adds	r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fa0f 	bl	8003208 <USB_GetMode>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <USB_SetCurrentMode+0x84>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b31      	cmp	r3, #49	; 0x31
 8002df4:	d9f0      	bls.n	8002dd8 <USB_SetCurrentMode+0x60>
 8002df6:	e001      	b.n	8002dfc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e005      	b.n	8002e08 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b32      	cmp	r3, #50	; 0x32
 8002e00:	d101      	bne.n	8002e06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e10:	b084      	sub	sp, #16
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	e009      	b.n	8002e44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	3340      	adds	r3, #64	; 0x40
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	3301      	adds	r3, #1
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b0e      	cmp	r3, #14
 8002e48:	d9f2      	bls.n	8002e30 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d11c      	bne.n	8002e8a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e5e:	f043 0302 	orr.w	r3, r3, #2
 8002e62:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e005      	b.n	8002e96 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	680b      	ldr	r3, [r1, #0]
 8002eb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d10c      	bne.n	8002ed6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d104      	bne.n	8002ecc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f965 	bl	8003194 <USB_SetDevSpeed>
 8002eca:	e008      	b.n	8002ede <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002ecc:	2101      	movs	r1, #1
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f960 	bl	8003194 <USB_SetDevSpeed>
 8002ed4:	e003      	b.n	8002ede <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002ed6:	2103      	movs	r1, #3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f95b 	bl	8003194 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ede:	2110      	movs	r1, #16
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f8f3 	bl	80030cc <USB_FlushTxFifo>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f91f 	bl	8003134 <USB_FlushRxFifo>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f06:	461a      	mov	r2, r3
 8002f08:	2300      	movs	r3, #0
 8002f0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f12:	461a      	mov	r2, r3
 8002f14:	2300      	movs	r3, #0
 8002f16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2300      	movs	r3, #0
 8002f22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	e043      	b.n	8002fb2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f40:	d118      	bne.n	8002f74 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f54:	461a      	mov	r2, r3
 8002f56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	e013      	b.n	8002f86 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e008      	b.n	8002f86 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f80:	461a      	mov	r2, r3
 8002f82:	2300      	movs	r3, #0
 8002f84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f92:	461a      	mov	r2, r3
 8002f94:	2300      	movs	r3, #0
 8002f96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002faa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d3b7      	bcc.n	8002f2a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	e043      	b.n	8003048 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fd6:	d118      	bne.n	800300a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fea:	461a      	mov	r2, r3
 8002fec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e013      	b.n	800301c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003000:	461a      	mov	r2, r3
 8003002:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e008      	b.n	800301c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4413      	add	r3, r2
 8003012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003016:	461a      	mov	r2, r3
 8003018:	2300      	movs	r3, #0
 800301a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003028:	461a      	mov	r2, r3
 800302a:	2300      	movs	r3, #0
 800302c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303a:	461a      	mov	r2, r3
 800303c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003040:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	3301      	adds	r3, #1
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	429a      	cmp	r2, r3
 800304e:	d3b7      	bcc.n	8002fc0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800305e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003062:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003070:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	2b00      	cmp	r3, #0
 8003076:	d105      	bne.n	8003084 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f043 0210 	orr.w	r2, r3, #16
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <USB_DevInit+0x2b8>)
 800308a:	4313      	orrs	r3, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f043 0208 	orr.w	r2, r3, #8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80030a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d107      	bne.n	80030b8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030b0:	f043 0304 	orr.w	r3, r3, #4
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030c4:	b004      	add	sp, #16
 80030c6:	4770      	bx	lr
 80030c8:	803c3800 	.word	0x803c3800

080030cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3301      	adds	r3, #1
 80030de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a13      	ldr	r2, [pc, #76]	; (8003130 <USB_FlushTxFifo+0x64>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e01b      	b.n	8003124 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	daf2      	bge.n	80030da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	019b      	lsls	r3, r3, #6
 80030fc:	f043 0220 	orr.w	r2, r3, #32
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3301      	adds	r3, #1
 8003108:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4a08      	ldr	r2, [pc, #32]	; (8003130 <USB_FlushTxFifo+0x64>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e006      	b.n	8003124 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b20      	cmp	r3, #32
 8003120:	d0f0      	beq.n	8003104 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	00030d40 	.word	0x00030d40

08003134 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3301      	adds	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4a11      	ldr	r2, [pc, #68]	; (8003190 <USB_FlushRxFifo+0x5c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e018      	b.n	8003184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	daf2      	bge.n	8003140 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2210      	movs	r2, #16
 8003162:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3301      	adds	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a08      	ldr	r2, [pc, #32]	; (8003190 <USB_FlushRxFifo+0x5c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e006      	b.n	8003184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b10      	cmp	r3, #16
 8003180:	d0f0      	beq.n	8003164 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	00030d40 	.word	0x00030d40

08003194 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	68f9      	ldr	r1, [r7, #12]
 80031b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80031e0:	f023 0303 	bic.w	r3, r3, #3
 80031e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031f4:	f043 0302 	orr.w	r3, r3, #2
 80031f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f003 0301 	and.w	r3, r3, #1
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	3301      	adds	r3, #1
 8003234:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4a13      	ldr	r2, [pc, #76]	; (8003288 <USB_CoreReset+0x64>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e01b      	b.n	800327a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	daf2      	bge.n	8003230 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	3301      	adds	r3, #1
 800325e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4a09      	ldr	r2, [pc, #36]	; (8003288 <USB_CoreReset+0x64>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d901      	bls.n	800326c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e006      	b.n	800327a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d0f0      	beq.n	800325a <USB_CoreReset+0x36>

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	00030d40 	.word	0x00030d40

0800328c <__libc_init_array>:
 800328c:	b570      	push	{r4, r5, r6, lr}
 800328e:	4d0d      	ldr	r5, [pc, #52]	; (80032c4 <__libc_init_array+0x38>)
 8003290:	4c0d      	ldr	r4, [pc, #52]	; (80032c8 <__libc_init_array+0x3c>)
 8003292:	1b64      	subs	r4, r4, r5
 8003294:	10a4      	asrs	r4, r4, #2
 8003296:	2600      	movs	r6, #0
 8003298:	42a6      	cmp	r6, r4
 800329a:	d109      	bne.n	80032b0 <__libc_init_array+0x24>
 800329c:	4d0b      	ldr	r5, [pc, #44]	; (80032cc <__libc_init_array+0x40>)
 800329e:	4c0c      	ldr	r4, [pc, #48]	; (80032d0 <__libc_init_array+0x44>)
 80032a0:	f000 f820 	bl	80032e4 <_init>
 80032a4:	1b64      	subs	r4, r4, r5
 80032a6:	10a4      	asrs	r4, r4, #2
 80032a8:	2600      	movs	r6, #0
 80032aa:	42a6      	cmp	r6, r4
 80032ac:	d105      	bne.n	80032ba <__libc_init_array+0x2e>
 80032ae:	bd70      	pop	{r4, r5, r6, pc}
 80032b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b4:	4798      	blx	r3
 80032b6:	3601      	adds	r6, #1
 80032b8:	e7ee      	b.n	8003298 <__libc_init_array+0xc>
 80032ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80032be:	4798      	blx	r3
 80032c0:	3601      	adds	r6, #1
 80032c2:	e7f2      	b.n	80032aa <__libc_init_array+0x1e>
 80032c4:	08003324 	.word	0x08003324
 80032c8:	08003324 	.word	0x08003324
 80032cc:	08003324 	.word	0x08003324
 80032d0:	08003328 	.word	0x08003328

080032d4 <memset>:
 80032d4:	4402      	add	r2, r0
 80032d6:	4603      	mov	r3, r0
 80032d8:	4293      	cmp	r3, r2
 80032da:	d100      	bne.n	80032de <memset+0xa>
 80032dc:	4770      	bx	lr
 80032de:	f803 1b01 	strb.w	r1, [r3], #1
 80032e2:	e7f9      	b.n	80032d8 <memset+0x4>

080032e4 <_init>:
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e6:	bf00      	nop
 80032e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ea:	bc08      	pop	{r3}
 80032ec:	469e      	mov	lr, r3
 80032ee:	4770      	bx	lr

080032f0 <_fini>:
 80032f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f2:	bf00      	nop
 80032f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f6:	bc08      	pop	{r3}
 80032f8:	469e      	mov	lr, r3
 80032fa:	4770      	bx	lr
